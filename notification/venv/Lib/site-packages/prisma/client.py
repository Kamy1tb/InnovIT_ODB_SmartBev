# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
from pathlib import Path
from types import TracebackType

from . import types, models, errors, actions
from .types import DatasourceOverride, HttpConfig
from ._types import BaseModelT
from .bases import _PrismaModel
from .engine import AbstractEngine, QueryEngine
from .builder import QueryBuilder
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix
from ._raw_query import deserialize_raw_results

__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

SCHEMA_PATH = Path('C:/Users/USER/Desktop/Odb_notification/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = BinaryPaths.parse_obj({'queryEngine': {'windows': 'C:\\Users\\USER\\.cache\\prisma-python\\binaries\\4.11.0\\8fde8fef4033376662cad983758335009d522acb\\node_modules\\prisma\\query-engine-windows.exe'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})

RegisteredClient = Union['Prisma', Callable[[], 'Prisma']]
_registered_client: Optional[RegisteredClient] = None


class UseClientDefault:
    """For certain parameters such as `timeout=...` we can make our intent more clear
    by typing the parameter with this class rather than using None, for example:

    ```py
    def connect(timeout: Union[int, UseClientDefault] = UseClientDefault()) -> None: ...
    ```

    relays the intention more clearly than:

    ```py
    def connect(timeout: Optional[int] = None) -> None: ...
    ```

    This solution also allows us to indicate an "unset" state that is uniquely distinct
    from `None` which may be useful in the future.
    """


_USE_CLIENT_DEFAULT = UseClientDefault()


def load_env(*, override: bool = False, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


def register(client: RegisteredClient) -> None:
    """Register a client instance to be retrieved by `get_client()`

    This function _must_ only be called once, preferrably as soon as possible
    to avoid any potentially confusing errors with threads or processes.
    """
    global _registered_client

    if _registered_client is not None:
        raise errors.ClientAlreadyRegisteredError()

    if not isinstance(client, Prisma) and not callable(client):
        raise TypeError(
            f'Expected either a {Prisma} instance or a function that returns a {Prisma} but got {client} instead.'
        )

    _registered_client = client


def get_client() -> 'Prisma':
    """Get the registered client instance

    Raises errors.ClientNotRegisteredError() if no client instance has been registered.
    """
    registered = _registered_client
    if registered is None:
        raise errors.ClientNotRegisteredError() from None

    if isinstance(registered, Prisma):
        return registered

    client = registered()
    if not isinstance(client, Prisma):  # pyright: ignore[reportUnnecessaryIsInstance]
        raise TypeError(
            f'Registered function returned {client} instead of a {Prisma} instance.'
        )

    return client


class Prisma:
    annonceur: 'actions.annonceurActions[models.annonceur]'
    categorie: 'actions.categorieActions[models.categorie]'
    categoryclaims: 'actions.categoryclaimsActions[models.categoryclaims]'
    categoryrecette: 'actions.categoryrecetteActions[models.categoryrecette]'
    categorysensors: 'actions.categorysensorsActions[models.categorysensors]'
    commande: 'actions.commandeActions[models.commande]'
    distributeur: 'actions.distributeurActions[models.distributeur]'
    distributeurrecette: 'actions.distributeurRecetteActions[models.distributeurRecette]'
    entrepise: 'actions.entrepiseActions[models.entrepise]'
    facture: 'actions.factureActions[models.facture]'
    infopaiment: 'actions.infopaimentActions[models.infopaiment]'
    ingredient: 'actions.ingredientActions[models.ingredient]'
    pack: 'actions.packActions[models.pack]'
    publicite: 'actions.publiciteActions[models.publicite]'
    recette: 'actions.recetteActions[models.recette]'
    recetteingr: 'actions.recetteingrActions[models.recetteingr]'
    reclamation: 'actions.reclamationActions[models.reclamation]'
    role: 'actions.roleActions[models.role]'
    sensors: 'actions.sensorsActions[models.sensors]'
    task: 'actions.taskActions[models.task]'
    tokens: 'actions.tokensActions[models.tokens]'
    typetask: 'actions.typetaskActions[models.typetask]'
    users: 'actions.usersActions[models.users]'

    __slots__ = (
        'annonceur',
        'categorie',
        'categoryclaims',
        'categoryrecette',
        'categorysensors',
        'commande',
        'distributeur',
        'distributeurrecette',
        'entrepise',
        'facture',
        'infopaiment',
        'ingredient',
        'pack',
        'publicite',
        'recette',
        'recetteingr',
        'reclamation',
        'role',
        'sensors',
        'task',
        'tokens',
        'typetask',
        'users',
        '__engine',
        '_active_provider',
        '_log_queries',
        '_datasource',
        '_connect_timeout',
        '_http_config',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: Optional[DatasourceOverride] = None,
        connect_timeout: int = 10,
        http: Optional[HttpConfig] = None,
    ) -> None:
        self.annonceur = actions.annonceurActions[models.annonceur](self, models.annonceur)
        self.categorie = actions.categorieActions[models.categorie](self, models.categorie)
        self.categoryclaims = actions.categoryclaimsActions[models.categoryclaims](self, models.categoryclaims)
        self.categoryrecette = actions.categoryrecetteActions[models.categoryrecette](self, models.categoryrecette)
        self.categorysensors = actions.categorysensorsActions[models.categorysensors](self, models.categorysensors)
        self.commande = actions.commandeActions[models.commande](self, models.commande)
        self.distributeur = actions.distributeurActions[models.distributeur](self, models.distributeur)
        self.distributeurrecette = actions.distributeurRecetteActions[models.distributeurRecette](self, models.distributeurRecette)
        self.entrepise = actions.entrepiseActions[models.entrepise](self, models.entrepise)
        self.facture = actions.factureActions[models.facture](self, models.facture)
        self.infopaiment = actions.infopaimentActions[models.infopaiment](self, models.infopaiment)
        self.ingredient = actions.ingredientActions[models.ingredient](self, models.ingredient)
        self.pack = actions.packActions[models.pack](self, models.pack)
        self.publicite = actions.publiciteActions[models.publicite](self, models.publicite)
        self.recette = actions.recetteActions[models.recette](self, models.recette)
        self.recetteingr = actions.recetteingrActions[models.recetteingr](self, models.recetteingr)
        self.reclamation = actions.reclamationActions[models.reclamation](self, models.reclamation)
        self.role = actions.roleActions[models.role](self, models.role)
        self.sensors = actions.sensorsActions[models.sensors](self, models.sensors)
        self.task = actions.taskActions[models.task](self, models.task)
        self.tokens = actions.tokensActions[models.tokens](self, models.tokens)
        self.typetask = actions.typetaskActions[models.typetask](self, models.typetask)
        self.users = actions.usersActions[models.users](self, models.users)
        self.__engine: Optional[AbstractEngine] = None
        self._active_provider = 'mysql'
        self._log_queries = log_queries
        self._datasource = datasource
        self._connect_timeout = connect_timeout
        self._http_config: HttpConfig = http or {}

        if use_dotenv:
            load_env()

        if auto_register:
            register(self)

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None


    async def __aenter__(self) -> 'Prisma':
        await self.connect()
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if self.is_connected():
            await self.disconnect()

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    async def connect(
        self,
        timeout: Union[int, UseClientDefault] = _USE_CLIENT_DEFAULT,
    ) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if isinstance(timeout, UseClientDefault):
            timeout = self._connect_timeout

        if self.__engine is None:
            self.__engine = self._create_engine(dml_path=PACKAGED_SCHEMA_PATH)

        datasources: Optional[List[types.DatasourceOverride]] = None
        if self._datasource is not None:
            ds = self._datasource.copy()
            ds.setdefault('name', 'db')
            datasources = [ds]

        await self.__engine.connect(
            timeout=timeout,
            datasources=datasources,
        )

    async def disconnect(self, timeout: Optional[float] = None) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            await self.__engine.aclose(timeout=timeout)
            self.__engine.stop(timeout=timeout)
            self.__engine = None

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            operation='mutation',
            method='queryRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> 'Batch':
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    # TODO: don't return Any
    async def _execute(
        self,
        method: str,
        operation: str,
        arguments: Dict[str, Any],
        model: Optional[Type['_PrismaModel']] = None,
        root_selection: Optional[List[str]] = None
    ) -> Any:
        builder = QueryBuilder(
            operation=operation,
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return await self._engine.query(builder.build())

    def _create_engine(self, dml_path: Path = PACKAGED_SCHEMA_PATH) -> AbstractEngine:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine(dml_path=dml_path, log_queries=self._log_queries, **self._http_config)

        raise NotImplementedError(f'Unsupported engine type: {ENGINE_TYPE}')

    @property
    def _engine_class(self) -> Type[AbstractEngine]:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine
        else:  # pragma: no cover
            raise RuntimeError(f'Unhandled engine type: {ENGINE_TYPE}')

    @property
    def _engine(self) -> AbstractEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine

    def _make_sqlite_datasource(self) -> DatasourceOverride:
        return {
            'name': 'db',
            'url': self._make_sqlite_url(self._default_datasource['url']),
        }

    def _make_sqlite_url(self, url: str, *, relative_to: Path = SCHEMA_PATH.parent) -> str:
        url_path = removeprefix(removeprefix(url, 'file:'), 'sqlite:')
        if url_path == url:
            return url

        if Path(url_path).is_absolute():
            return url

        return f'file:{relative_to.joinpath(url_path).resolve()}'

    @property
    def _default_datasource(self) -> DatasourceOverride:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': 'mysql://innovit_user:innovit_pwd@mysql-innovit.alwaysdata.net:3306/innovit_smartbev', 'fromEnvVar': None}).resolve(),
        }


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    annonceur: 'annonceurBatchActions'
    categorie: 'categorieBatchActions'
    categoryclaims: 'categoryclaimsBatchActions'
    categoryrecette: 'categoryrecetteBatchActions'
    categorysensors: 'categorysensorsBatchActions'
    commande: 'commandeBatchActions'
    distributeur: 'distributeurBatchActions'
    distributeurrecette: 'distributeurRecetteBatchActions'
    entrepise: 'entrepiseBatchActions'
    facture: 'factureBatchActions'
    infopaiment: 'infopaimentBatchActions'
    ingredient: 'ingredientBatchActions'
    pack: 'packBatchActions'
    publicite: 'publiciteBatchActions'
    recette: 'recetteBatchActions'
    recetteingr: 'recetteingrBatchActions'
    reclamation: 'reclamationBatchActions'
    role: 'roleBatchActions'
    sensors: 'sensorsBatchActions'
    task: 'taskBatchActions'
    tokens: 'tokensBatchActions'
    typetask: 'typetaskBatchActions'
    users: 'usersBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.annonceur = annonceurBatchActions(self)
        self.categorie = categorieBatchActions(self)
        self.categoryclaims = categoryclaimsBatchActions(self)
        self.categoryrecette = categoryrecetteBatchActions(self)
        self.categorysensors = categorysensorsBatchActions(self)
        self.commande = commandeBatchActions(self)
        self.distributeur = distributeurBatchActions(self)
        self.distributeurrecette = distributeurRecetteBatchActions(self)
        self.entrepise = entrepiseBatchActions(self)
        self.facture = factureBatchActions(self)
        self.infopaiment = infopaimentBatchActions(self)
        self.ingredient = ingredientBatchActions(self)
        self.pack = packBatchActions(self)
        self.publicite = publiciteBatchActions(self)
        self.recette = recetteBatchActions(self)
        self.recetteingr = recetteingrBatchActions(self)
        self.reclamation = reclamationBatchActions(self)
        self.role = roleBatchActions(self)
        self.sensors = sensorsBatchActions(self)
        self.task = taskBatchActions(self)
        self.tokens = tokensBatchActions(self)
        self.typetask = typetaskBatchActions(self)
        self.users = usersBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        from .builder import dumps

        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(dumps(payload))

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class annonceurBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.annonceurCreateInput,
        include: Optional[types.annonceurInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.annonceur,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.annonceurCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.annonceur,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.annonceurWhereUniqueInput,
        include: Optional[types.annonceurInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.annonceur,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.annonceurUpdateInput,
        where: types.annonceurWhereUniqueInput,
        include: Optional[types.annonceurInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.annonceur,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.annonceurWhereUniqueInput,
        data: types.annonceurUpsertInput,
        include: Optional[types.annonceurInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.annonceur,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.annonceurUpdateManyMutationInput,
        where: types.annonceurWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.annonceur,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.annonceurWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.annonceur,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class categorieBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.categorieCreateInput,
        include: Optional[types.categorieInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.categorie,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.categorieCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.categorie,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.categorieWhereUniqueInput,
        include: Optional[types.categorieInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.categorie,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.categorieUpdateInput,
        where: types.categorieWhereUniqueInput,
        include: Optional[types.categorieInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.categorie,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.categorieWhereUniqueInput,
        data: types.categorieUpsertInput,
        include: Optional[types.categorieInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.categorie,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.categorieUpdateManyMutationInput,
        where: types.categorieWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.categorie,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.categorieWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.categorie,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class categoryclaimsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.categoryclaimsCreateInput,
        include: Optional[types.categoryclaimsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.categoryclaims,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.categoryclaimsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.categoryclaims,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.categoryclaimsWhereUniqueInput,
        include: Optional[types.categoryclaimsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.categoryclaims,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.categoryclaimsUpdateInput,
        where: types.categoryclaimsWhereUniqueInput,
        include: Optional[types.categoryclaimsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.categoryclaims,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.categoryclaimsWhereUniqueInput,
        data: types.categoryclaimsUpsertInput,
        include: Optional[types.categoryclaimsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.categoryclaims,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.categoryclaimsUpdateManyMutationInput,
        where: types.categoryclaimsWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.categoryclaims,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.categoryclaimsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.categoryclaims,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class categoryrecetteBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.categoryrecetteCreateInput,
        include: Optional[types.categoryrecetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.categoryrecette,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.categoryrecetteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.categoryrecette,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.categoryrecetteWhereUniqueInput,
        include: Optional[types.categoryrecetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.categoryrecette,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.categoryrecetteUpdateInput,
        where: types.categoryrecetteWhereUniqueInput,
        include: Optional[types.categoryrecetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.categoryrecette,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.categoryrecetteWhereUniqueInput,
        data: types.categoryrecetteUpsertInput,
        include: Optional[types.categoryrecetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.categoryrecette,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.categoryrecetteUpdateManyMutationInput,
        where: types.categoryrecetteWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.categoryrecette,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.categoryrecetteWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.categoryrecette,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class categorysensorsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.categorysensorsCreateInput,
        include: Optional[types.categorysensorsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.categorysensors,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.categorysensorsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.categorysensors,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.categorysensorsWhereUniqueInput,
        include: Optional[types.categorysensorsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.categorysensors,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.categorysensorsUpdateInput,
        where: types.categorysensorsWhereUniqueInput,
        include: Optional[types.categorysensorsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.categorysensors,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.categorysensorsWhereUniqueInput,
        data: types.categorysensorsUpsertInput,
        include: Optional[types.categorysensorsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.categorysensors,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.categorysensorsUpdateManyMutationInput,
        where: types.categorysensorsWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.categorysensors,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.categorysensorsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.categorysensors,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class commandeBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.commandeCreateInput,
        include: Optional[types.commandeInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.commande,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.commandeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.commande,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.commandeWhereUniqueInput,
        include: Optional[types.commandeInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.commande,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.commandeUpdateInput,
        where: types.commandeWhereUniqueInput,
        include: Optional[types.commandeInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.commande,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.commandeWhereUniqueInput,
        data: types.commandeUpsertInput,
        include: Optional[types.commandeInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.commande,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.commandeUpdateManyMutationInput,
        where: types.commandeWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.commande,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.commandeWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.commande,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class distributeurBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.distributeurCreateInput,
        include: Optional[types.distributeurInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.distributeur,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.distributeurCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.distributeur,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.distributeurWhereUniqueInput,
        include: Optional[types.distributeurInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.distributeur,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.distributeurUpdateInput,
        where: types.distributeurWhereUniqueInput,
        include: Optional[types.distributeurInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.distributeur,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.distributeurWhereUniqueInput,
        data: types.distributeurUpsertInput,
        include: Optional[types.distributeurInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.distributeur,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.distributeurUpdateManyMutationInput,
        where: types.distributeurWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.distributeur,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.distributeurWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.distributeur,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class distributeurRecetteBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.distributeurRecetteCreateInput,
        include: Optional[types.distributeurRecetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.distributeurRecette,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.distributeurRecetteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.distributeurRecette,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.distributeurRecetteWhereUniqueInput,
        include: Optional[types.distributeurRecetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.distributeurRecette,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.distributeurRecetteUpdateInput,
        where: types.distributeurRecetteWhereUniqueInput,
        include: Optional[types.distributeurRecetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.distributeurRecette,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.distributeurRecetteWhereUniqueInput,
        data: types.distributeurRecetteUpsertInput,
        include: Optional[types.distributeurRecetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.distributeurRecette,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.distributeurRecetteUpdateManyMutationInput,
        where: types.distributeurRecetteWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.distributeurRecette,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.distributeurRecetteWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.distributeurRecette,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class entrepiseBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.entrepiseCreateInput,
        include: Optional[types.entrepiseInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.entrepise,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.entrepiseCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.entrepise,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.entrepiseWhereUniqueInput,
        include: Optional[types.entrepiseInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.entrepise,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.entrepiseUpdateInput,
        where: types.entrepiseWhereUniqueInput,
        include: Optional[types.entrepiseInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.entrepise,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.entrepiseWhereUniqueInput,
        data: types.entrepiseUpsertInput,
        include: Optional[types.entrepiseInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.entrepise,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.entrepiseUpdateManyMutationInput,
        where: types.entrepiseWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.entrepise,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.entrepiseWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.entrepise,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class factureBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.factureCreateInput,
        include: Optional[types.factureInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.facture,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.factureCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.facture,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.factureWhereUniqueInput,
        include: Optional[types.factureInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.facture,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.factureUpdateInput,
        where: types.factureWhereUniqueInput,
        include: Optional[types.factureInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.facture,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.factureWhereUniqueInput,
        data: types.factureUpsertInput,
        include: Optional[types.factureInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.facture,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.factureUpdateManyMutationInput,
        where: types.factureWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.facture,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.factureWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.facture,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class infopaimentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.infopaimentCreateInput,
        include: Optional[types.infopaimentInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.infopaiment,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.infopaimentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.infopaiment,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.infopaimentWhereUniqueInput,
        include: Optional[types.infopaimentInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.infopaiment,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.infopaimentUpdateInput,
        where: types.infopaimentWhereUniqueInput,
        include: Optional[types.infopaimentInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.infopaiment,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.infopaimentWhereUniqueInput,
        data: types.infopaimentUpsertInput,
        include: Optional[types.infopaimentInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.infopaiment,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.infopaimentUpdateManyMutationInput,
        where: types.infopaimentWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.infopaiment,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.infopaimentWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.infopaiment,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ingredientBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ingredientCreateInput,
        include: Optional[types.ingredientInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.ingredient,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ingredientCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.ingredient,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ingredientWhereUniqueInput,
        include: Optional[types.ingredientInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.ingredient,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ingredientUpdateInput,
        where: types.ingredientWhereUniqueInput,
        include: Optional[types.ingredientInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.ingredient,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ingredientWhereUniqueInput,
        data: types.ingredientUpsertInput,
        include: Optional[types.ingredientInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.ingredient,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ingredientUpdateManyMutationInput,
        where: types.ingredientWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.ingredient,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ingredientWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.ingredient,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class packBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.packCreateInput,
        include: Optional[types.packInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.pack,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.packCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.pack,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.packWhereUniqueInput,
        include: Optional[types.packInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.pack,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.packUpdateInput,
        where: types.packWhereUniqueInput,
        include: Optional[types.packInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.pack,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.packWhereUniqueInput,
        data: types.packUpsertInput,
        include: Optional[types.packInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.pack,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.packUpdateManyMutationInput,
        where: types.packWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.pack,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.packWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.pack,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class publiciteBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.publiciteCreateInput,
        include: Optional[types.publiciteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.publicite,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.publiciteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.publicite,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.publiciteWhereUniqueInput,
        include: Optional[types.publiciteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.publicite,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.publiciteUpdateInput,
        where: types.publiciteWhereUniqueInput,
        include: Optional[types.publiciteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.publicite,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.publiciteWhereUniqueInput,
        data: types.publiciteUpsertInput,
        include: Optional[types.publiciteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.publicite,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.publiciteUpdateManyMutationInput,
        where: types.publiciteWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.publicite,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.publiciteWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.publicite,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class recetteBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.recetteCreateInput,
        include: Optional[types.recetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.recette,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.recetteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.recette,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.recetteWhereUniqueInput,
        include: Optional[types.recetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.recette,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.recetteUpdateInput,
        where: types.recetteWhereUniqueInput,
        include: Optional[types.recetteInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.recette,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.recetteWhereUniqueInput,
        data: types.recetteUpsertInput,
        include: Optional[types.recetteInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.recette,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.recetteUpdateManyMutationInput,
        where: types.recetteWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.recette,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.recetteWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.recette,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class recetteingrBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.recetteingrCreateInput,
        include: Optional[types.recetteingrInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.recetteingr,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.recetteingrCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.recetteingr,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.recetteingrWhereUniqueInput,
        include: Optional[types.recetteingrInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.recetteingr,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.recetteingrUpdateInput,
        where: types.recetteingrWhereUniqueInput,
        include: Optional[types.recetteingrInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.recetteingr,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.recetteingrWhereUniqueInput,
        data: types.recetteingrUpsertInput,
        include: Optional[types.recetteingrInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.recetteingr,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.recetteingrUpdateManyMutationInput,
        where: types.recetteingrWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.recetteingr,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.recetteingrWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.recetteingr,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class reclamationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.reclamationCreateInput,
        include: Optional[types.reclamationInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.reclamation,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.reclamationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.reclamation,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.reclamationWhereUniqueInput,
        include: Optional[types.reclamationInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.reclamation,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.reclamationUpdateInput,
        where: types.reclamationWhereUniqueInput,
        include: Optional[types.reclamationInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.reclamation,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.reclamationWhereUniqueInput,
        data: types.reclamationUpsertInput,
        include: Optional[types.reclamationInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.reclamation,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.reclamationUpdateManyMutationInput,
        where: types.reclamationWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.reclamation,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.reclamationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.reclamation,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class roleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.roleCreateInput,
        include: Optional[types.roleInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.role,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.roleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.role,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.roleWhereUniqueInput,
        include: Optional[types.roleInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.role,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.roleUpdateInput,
        where: types.roleWhereUniqueInput,
        include: Optional[types.roleInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.role,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.roleWhereUniqueInput,
        data: types.roleUpsertInput,
        include: Optional[types.roleInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.role,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.roleUpdateManyMutationInput,
        where: types.roleWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.role,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.roleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.role,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class sensorsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.sensorsCreateInput,
        include: Optional[types.sensorsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.sensors,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.sensorsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.sensors,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.sensorsWhereUniqueInput,
        include: Optional[types.sensorsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.sensors,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.sensorsUpdateInput,
        where: types.sensorsWhereUniqueInput,
        include: Optional[types.sensorsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.sensors,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.sensorsWhereUniqueInput,
        data: types.sensorsUpsertInput,
        include: Optional[types.sensorsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.sensors,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.sensorsUpdateManyMutationInput,
        where: types.sensorsWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.sensors,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.sensorsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.sensors,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class taskBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.taskCreateInput,
        include: Optional[types.taskInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.task,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.taskCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.task,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.taskWhereUniqueInput,
        include: Optional[types.taskInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.task,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.taskUpdateInput,
        where: types.taskWhereUniqueInput,
        include: Optional[types.taskInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.task,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.taskWhereUniqueInput,
        data: types.taskUpsertInput,
        include: Optional[types.taskInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.task,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.taskUpdateManyMutationInput,
        where: types.taskWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.task,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.taskWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.task,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class tokensBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.tokensCreateInput,
        include: Optional[types.tokensInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.tokens,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.tokensCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.tokens,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.tokensWhereUniqueInput,
        include: Optional[types.tokensInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.tokens,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.tokensUpdateInput,
        where: types.tokensWhereUniqueInput,
        include: Optional[types.tokensInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.tokens,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.tokensWhereUniqueInput,
        data: types.tokensUpsertInput,
        include: Optional[types.tokensInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.tokens,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.tokensUpdateManyMutationInput,
        where: types.tokensWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.tokens,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.tokensWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.tokens,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class typetaskBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.typetaskCreateInput,
        include: Optional[types.typetaskInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.typetask,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.typetaskCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.typetask,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.typetaskWhereUniqueInput,
        include: Optional[types.typetaskInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.typetask,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.typetaskUpdateInput,
        where: types.typetaskWhereUniqueInput,
        include: Optional[types.typetaskInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.typetask,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.typetaskWhereUniqueInput,
        data: types.typetaskUpsertInput,
        include: Optional[types.typetaskInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.typetask,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.typetaskUpdateManyMutationInput,
        where: types.typetaskWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.typetask,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.typetaskWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.typetask,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class usersBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.usersCreateInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model=models.users,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.usersCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model=models.users,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.usersUpdateInput,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model=models.users,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.usersWhereUniqueInput,
        data: types.usersUpsertInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.usersUpdateManyMutationInput,
        where: types.usersWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model=models.users,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.usersWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model=models.users,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma