# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel, BaseConfig

from . import fields, actions
from ._types import FuncType
from .builder import serialize_base64


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _Config(BaseConfig):
    use_enum_values: bool = True
    arbitrary_types_allowed: bool = True
    allow_population_by_field_name: bool = True
    json_encoders: Dict[Any, FuncType] = {
        fields.Base64: serialize_base64,
    }


class _PrismaModel(BaseModel):
    Config = _Config

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class Baseannonceur(_PrismaModel):
    __prisma_model__: ClassVar[Literal['annonceur']] = 'annonceur'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.annonceurActions[_PrismaModelT]':
        from .client import get_client

        return actions.annonceurActions[_PrismaModelT](get_client(), cls)


class Basecategorie(_PrismaModel):
    __prisma_model__: ClassVar[Literal['categorie']] = 'categorie'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.categorieActions[_PrismaModelT]':
        from .client import get_client

        return actions.categorieActions[_PrismaModelT](get_client(), cls)


class Basecategoryclaims(_PrismaModel):
    __prisma_model__: ClassVar[Literal['categoryclaims']] = 'categoryclaims'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.categoryclaimsActions[_PrismaModelT]':
        from .client import get_client

        return actions.categoryclaimsActions[_PrismaModelT](get_client(), cls)


class Basecategoryrecette(_PrismaModel):
    __prisma_model__: ClassVar[Literal['categoryrecette']] = 'categoryrecette'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.categoryrecetteActions[_PrismaModelT]':
        from .client import get_client

        return actions.categoryrecetteActions[_PrismaModelT](get_client(), cls)


class Basecategorysensors(_PrismaModel):
    __prisma_model__: ClassVar[Literal['categorysensors']] = 'categorysensors'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.categorysensorsActions[_PrismaModelT]':
        from .client import get_client

        return actions.categorysensorsActions[_PrismaModelT](get_client(), cls)


class Basecommande(_PrismaModel):
    __prisma_model__: ClassVar[Literal['commande']] = 'commande'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.commandeActions[_PrismaModelT]':
        from .client import get_client

        return actions.commandeActions[_PrismaModelT](get_client(), cls)


class Basedistributeur(_PrismaModel):
    __prisma_model__: ClassVar[Literal['distributeur']] = 'distributeur'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.distributeurActions[_PrismaModelT]':
        from .client import get_client

        return actions.distributeurActions[_PrismaModelT](get_client(), cls)


class BasedistributeurRecette(_PrismaModel):
    __prisma_model__: ClassVar[Literal['distributeurRecette']] = 'distributeurRecette'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.distributeurRecetteActions[_PrismaModelT]':
        from .client import get_client

        return actions.distributeurRecetteActions[_PrismaModelT](get_client(), cls)


class Baseentrepise(_PrismaModel):
    __prisma_model__: ClassVar[Literal['entrepise']] = 'entrepise'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.entrepiseActions[_PrismaModelT]':
        from .client import get_client

        return actions.entrepiseActions[_PrismaModelT](get_client(), cls)


class Basefacture(_PrismaModel):
    __prisma_model__: ClassVar[Literal['facture']] = 'facture'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.factureActions[_PrismaModelT]':
        from .client import get_client

        return actions.factureActions[_PrismaModelT](get_client(), cls)


class Baseinfopaiment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['infopaiment']] = 'infopaiment'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.infopaimentActions[_PrismaModelT]':
        from .client import get_client

        return actions.infopaimentActions[_PrismaModelT](get_client(), cls)


class Baseingredient(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ingredient']] = 'ingredient'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.ingredientActions[_PrismaModelT]':
        from .client import get_client

        return actions.ingredientActions[_PrismaModelT](get_client(), cls)


class Basepack(_PrismaModel):
    __prisma_model__: ClassVar[Literal['pack']] = 'pack'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.packActions[_PrismaModelT]':
        from .client import get_client

        return actions.packActions[_PrismaModelT](get_client(), cls)


class Basepublicite(_PrismaModel):
    __prisma_model__: ClassVar[Literal['publicite']] = 'publicite'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.publiciteActions[_PrismaModelT]':
        from .client import get_client

        return actions.publiciteActions[_PrismaModelT](get_client(), cls)


class Baserecette(_PrismaModel):
    __prisma_model__: ClassVar[Literal['recette']] = 'recette'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.recetteActions[_PrismaModelT]':
        from .client import get_client

        return actions.recetteActions[_PrismaModelT](get_client(), cls)


class Baserecetteingr(_PrismaModel):
    __prisma_model__: ClassVar[Literal['recetteingr']] = 'recetteingr'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.recetteingrActions[_PrismaModelT]':
        from .client import get_client

        return actions.recetteingrActions[_PrismaModelT](get_client(), cls)


class Basereclamation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['reclamation']] = 'reclamation'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.reclamationActions[_PrismaModelT]':
        from .client import get_client

        return actions.reclamationActions[_PrismaModelT](get_client(), cls)


class Baserole(_PrismaModel):
    __prisma_model__: ClassVar[Literal['role']] = 'role'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.roleActions[_PrismaModelT]':
        from .client import get_client

        return actions.roleActions[_PrismaModelT](get_client(), cls)


class Basesensors(_PrismaModel):
    __prisma_model__: ClassVar[Literal['sensors']] = 'sensors'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.sensorsActions[_PrismaModelT]':
        from .client import get_client

        return actions.sensorsActions[_PrismaModelT](get_client(), cls)


class Basetask(_PrismaModel):
    __prisma_model__: ClassVar[Literal['task']] = 'task'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.taskActions[_PrismaModelT]':
        from .client import get_client

        return actions.taskActions[_PrismaModelT](get_client(), cls)


class Basetokens(_PrismaModel):
    __prisma_model__: ClassVar[Literal['tokens']] = 'tokens'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.tokensActions[_PrismaModelT]':
        from .client import get_client

        return actions.tokensActions[_PrismaModelT](get_client(), cls)


class Basetypetask(_PrismaModel):
    __prisma_model__: ClassVar[Literal['typetask']] = 'typetask'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.typetaskActions[_PrismaModelT]':
        from .client import get_client

        return actions.typetaskActions[_PrismaModelT](get_client(), cls)


class Baseusers(_PrismaModel):
    __prisma_model__: ClassVar[Literal['users']] = 'users'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.usersActions[_PrismaModelT]':
        from .client import get_client

        return actions.usersActions[_PrismaModelT](get_client(), cls)


