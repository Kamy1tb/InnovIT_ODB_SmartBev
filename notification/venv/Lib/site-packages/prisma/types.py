# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# annonceur types

class annonceurOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the annonceur create method"""
    id: _int
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    idCreatedpar: Optional[_int]


class annonceurCreateInput(annonceurOptionalCreateInput):
    """Required arguments to the annonceur create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class annonceurOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the annonceur create method, without relations"""
    id: _int
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    idCreatedpar: Optional[_int]


class annonceurCreateWithoutRelationsInput(annonceurOptionalCreateWithoutRelationsInput):
    """Required arguments to the annonceur create method, without relations"""


class annonceurCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'annonceurCreateWithoutRelationsInput'
    connect: 'annonceurWhereUniqueInput'


class annonceurCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['annonceurCreateWithoutRelationsInput', List['annonceurCreateWithoutRelationsInput']]
    connect: Union['annonceurWhereUniqueInput', List['annonceurWhereUniqueInput']]


_annonceurWhereUnique_id_Input = TypedDict(
    '_annonceurWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

annonceurWhereUniqueInput = _annonceurWhereUnique_id_Input


class annonceurUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    idCreatedpar: Optional[Union[AtomicIntInput, _int]]


class annonceurUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    idCreatedpar: Optional[Union[AtomicIntInput, _int]]


class annonceurUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['annonceurCreateWithoutRelationsInput']
    connect: List['annonceurWhereUniqueInput']
    set: List['annonceurWhereUniqueInput']
    disconnect: List['annonceurWhereUniqueInput']
    delete: List['annonceurWhereUniqueInput']

    # TODO
    # update: List['annonceurUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['annonceurUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['annonceurScalarWhereInput']
    # upsert: List['annonceurUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['annonceurCreateOrConnectWithoutRelationsInput']


class annonceurUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'annonceurCreateWithoutRelationsInput'
    connect: 'annonceurWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'annonceurUpdateInput'
    # upsert: 'annonceurUpsertWithoutRelationsInput'
    # connectOrCreate: 'annonceurCreateOrConnectWithoutRelationsInput'


class annonceurUpsertInput(TypedDict):
    create: 'annonceurCreateInput'
    update: 'annonceurUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_annonceur_id_OrderByInput = TypedDict(
    '_annonceur_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_annonceur_nom_OrderByInput = TypedDict(
    '_annonceur_nom_OrderByInput',
    {
        'nom': 'SortOrder',
    },
    total=True
)

_annonceur_prenom_OrderByInput = TypedDict(
    '_annonceur_prenom_OrderByInput',
    {
        'prenom': 'SortOrder',
    },
    total=True
)

_annonceur_mail_OrderByInput = TypedDict(
    '_annonceur_mail_OrderByInput',
    {
        'mail': 'SortOrder',
    },
    total=True
)

_annonceur_tel_OrderByInput = TypedDict(
    '_annonceur_tel_OrderByInput',
    {
        'tel': 'SortOrder',
    },
    total=True
)

_annonceur_idCreatedpar_OrderByInput = TypedDict(
    '_annonceur_idCreatedpar_OrderByInput',
    {
        'idCreatedpar': 'SortOrder',
    },
    total=True
)

annonceurOrderByInput = Union[
    '_annonceur_id_OrderByInput',
    '_annonceur_nom_OrderByInput',
    '_annonceur_prenom_OrderByInput',
    '_annonceur_mail_OrderByInput',
    '_annonceur_tel_OrderByInput',
    '_annonceur_idCreatedpar_OrderByInput',
]



# recursive annonceur types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

annonceurRelationFilter = TypedDict(
    'annonceurRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class annonceurListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class annonceurInclude(TypedDict, total=False):
    """annonceur relational arguments"""


    

class annonceurIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""


class annonceurIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""


class annonceurIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""


class annonceurIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""


class annonceurIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class annonceurArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyannonceurArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""


class categorieIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""


class categorieIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""


class categorieIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""


class categorieIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class categorieArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManycategorieArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromannonceurRecursive1']


class categoryclaimsIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromannonceurRecursive2']


class categoryclaimsIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromannonceurRecursive3']


class categoryclaimsIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromannonceurRecursive4']


class categoryclaimsIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class categoryclaimsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManycategoryclaimsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromannonceurRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromannonceurRecursive1']


class categoryrecetteIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromannonceurRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromannonceurRecursive2']


class categoryrecetteIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromannonceurRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromannonceurRecursive3']


class categoryrecetteIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromannonceurRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromannonceurRecursive4']


class categoryrecetteIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class categoryrecetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManycategoryrecetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive1']


class categorysensorsIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive2']


class categorysensorsIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive3']


class categorysensorsIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive4']


class categorysensorsIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class categorysensorsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManycategorysensorsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive1']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive1']


class commandeIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive2']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive2']


class commandeIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive3']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive3']


class commandeIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive4']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive4']


class commandeIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class commandeArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManycommandeArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive1']
    pack: Union[bool, 'packArgsFromannonceurRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive1']


class distributeurIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive2']
    pack: Union[bool, 'packArgsFromannonceurRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive2']


class distributeurIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive3']
    pack: Union[bool, 'packArgsFromannonceurRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive3']


class distributeurIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive4']
    pack: Union[bool, 'packArgsFromannonceurRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromannonceurRecursive4']


class distributeurIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class distributeurArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManydistributeurArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive1']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive1']


class distributeurRecetteIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive2']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive2']


class distributeurRecetteIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive3']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive3']


class distributeurRecetteIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive4']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive4']


class distributeurRecetteIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class distributeurRecetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManydistributeurRecetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    pack: Union[bool, 'FindManypackArgsFromannonceurRecursive1']
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive1']
    users: Union[bool, 'FindManyusersArgsFromannonceurRecursive1']


class entrepiseIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    pack: Union[bool, 'FindManypackArgsFromannonceurRecursive2']
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive2']
    users: Union[bool, 'FindManyusersArgsFromannonceurRecursive2']


class entrepiseIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    pack: Union[bool, 'FindManypackArgsFromannonceurRecursive3']
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive3']
    users: Union[bool, 'FindManyusersArgsFromannonceurRecursive3']


class entrepiseIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    pack: Union[bool, 'FindManypackArgsFromannonceurRecursive4']
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive4']
    users: Union[bool, 'FindManyusersArgsFromannonceurRecursive4']


class entrepiseIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class entrepiseArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyentrepiseArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'commandeArgsFromannonceurRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromannonceurRecursive1']


class factureIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'commandeArgsFromannonceurRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromannonceurRecursive2']


class factureIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'commandeArgsFromannonceurRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromannonceurRecursive3']


class factureIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'commandeArgsFromannonceurRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromannonceurRecursive4']


class factureIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class factureArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyfactureArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive1']


class infopaimentIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive2']


class infopaimentIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive3']


class infopaimentIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    facture: Union[bool, 'FindManyfactureArgsFromannonceurRecursive4']


class infopaimentIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class infopaimentArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyinfopaimentArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive1']


class ingredientIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive2']


class ingredientIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive3']


class ingredientIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive4']


class ingredientIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class ingredientArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyingredientArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive1']


class packIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive2']


class packIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive3']


class packIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive4']


class packIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class packArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManypackArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive1']


class publiciteIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive2']


class publiciteIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive3']


class publiciteIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive4']


class publiciteIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class publiciteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManypubliciteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive1']


class recetteIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive2']


class recetteIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive3']


class recetteIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    commande: Union[bool, 'FindManycommandeArgsFromannonceurRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromannonceurRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromannonceurRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromannonceurRecursive4']


class recetteIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class recetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyrecetteArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive1']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive1']


class recetteingrIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive2']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive2']


class recetteingrIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive3']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive3']


class recetteingrIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    ingredient: Union[bool, 'ingredientArgsFromannonceurRecursive4']
    recette: Union[bool, 'recetteArgsFromannonceurRecursive4']


class recetteingrIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class recetteingrArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyrecetteingrArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromannonceurRecursive1']


class reclamationIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromannonceurRecursive2']


class reclamationIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromannonceurRecursive3']


class reclamationIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromannonceurRecursive4']


class reclamationIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class reclamationArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyreclamationArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""


class roleIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""


class roleIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""


class roleIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""


class roleIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class roleArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyroleArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromannonceurRecursive1']


class sensorsIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromannonceurRecursive2']


class sensorsIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromannonceurRecursive3']


class sensorsIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    distributeur: Union[bool, 'distributeurArgsFromannonceurRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromannonceurRecursive4']


class sensorsIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class sensorsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManysensorsArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive1']
    typetask: Union[bool, 'typetaskArgsFromannonceurRecursive1']
    users: Union[bool, 'usersArgsFromannonceurRecursive1']


class taskIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive2']
    typetask: Union[bool, 'typetaskArgsFromannonceurRecursive2']
    users: Union[bool, 'usersArgsFromannonceurRecursive2']


class taskIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive3']
    typetask: Union[bool, 'typetaskArgsFromannonceurRecursive3']
    users: Union[bool, 'usersArgsFromannonceurRecursive3']


class taskIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive4']
    typetask: Union[bool, 'typetaskArgsFromannonceurRecursive4']
    users: Union[bool, 'usersArgsFromannonceurRecursive4']


class taskIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class taskArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManytaskArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    users: Union[bool, 'usersArgsFromannonceurRecursive1']


class tokensIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    users: Union[bool, 'usersArgsFromannonceurRecursive2']


class tokensIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    users: Union[bool, 'usersArgsFromannonceurRecursive3']


class tokensIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    users: Union[bool, 'usersArgsFromannonceurRecursive4']


class tokensIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class tokensArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManytokensArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive1']


class typetaskIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive2']


class typetaskIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive3']


class typetaskIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive4']


class typetaskIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class typetaskArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManytypetaskArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromannonceur(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive1']
    tokens: Union[bool, 'tokensArgsFromannonceurRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive1']


class usersIncludeFromannonceurRecursive1(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive2']
    tokens: Union[bool, 'tokensArgsFromannonceurRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive2']


class usersIncludeFromannonceurRecursive2(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive3']
    tokens: Union[bool, 'tokensArgsFromannonceurRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive3']


class usersIncludeFromannonceurRecursive3(TypedDict, total=False):
    """Relational arguments for annonceur"""
    task: Union[bool, 'FindManytaskArgsFromannonceurRecursive4']
    tokens: Union[bool, 'tokensArgsFromannonceurRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromannonceurRecursive4']


class usersIncludeFromannonceurRecursive4(TypedDict, total=False):
    """Relational arguments for annonceur"""

    

class usersArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    
    

class FindManyusersArgsFromannonceur(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromannonceurRecursive1(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromannonceurRecursive2(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromannonceurRecursive3(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromannonceurRecursive4(TypedDict, total=False):
    """Arguments for annonceur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyannonceurArgs = FindManyannonceurArgsFromannonceur
FindFirstannonceurArgs = FindManyannonceurArgsFromannonceur


    

class annonceurWhereInput(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['annonceurWhereInputRecursive1', List['annonceurWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['annonceurWhereInputRecursive1']
    OR: List['annonceurWhereInputRecursive1']
    NOT: List['annonceurWhereInputRecursive1']


class annonceurWhereInputRecursive1(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['annonceurWhereInputRecursive2', List['annonceurWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['annonceurWhereInputRecursive2']
    OR: List['annonceurWhereInputRecursive2']
    NOT: List['annonceurWhereInputRecursive2']


class annonceurWhereInputRecursive2(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['annonceurWhereInputRecursive3', List['annonceurWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['annonceurWhereInputRecursive3']
    OR: List['annonceurWhereInputRecursive3']
    NOT: List['annonceurWhereInputRecursive3']


class annonceurWhereInputRecursive3(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['annonceurWhereInputRecursive4', List['annonceurWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['annonceurWhereInputRecursive4']
    OR: List['annonceurWhereInputRecursive4']
    NOT: List['annonceurWhereInputRecursive4']


class annonceurWhereInputRecursive4(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']



# aggregate annonceur types


    

class annonceurScalarWhereWithAggregatesInput(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['annonceurScalarWhereWithAggregatesInputRecursive1']
    OR: List['annonceurScalarWhereWithAggregatesInputRecursive1']
    NOT: List['annonceurScalarWhereWithAggregatesInputRecursive1']


class annonceurScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['annonceurScalarWhereWithAggregatesInputRecursive2']
    OR: List['annonceurScalarWhereWithAggregatesInputRecursive2']
    NOT: List['annonceurScalarWhereWithAggregatesInputRecursive2']


class annonceurScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['annonceurScalarWhereWithAggregatesInputRecursive3']
    OR: List['annonceurScalarWhereWithAggregatesInputRecursive3']
    NOT: List['annonceurScalarWhereWithAggregatesInputRecursive3']


class annonceurScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['annonceurScalarWhereWithAggregatesInputRecursive4']
    OR: List['annonceurScalarWhereWithAggregatesInputRecursive4']
    NOT: List['annonceurScalarWhereWithAggregatesInputRecursive4']


class annonceurScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """annonceur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']



class annonceurGroupByOutput(TypedDict, total=False):
    id: _int
    nom: _str
    prenom: _str
    mail: _str
    tel: _str
    idCreatedpar: _int
    _sum: 'annonceurSumAggregateOutput'
    _avg: 'annonceurAvgAggregateOutput'
    _min: 'annonceurMinAggregateOutput'
    _max: 'annonceurMaxAggregateOutput'
    _count: 'annonceurCountAggregateOutput'


class annonceurAvgAggregateOutput(TypedDict, total=False):
    """annonceur output for aggregating averages"""
    id: float
    idCreatedpar: float


class annonceurSumAggregateOutput(TypedDict, total=False):
    """annonceur output for aggregating sums"""
    id: _int
    idCreatedpar: _int


class annonceurScalarAggregateOutput(TypedDict, total=False):
    """annonceur output including scalar fields"""
    id: _int
    nom: _str
    prenom: _str
    mail: _str
    tel: _str
    idCreatedpar: _int


annonceurMinAggregateOutput = annonceurScalarAggregateOutput
annonceurMaxAggregateOutput = annonceurScalarAggregateOutput


class annonceurMaxAggregateInput(TypedDict, total=False):
    """annonceur input for aggregating by max"""
    id: bool
    nom: bool
    prenom: bool
    mail: bool
    tel: bool
    idCreatedpar: bool


class annonceurMinAggregateInput(TypedDict, total=False):
    """annonceur input for aggregating by min"""
    id: bool
    nom: bool
    prenom: bool
    mail: bool
    tel: bool
    idCreatedpar: bool


class annonceurNumberAggregateInput(TypedDict, total=False):
    """annonceur input for aggregating numbers"""
    id: bool
    idCreatedpar: bool


annonceurAvgAggregateInput = annonceurNumberAggregateInput
annonceurSumAggregateInput = annonceurNumberAggregateInput


annonceurCountAggregateInput = TypedDict(
    'annonceurCountAggregateInput',
    {
        'id': bool,
        'nom': bool,
        'prenom': bool,
        'mail': bool,
        'tel': bool,
        'idCreatedpar': bool,
        '_all': bool,
    },
    total=False,
)

annonceurCountAggregateOutput = TypedDict(
    'annonceurCountAggregateOutput',
    {
        'id': int,
        'nom': int,
        'prenom': int,
        'mail': int,
        'tel': int,
        'idCreatedpar': int,
        '_all': int,
    },
    total=False,
)


annonceurKeys = Literal[
    'id',
    'nom',
    'prenom',
    'mail',
    'tel',
    'idCreatedpar',
]
annonceurScalarFieldKeys = Literal[
    'id',
    'nom',
    'prenom',
    'mail',
    'tel',
    'idCreatedpar',
]
annonceurScalarFieldKeysT = TypeVar('annonceurScalarFieldKeysT', bound=annonceurScalarFieldKeys)

annonceurRelationalFieldKeys = _NoneType

# categorie types

class categorieOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the categorie create method"""
    id: _int
    categorie: Optional[_str]


class categorieCreateInput(categorieOptionalCreateInput):
    """Required arguments to the categorie create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categorieOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the categorie create method, without relations"""
    id: _int
    categorie: Optional[_str]


class categorieCreateWithoutRelationsInput(categorieOptionalCreateWithoutRelationsInput):
    """Required arguments to the categorie create method, without relations"""


class categorieCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categorieCreateWithoutRelationsInput'
    connect: 'categorieWhereUniqueInput'


class categorieCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categorieCreateWithoutRelationsInput', List['categorieCreateWithoutRelationsInput']]
    connect: Union['categorieWhereUniqueInput', List['categorieWhereUniqueInput']]


_categorieWhereUnique_id_Input = TypedDict(
    '_categorieWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

categorieWhereUniqueInput = _categorieWhereUnique_id_Input


class categorieUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    categorie: Optional[_str]


class categorieUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    categorie: Optional[_str]


class categorieUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categorieCreateWithoutRelationsInput']
    connect: List['categorieWhereUniqueInput']
    set: List['categorieWhereUniqueInput']
    disconnect: List['categorieWhereUniqueInput']
    delete: List['categorieWhereUniqueInput']

    # TODO
    # update: List['categorieUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categorieUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categorieScalarWhereInput']
    # upsert: List['categorieUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['categorieCreateOrConnectWithoutRelationsInput']


class categorieUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categorieCreateWithoutRelationsInput'
    connect: 'categorieWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categorieUpdateInput'
    # upsert: 'categorieUpsertWithoutRelationsInput'
    # connectOrCreate: 'categorieCreateOrConnectWithoutRelationsInput'


class categorieUpsertInput(TypedDict):
    create: 'categorieCreateInput'
    update: 'categorieUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_categorie_id_OrderByInput = TypedDict(
    '_categorie_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_categorie_categorie_OrderByInput = TypedDict(
    '_categorie_categorie_OrderByInput',
    {
        'categorie': 'SortOrder',
    },
    total=True
)

categorieOrderByInput = Union[
    '_categorie_id_OrderByInput',
    '_categorie_categorie_OrderByInput',
]



# recursive categorie types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categorieRelationFilter = TypedDict(
    'categorieRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categorieListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categorieInclude(TypedDict, total=False):
    """categorie relational arguments"""


    

class annonceurIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""


class annonceurIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""


class annonceurIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""


class annonceurIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""


class annonceurIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class annonceurArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyannonceurArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""


class categorieIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""


class categorieIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""


class categorieIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""


class categorieIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class categorieArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManycategorieArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorieRecursive1']


class categoryclaimsIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorieRecursive2']


class categoryclaimsIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorieRecursive3']


class categoryclaimsIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorieRecursive4']


class categoryclaimsIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class categoryclaimsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManycategoryclaimsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorieRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorieRecursive1']


class categoryrecetteIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorieRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorieRecursive2']


class categoryrecetteIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorieRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorieRecursive3']


class categoryrecetteIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorieRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorieRecursive4']


class categoryrecetteIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class categoryrecetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManycategoryrecetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive1']


class categorysensorsIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive2']


class categorysensorsIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive3']


class categorysensorsIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive4']


class categorysensorsIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class categorysensorsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManycategorysensorsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive1']


class commandeIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive2']


class commandeIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive3']


class commandeIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive4']


class commandeIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class commandeArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManycommandeArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive1']
    pack: Union[bool, 'packArgsFromcategorieRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive1']


class distributeurIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive2']
    pack: Union[bool, 'packArgsFromcategorieRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive2']


class distributeurIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive3']
    pack: Union[bool, 'packArgsFromcategorieRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive3']


class distributeurIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive4']
    pack: Union[bool, 'packArgsFromcategorieRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorieRecursive4']


class distributeurIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class distributeurArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManydistributeurArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive1']


class distributeurRecetteIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive2']


class distributeurRecetteIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive3']


class distributeurRecetteIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive4']


class distributeurRecetteIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class distributeurRecetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManydistributeurRecetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    pack: Union[bool, 'FindManypackArgsFromcategorieRecursive1']
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive1']
    users: Union[bool, 'FindManyusersArgsFromcategorieRecursive1']


class entrepiseIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    pack: Union[bool, 'FindManypackArgsFromcategorieRecursive2']
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive2']
    users: Union[bool, 'FindManyusersArgsFromcategorieRecursive2']


class entrepiseIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    pack: Union[bool, 'FindManypackArgsFromcategorieRecursive3']
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive3']
    users: Union[bool, 'FindManyusersArgsFromcategorieRecursive3']


class entrepiseIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    pack: Union[bool, 'FindManypackArgsFromcategorieRecursive4']
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive4']
    users: Union[bool, 'FindManyusersArgsFromcategorieRecursive4']


class entrepiseIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class entrepiseArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyentrepiseArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'commandeArgsFromcategorieRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorieRecursive1']


class factureIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'commandeArgsFromcategorieRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorieRecursive2']


class factureIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'commandeArgsFromcategorieRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorieRecursive3']


class factureIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'commandeArgsFromcategorieRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorieRecursive4']


class factureIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class factureArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyfactureArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive1']


class infopaimentIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive2']


class infopaimentIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive3']


class infopaimentIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorieRecursive4']


class infopaimentIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class infopaimentArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyinfopaimentArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive1']


class ingredientIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive2']


class ingredientIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive3']


class ingredientIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive4']


class ingredientIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class ingredientArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyingredientArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive1']


class packIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive2']


class packIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive3']


class packIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive4']


class packIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class packArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManypackArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive1']


class publiciteIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive2']


class publiciteIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive3']


class publiciteIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive4']


class publiciteIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class publiciteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManypubliciteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive1']


class recetteIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive2']


class recetteIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive3']


class recetteIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorieRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorieRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorieRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorieRecursive4']


class recetteIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class recetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyrecetteArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive1']


class recetteingrIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive2']


class recetteingrIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive3']


class recetteingrIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    ingredient: Union[bool, 'ingredientArgsFromcategorieRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorieRecursive4']


class recetteingrIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class recetteingrArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyrecetteingrArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorieRecursive1']


class reclamationIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorieRecursive2']


class reclamationIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorieRecursive3']


class reclamationIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorieRecursive4']


class reclamationIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class reclamationArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyreclamationArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""


class roleIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""


class roleIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""


class roleIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""


class roleIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class roleArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyroleArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorieRecursive1']


class sensorsIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorieRecursive2']


class sensorsIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorieRecursive3']


class sensorsIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    distributeur: Union[bool, 'distributeurArgsFromcategorieRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorieRecursive4']


class sensorsIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class sensorsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManysensorsArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive1']
    typetask: Union[bool, 'typetaskArgsFromcategorieRecursive1']
    users: Union[bool, 'usersArgsFromcategorieRecursive1']


class taskIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive2']
    typetask: Union[bool, 'typetaskArgsFromcategorieRecursive2']
    users: Union[bool, 'usersArgsFromcategorieRecursive2']


class taskIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive3']
    typetask: Union[bool, 'typetaskArgsFromcategorieRecursive3']
    users: Union[bool, 'usersArgsFromcategorieRecursive3']


class taskIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive4']
    typetask: Union[bool, 'typetaskArgsFromcategorieRecursive4']
    users: Union[bool, 'usersArgsFromcategorieRecursive4']


class taskIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class taskArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManytaskArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    users: Union[bool, 'usersArgsFromcategorieRecursive1']


class tokensIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    users: Union[bool, 'usersArgsFromcategorieRecursive2']


class tokensIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    users: Union[bool, 'usersArgsFromcategorieRecursive3']


class tokensIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    users: Union[bool, 'usersArgsFromcategorieRecursive4']


class tokensIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class tokensArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManytokensArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive1']


class typetaskIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive2']


class typetaskIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive3']


class typetaskIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive4']


class typetaskIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class typetaskArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManytypetaskArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromcategorie(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive1']
    tokens: Union[bool, 'tokensArgsFromcategorieRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive1']


class usersIncludeFromcategorieRecursive1(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive2']
    tokens: Union[bool, 'tokensArgsFromcategorieRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive2']


class usersIncludeFromcategorieRecursive2(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive3']
    tokens: Union[bool, 'tokensArgsFromcategorieRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive3']


class usersIncludeFromcategorieRecursive3(TypedDict, total=False):
    """Relational arguments for categorie"""
    task: Union[bool, 'FindManytaskArgsFromcategorieRecursive4']
    tokens: Union[bool, 'tokensArgsFromcategorieRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategorieRecursive4']


class usersIncludeFromcategorieRecursive4(TypedDict, total=False):
    """Relational arguments for categorie"""

    

class usersArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    
    

class FindManyusersArgsFromcategorie(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcategorieRecursive1(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcategorieRecursive2(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcategorieRecursive3(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcategorieRecursive4(TypedDict, total=False):
    """Arguments for categorie"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManycategorieArgs = FindManycategorieArgsFromcategorie
FindFirstcategorieArgs = FindManycategorieArgsFromcategorie


    

class categorieWhereInput(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    categorie: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['categorieWhereInputRecursive1', List['categorieWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categorieWhereInputRecursive1']
    OR: List['categorieWhereInputRecursive1']
    NOT: List['categorieWhereInputRecursive1']


class categorieWhereInputRecursive1(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    categorie: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['categorieWhereInputRecursive2', List['categorieWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categorieWhereInputRecursive2']
    OR: List['categorieWhereInputRecursive2']
    NOT: List['categorieWhereInputRecursive2']


class categorieWhereInputRecursive2(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    categorie: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['categorieWhereInputRecursive3', List['categorieWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categorieWhereInputRecursive3']
    OR: List['categorieWhereInputRecursive3']
    NOT: List['categorieWhereInputRecursive3']


class categorieWhereInputRecursive3(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    categorie: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['categorieWhereInputRecursive4', List['categorieWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categorieWhereInputRecursive4']
    OR: List['categorieWhereInputRecursive4']
    NOT: List['categorieWhereInputRecursive4']


class categorieWhereInputRecursive4(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    categorie: Union[None, _str, 'types.StringFilter']



# aggregate categorie types


    

class categorieScalarWhereWithAggregatesInput(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    categorie: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categorieScalarWhereWithAggregatesInputRecursive1']
    OR: List['categorieScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categorieScalarWhereWithAggregatesInputRecursive1']


class categorieScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    categorie: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categorieScalarWhereWithAggregatesInputRecursive2']
    OR: List['categorieScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categorieScalarWhereWithAggregatesInputRecursive2']


class categorieScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    categorie: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categorieScalarWhereWithAggregatesInputRecursive3']
    OR: List['categorieScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categorieScalarWhereWithAggregatesInputRecursive3']


class categorieScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    categorie: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categorieScalarWhereWithAggregatesInputRecursive4']
    OR: List['categorieScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categorieScalarWhereWithAggregatesInputRecursive4']


class categorieScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """categorie arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    categorie: Union[_str, 'types.StringWithAggregatesFilter']



class categorieGroupByOutput(TypedDict, total=False):
    id: _int
    categorie: _str
    _sum: 'categorieSumAggregateOutput'
    _avg: 'categorieAvgAggregateOutput'
    _min: 'categorieMinAggregateOutput'
    _max: 'categorieMaxAggregateOutput'
    _count: 'categorieCountAggregateOutput'


class categorieAvgAggregateOutput(TypedDict, total=False):
    """categorie output for aggregating averages"""
    id: float


class categorieSumAggregateOutput(TypedDict, total=False):
    """categorie output for aggregating sums"""
    id: _int


class categorieScalarAggregateOutput(TypedDict, total=False):
    """categorie output including scalar fields"""
    id: _int
    categorie: _str


categorieMinAggregateOutput = categorieScalarAggregateOutput
categorieMaxAggregateOutput = categorieScalarAggregateOutput


class categorieMaxAggregateInput(TypedDict, total=False):
    """categorie input for aggregating by max"""
    id: bool
    categorie: bool


class categorieMinAggregateInput(TypedDict, total=False):
    """categorie input for aggregating by min"""
    id: bool
    categorie: bool


class categorieNumberAggregateInput(TypedDict, total=False):
    """categorie input for aggregating numbers"""
    id: bool


categorieAvgAggregateInput = categorieNumberAggregateInput
categorieSumAggregateInput = categorieNumberAggregateInput


categorieCountAggregateInput = TypedDict(
    'categorieCountAggregateInput',
    {
        'id': bool,
        'categorie': bool,
        '_all': bool,
    },
    total=False,
)

categorieCountAggregateOutput = TypedDict(
    'categorieCountAggregateOutput',
    {
        'id': int,
        'categorie': int,
        '_all': int,
    },
    total=False,
)


categorieKeys = Literal[
    'id',
    'categorie',
]
categorieScalarFieldKeys = Literal[
    'id',
    'categorie',
]
categorieScalarFieldKeysT = TypeVar('categorieScalarFieldKeysT', bound=categorieScalarFieldKeys)

categorieRelationalFieldKeys = _NoneType

# categoryclaims types

class categoryclaimsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the categoryclaims create method"""
    id: _int
    claim: Optional[_str]
    reclamation: 'reclamationCreateManyNestedWithoutRelationsInput'


class categoryclaimsCreateInput(categoryclaimsOptionalCreateInput):
    """Required arguments to the categoryclaims create method"""
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categoryclaimsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the categoryclaims create method, without relations"""
    id: _int
    claim: Optional[_str]


class categoryclaimsCreateWithoutRelationsInput(categoryclaimsOptionalCreateWithoutRelationsInput):
    """Required arguments to the categoryclaims create method, without relations"""
    message: _str


class categoryclaimsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryclaimsCreateWithoutRelationsInput'
    connect: 'categoryclaimsWhereUniqueInput'


class categoryclaimsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categoryclaimsCreateWithoutRelationsInput', List['categoryclaimsCreateWithoutRelationsInput']]
    connect: Union['categoryclaimsWhereUniqueInput', List['categoryclaimsWhereUniqueInput']]


_categoryclaimsWhereUnique_id_Input = TypedDict(
    '_categoryclaimsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

categoryclaimsWhereUniqueInput = _categoryclaimsWhereUnique_id_Input


class categoryclaimsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    claim: Optional[_str]
    message: _str
    reclamation: 'reclamationUpdateManyWithoutRelationsInput'


class categoryclaimsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    claim: Optional[_str]
    message: _str


class categoryclaimsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categoryclaimsCreateWithoutRelationsInput']
    connect: List['categoryclaimsWhereUniqueInput']
    set: List['categoryclaimsWhereUniqueInput']
    disconnect: List['categoryclaimsWhereUniqueInput']
    delete: List['categoryclaimsWhereUniqueInput']

    # TODO
    # update: List['categoryclaimsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categoryclaimsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categoryclaimsScalarWhereInput']
    # upsert: List['categoryclaimsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['categoryclaimsCreateOrConnectWithoutRelationsInput']


class categoryclaimsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryclaimsCreateWithoutRelationsInput'
    connect: 'categoryclaimsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categoryclaimsUpdateInput'
    # upsert: 'categoryclaimsUpsertWithoutRelationsInput'
    # connectOrCreate: 'categoryclaimsCreateOrConnectWithoutRelationsInput'


class categoryclaimsUpsertInput(TypedDict):
    create: 'categoryclaimsCreateInput'
    update: 'categoryclaimsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_categoryclaims_id_OrderByInput = TypedDict(
    '_categoryclaims_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_categoryclaims_claim_OrderByInput = TypedDict(
    '_categoryclaims_claim_OrderByInput',
    {
        'claim': 'SortOrder',
    },
    total=True
)

_categoryclaims_message_OrderByInput = TypedDict(
    '_categoryclaims_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

categoryclaimsOrderByInput = Union[
    '_categoryclaims_id_OrderByInput',
    '_categoryclaims_claim_OrderByInput',
    '_categoryclaims_message_OrderByInput',
]



# recursive categoryclaims types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categoryclaimsRelationFilter = TypedDict(
    'categoryclaimsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categoryclaimsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categoryclaimsInclude(TypedDict, total=False):
    """categoryclaims relational arguments"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryclaims']


    

class annonceurIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class annonceurIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class annonceurIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class annonceurIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class annonceurIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class annonceurArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyannonceurArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class categorieIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class categorieIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class categorieIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class categorieIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class categorieArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManycategorieArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryclaimsRecursive1']


class categoryclaimsIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryclaimsRecursive2']


class categoryclaimsIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryclaimsRecursive3']


class categoryclaimsIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryclaimsRecursive4']


class categoryclaimsIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class categoryclaimsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManycategoryclaimsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryclaimsRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryclaimsRecursive1']


class categoryrecetteIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryclaimsRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryclaimsRecursive2']


class categoryrecetteIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryclaimsRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryclaimsRecursive3']


class categoryrecetteIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryclaimsRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryclaimsRecursive4']


class categoryrecetteIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class categoryrecetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManycategoryrecetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive1']


class categorysensorsIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive2']


class categorysensorsIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive3']


class categorysensorsIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive4']


class categorysensorsIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class categorysensorsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManycategorysensorsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive1']


class commandeIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive2']


class commandeIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive3']


class commandeIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive4']


class commandeIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class commandeArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManycommandeArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive1']
    pack: Union[bool, 'packArgsFromcategoryclaimsRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive1']


class distributeurIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive2']
    pack: Union[bool, 'packArgsFromcategoryclaimsRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive2']


class distributeurIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive3']
    pack: Union[bool, 'packArgsFromcategoryclaimsRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive3']


class distributeurIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive4']
    pack: Union[bool, 'packArgsFromcategoryclaimsRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryclaimsRecursive4']


class distributeurIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class distributeurArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManydistributeurArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive1']


class distributeurRecetteIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive2']


class distributeurRecetteIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive3']


class distributeurRecetteIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive4']


class distributeurRecetteIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class distributeurRecetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManydistributeurRecetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    pack: Union[bool, 'FindManypackArgsFromcategoryclaimsRecursive1']
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive1']
    users: Union[bool, 'FindManyusersArgsFromcategoryclaimsRecursive1']


class entrepiseIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    pack: Union[bool, 'FindManypackArgsFromcategoryclaimsRecursive2']
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive2']
    users: Union[bool, 'FindManyusersArgsFromcategoryclaimsRecursive2']


class entrepiseIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    pack: Union[bool, 'FindManypackArgsFromcategoryclaimsRecursive3']
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive3']
    users: Union[bool, 'FindManyusersArgsFromcategoryclaimsRecursive3']


class entrepiseIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    pack: Union[bool, 'FindManypackArgsFromcategoryclaimsRecursive4']
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive4']
    users: Union[bool, 'FindManyusersArgsFromcategoryclaimsRecursive4']


class entrepiseIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class entrepiseArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyentrepiseArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'commandeArgsFromcategoryclaimsRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryclaimsRecursive1']


class factureIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'commandeArgsFromcategoryclaimsRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryclaimsRecursive2']


class factureIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'commandeArgsFromcategoryclaimsRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryclaimsRecursive3']


class factureIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'commandeArgsFromcategoryclaimsRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryclaimsRecursive4']


class factureIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class factureArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyfactureArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive1']


class infopaimentIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive2']


class infopaimentIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive3']


class infopaimentIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryclaimsRecursive4']


class infopaimentIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class infopaimentArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyinfopaimentArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive1']


class ingredientIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive2']


class ingredientIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive3']


class ingredientIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive4']


class ingredientIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class ingredientArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyingredientArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive1']


class packIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive2']


class packIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive3']


class packIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive4']


class packIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class packArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManypackArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive1']


class publiciteIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive2']


class publiciteIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive3']


class publiciteIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive4']


class publiciteIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class publiciteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManypubliciteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive1']


class recetteIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive2']


class recetteIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive3']


class recetteIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryclaimsRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryclaimsRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryclaimsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryclaimsRecursive4']


class recetteIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class recetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyrecetteArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive1']


class recetteingrIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive2']


class recetteingrIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive3']


class recetteingrIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryclaimsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryclaimsRecursive4']


class recetteingrIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class recetteingrArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyrecetteingrArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryclaimsRecursive1']


class reclamationIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryclaimsRecursive2']


class reclamationIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryclaimsRecursive3']


class reclamationIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryclaimsRecursive4']


class reclamationIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class reclamationArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyreclamationArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class roleIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class roleIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class roleIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""


class roleIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class roleArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyroleArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryclaimsRecursive1']


class sensorsIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryclaimsRecursive2']


class sensorsIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryclaimsRecursive3']


class sensorsIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryclaimsRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryclaimsRecursive4']


class sensorsIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class sensorsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManysensorsArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive1']
    typetask: Union[bool, 'typetaskArgsFromcategoryclaimsRecursive1']
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive1']


class taskIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive2']
    typetask: Union[bool, 'typetaskArgsFromcategoryclaimsRecursive2']
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive2']


class taskIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive3']
    typetask: Union[bool, 'typetaskArgsFromcategoryclaimsRecursive3']
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive3']


class taskIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive4']
    typetask: Union[bool, 'typetaskArgsFromcategoryclaimsRecursive4']
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive4']


class taskIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class taskArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManytaskArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive1']


class tokensIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive2']


class tokensIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive3']


class tokensIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    users: Union[bool, 'usersArgsFromcategoryclaimsRecursive4']


class tokensIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class tokensArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManytokensArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive1']


class typetaskIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive2']


class typetaskIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive3']


class typetaskIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive4']


class typetaskIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class typetaskArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManytypetaskArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromcategoryclaims(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive1']
    tokens: Union[bool, 'tokensArgsFromcategoryclaimsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive1']


class usersIncludeFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive2']
    tokens: Union[bool, 'tokensArgsFromcategoryclaimsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive2']


class usersIncludeFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive3']
    tokens: Union[bool, 'tokensArgsFromcategoryclaimsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive3']


class usersIncludeFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Relational arguments for categoryclaims"""
    task: Union[bool, 'FindManytaskArgsFromcategoryclaimsRecursive4']
    tokens: Union[bool, 'tokensArgsFromcategoryclaimsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryclaimsRecursive4']


class usersIncludeFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Relational arguments for categoryclaims"""

    

class usersArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    
    

class FindManyusersArgsFromcategoryclaims(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcategoryclaimsRecursive1(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcategoryclaimsRecursive2(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcategoryclaimsRecursive3(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcategoryclaimsRecursive4(TypedDict, total=False):
    """Arguments for categoryclaims"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManycategoryclaimsArgs = FindManycategoryclaimsArgsFromcategoryclaims
FindFirstcategoryclaimsArgs = FindManycategoryclaimsArgsFromcategoryclaims


    

class categoryclaimsWhereInput(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    claim: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    reclamation: 'reclamationListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryclaimsWhereInputRecursive1', List['categoryclaimsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categoryclaimsWhereInputRecursive1']
    OR: List['categoryclaimsWhereInputRecursive1']
    NOT: List['categoryclaimsWhereInputRecursive1']


class categoryclaimsWhereInputRecursive1(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    claim: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    reclamation: 'reclamationListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryclaimsWhereInputRecursive2', List['categoryclaimsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categoryclaimsWhereInputRecursive2']
    OR: List['categoryclaimsWhereInputRecursive2']
    NOT: List['categoryclaimsWhereInputRecursive2']


class categoryclaimsWhereInputRecursive2(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    claim: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    reclamation: 'reclamationListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryclaimsWhereInputRecursive3', List['categoryclaimsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categoryclaimsWhereInputRecursive3']
    OR: List['categoryclaimsWhereInputRecursive3']
    NOT: List['categoryclaimsWhereInputRecursive3']


class categoryclaimsWhereInputRecursive3(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    claim: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    reclamation: 'reclamationListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryclaimsWhereInputRecursive4', List['categoryclaimsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categoryclaimsWhereInputRecursive4']
    OR: List['categoryclaimsWhereInputRecursive4']
    NOT: List['categoryclaimsWhereInputRecursive4']


class categoryclaimsWhereInputRecursive4(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    claim: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    reclamation: 'reclamationListRelationFilter'



# aggregate categoryclaims types


    

class categoryclaimsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    claim: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryclaimsScalarWhereWithAggregatesInputRecursive1']
    OR: List['categoryclaimsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categoryclaimsScalarWhereWithAggregatesInputRecursive1']


class categoryclaimsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    claim: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryclaimsScalarWhereWithAggregatesInputRecursive2']
    OR: List['categoryclaimsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categoryclaimsScalarWhereWithAggregatesInputRecursive2']


class categoryclaimsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    claim: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryclaimsScalarWhereWithAggregatesInputRecursive3']
    OR: List['categoryclaimsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categoryclaimsScalarWhereWithAggregatesInputRecursive3']


class categoryclaimsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    claim: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryclaimsScalarWhereWithAggregatesInputRecursive4']
    OR: List['categoryclaimsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categoryclaimsScalarWhereWithAggregatesInputRecursive4']


class categoryclaimsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """categoryclaims arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    claim: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']



class categoryclaimsGroupByOutput(TypedDict, total=False):
    id: _int
    claim: _str
    message: _str
    _sum: 'categoryclaimsSumAggregateOutput'
    _avg: 'categoryclaimsAvgAggregateOutput'
    _min: 'categoryclaimsMinAggregateOutput'
    _max: 'categoryclaimsMaxAggregateOutput'
    _count: 'categoryclaimsCountAggregateOutput'


class categoryclaimsAvgAggregateOutput(TypedDict, total=False):
    """categoryclaims output for aggregating averages"""
    id: float


class categoryclaimsSumAggregateOutput(TypedDict, total=False):
    """categoryclaims output for aggregating sums"""
    id: _int


class categoryclaimsScalarAggregateOutput(TypedDict, total=False):
    """categoryclaims output including scalar fields"""
    id: _int
    claim: _str
    message: _str


categoryclaimsMinAggregateOutput = categoryclaimsScalarAggregateOutput
categoryclaimsMaxAggregateOutput = categoryclaimsScalarAggregateOutput


class categoryclaimsMaxAggregateInput(TypedDict, total=False):
    """categoryclaims input for aggregating by max"""
    id: bool
    claim: bool
    message: bool


class categoryclaimsMinAggregateInput(TypedDict, total=False):
    """categoryclaims input for aggregating by min"""
    id: bool
    claim: bool
    message: bool


class categoryclaimsNumberAggregateInput(TypedDict, total=False):
    """categoryclaims input for aggregating numbers"""
    id: bool


categoryclaimsAvgAggregateInput = categoryclaimsNumberAggregateInput
categoryclaimsSumAggregateInput = categoryclaimsNumberAggregateInput


categoryclaimsCountAggregateInput = TypedDict(
    'categoryclaimsCountAggregateInput',
    {
        'id': bool,
        'claim': bool,
        'message': bool,
        '_all': bool,
    },
    total=False,
)

categoryclaimsCountAggregateOutput = TypedDict(
    'categoryclaimsCountAggregateOutput',
    {
        'id': int,
        'claim': int,
        'message': int,
        '_all': int,
    },
    total=False,
)


categoryclaimsKeys = Literal[
    'id',
    'claim',
    'message',
    'reclamation',
]
categoryclaimsScalarFieldKeys = Literal[
    'id',
    'claim',
    'message',
]
categoryclaimsScalarFieldKeysT = TypeVar('categoryclaimsScalarFieldKeysT', bound=categoryclaimsScalarFieldKeys)

categoryclaimsRelationalFieldKeys = Literal[
        'reclamation',
    ]

# categoryrecette types

class categoryrecetteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the categoryrecette create method"""
    id: _int
    description: Optional[_str]
    publicite: 'publiciteCreateManyNestedWithoutRelationsInput'
    recette: 'recetteCreateManyNestedWithoutRelationsInput'


class categoryrecetteCreateInput(categoryrecetteOptionalCreateInput):
    """Required arguments to the categoryrecette create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categoryrecetteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the categoryrecette create method, without relations"""
    id: _int
    description: Optional[_str]


class categoryrecetteCreateWithoutRelationsInput(categoryrecetteOptionalCreateWithoutRelationsInput):
    """Required arguments to the categoryrecette create method, without relations"""


class categoryrecetteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryrecetteCreateWithoutRelationsInput'
    connect: 'categoryrecetteWhereUniqueInput'


class categoryrecetteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categoryrecetteCreateWithoutRelationsInput', List['categoryrecetteCreateWithoutRelationsInput']]
    connect: Union['categoryrecetteWhereUniqueInput', List['categoryrecetteWhereUniqueInput']]


_categoryrecetteWhereUnique_id_Input = TypedDict(
    '_categoryrecetteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

categoryrecetteWhereUniqueInput = _categoryrecetteWhereUnique_id_Input


class categoryrecetteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    description: Optional[_str]
    publicite: 'publiciteUpdateManyWithoutRelationsInput'
    recette: 'recetteUpdateManyWithoutRelationsInput'


class categoryrecetteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    description: Optional[_str]


class categoryrecetteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categoryrecetteCreateWithoutRelationsInput']
    connect: List['categoryrecetteWhereUniqueInput']
    set: List['categoryrecetteWhereUniqueInput']
    disconnect: List['categoryrecetteWhereUniqueInput']
    delete: List['categoryrecetteWhereUniqueInput']

    # TODO
    # update: List['categoryrecetteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categoryrecetteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categoryrecetteScalarWhereInput']
    # upsert: List['categoryrecetteUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['categoryrecetteCreateOrConnectWithoutRelationsInput']


class categoryrecetteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryrecetteCreateWithoutRelationsInput'
    connect: 'categoryrecetteWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categoryrecetteUpdateInput'
    # upsert: 'categoryrecetteUpsertWithoutRelationsInput'
    # connectOrCreate: 'categoryrecetteCreateOrConnectWithoutRelationsInput'


class categoryrecetteUpsertInput(TypedDict):
    create: 'categoryrecetteCreateInput'
    update: 'categoryrecetteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_categoryrecette_id_OrderByInput = TypedDict(
    '_categoryrecette_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_categoryrecette_description_OrderByInput = TypedDict(
    '_categoryrecette_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

categoryrecetteOrderByInput = Union[
    '_categoryrecette_id_OrderByInput',
    '_categoryrecette_description_OrderByInput',
]



# recursive categoryrecette types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categoryrecetteRelationFilter = TypedDict(
    'categoryrecetteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categoryrecetteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categoryrecetteInclude(TypedDict, total=False):
    """categoryrecette relational arguments"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryrecette']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryrecette']


    

class annonceurIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class annonceurIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class annonceurIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class annonceurIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class annonceurIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class annonceurArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyannonceurArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class categorieIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class categorieIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class categorieIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class categorieIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class categorieArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManycategorieArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryrecetteRecursive1']


class categoryclaimsIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryrecetteRecursive2']


class categoryclaimsIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryrecetteRecursive3']


class categoryclaimsIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategoryrecetteRecursive4']


class categoryclaimsIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class categoryclaimsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManycategoryclaimsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryrecetteRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryrecetteRecursive1']


class categoryrecetteIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryrecetteRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryrecetteRecursive2']


class categoryrecetteIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryrecetteRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryrecetteRecursive3']


class categoryrecetteIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategoryrecetteRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromcategoryrecetteRecursive4']


class categoryrecetteIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class categoryrecetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManycategoryrecetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive1']


class categorysensorsIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive2']


class categorysensorsIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive3']


class categorysensorsIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive4']


class categorysensorsIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class categorysensorsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManycategorysensorsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive1']


class commandeIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive2']


class commandeIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive3']


class commandeIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive4']


class commandeIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class commandeArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManycommandeArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive1']
    pack: Union[bool, 'packArgsFromcategoryrecetteRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive1']


class distributeurIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive2']
    pack: Union[bool, 'packArgsFromcategoryrecetteRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive2']


class distributeurIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive3']
    pack: Union[bool, 'packArgsFromcategoryrecetteRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive3']


class distributeurIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive4']
    pack: Union[bool, 'packArgsFromcategoryrecetteRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromcategoryrecetteRecursive4']


class distributeurIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class distributeurArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManydistributeurArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive1']


class distributeurRecetteIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive2']


class distributeurRecetteIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive3']


class distributeurRecetteIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive4']


class distributeurRecetteIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class distributeurRecetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManydistributeurRecetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    pack: Union[bool, 'FindManypackArgsFromcategoryrecetteRecursive1']
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive1']
    users: Union[bool, 'FindManyusersArgsFromcategoryrecetteRecursive1']


class entrepiseIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    pack: Union[bool, 'FindManypackArgsFromcategoryrecetteRecursive2']
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive2']
    users: Union[bool, 'FindManyusersArgsFromcategoryrecetteRecursive2']


class entrepiseIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    pack: Union[bool, 'FindManypackArgsFromcategoryrecetteRecursive3']
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive3']
    users: Union[bool, 'FindManyusersArgsFromcategoryrecetteRecursive3']


class entrepiseIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    pack: Union[bool, 'FindManypackArgsFromcategoryrecetteRecursive4']
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive4']
    users: Union[bool, 'FindManyusersArgsFromcategoryrecetteRecursive4']


class entrepiseIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class entrepiseArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyentrepiseArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'commandeArgsFromcategoryrecetteRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryrecetteRecursive1']


class factureIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'commandeArgsFromcategoryrecetteRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryrecetteRecursive2']


class factureIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'commandeArgsFromcategoryrecetteRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryrecetteRecursive3']


class factureIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'commandeArgsFromcategoryrecetteRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromcategoryrecetteRecursive4']


class factureIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class factureArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyfactureArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive1']


class infopaimentIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive2']


class infopaimentIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive3']


class infopaimentIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    facture: Union[bool, 'FindManyfactureArgsFromcategoryrecetteRecursive4']


class infopaimentIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class infopaimentArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyinfopaimentArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive1']


class ingredientIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive2']


class ingredientIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive3']


class ingredientIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive4']


class ingredientIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class ingredientArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyingredientArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive1']


class packIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive2']


class packIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive3']


class packIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive4']


class packIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class packArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManypackArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive1']


class publiciteIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive2']


class publiciteIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive3']


class publiciteIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive4']


class publiciteIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class publiciteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManypubliciteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive1']


class recetteIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive2']


class recetteIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive3']


class recetteIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    commande: Union[bool, 'FindManycommandeArgsFromcategoryrecetteRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategoryrecetteRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategoryrecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategoryrecetteRecursive4']


class recetteIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class recetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyrecetteArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive1']


class recetteingrIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive2']


class recetteingrIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive3']


class recetteingrIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    ingredient: Union[bool, 'ingredientArgsFromcategoryrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromcategoryrecetteRecursive4']


class recetteingrIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class recetteingrArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyrecetteingrArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryrecetteRecursive1']


class reclamationIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryrecetteRecursive2']


class reclamationIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryrecetteRecursive3']


class reclamationIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategoryrecetteRecursive4']


class reclamationIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class reclamationArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyreclamationArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class roleIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class roleIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class roleIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""


class roleIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class roleArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyroleArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryrecetteRecursive1']


class sensorsIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryrecetteRecursive2']


class sensorsIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryrecetteRecursive3']


class sensorsIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    distributeur: Union[bool, 'distributeurArgsFromcategoryrecetteRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategoryrecetteRecursive4']


class sensorsIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class sensorsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManysensorsArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive1']
    typetask: Union[bool, 'typetaskArgsFromcategoryrecetteRecursive1']
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive1']


class taskIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive2']
    typetask: Union[bool, 'typetaskArgsFromcategoryrecetteRecursive2']
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive2']


class taskIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive3']
    typetask: Union[bool, 'typetaskArgsFromcategoryrecetteRecursive3']
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive3']


class taskIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive4']
    typetask: Union[bool, 'typetaskArgsFromcategoryrecetteRecursive4']
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive4']


class taskIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class taskArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManytaskArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive1']


class tokensIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive2']


class tokensIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive3']


class tokensIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    users: Union[bool, 'usersArgsFromcategoryrecetteRecursive4']


class tokensIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class tokensArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManytokensArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive1']


class typetaskIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive2']


class typetaskIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive3']


class typetaskIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive4']


class typetaskIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class typetaskArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManytypetaskArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromcategoryrecette(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive1']
    tokens: Union[bool, 'tokensArgsFromcategoryrecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive1']


class usersIncludeFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive2']
    tokens: Union[bool, 'tokensArgsFromcategoryrecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive2']


class usersIncludeFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive3']
    tokens: Union[bool, 'tokensArgsFromcategoryrecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive3']


class usersIncludeFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for categoryrecette"""
    task: Union[bool, 'FindManytaskArgsFromcategoryrecetteRecursive4']
    tokens: Union[bool, 'tokensArgsFromcategoryrecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategoryrecetteRecursive4']


class usersIncludeFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for categoryrecette"""

    

class usersArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    
    

class FindManyusersArgsFromcategoryrecette(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcategoryrecetteRecursive1(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcategoryrecetteRecursive2(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcategoryrecetteRecursive3(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcategoryrecetteRecursive4(TypedDict, total=False):
    """Arguments for categoryrecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManycategoryrecetteArgs = FindManycategoryrecetteArgsFromcategoryrecette
FindFirstcategoryrecetteArgs = FindManycategoryrecetteArgsFromcategoryrecette


    

class categoryrecetteWhereInput(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    publicite: 'publiciteListRelationFilter'
    recette: 'recetteListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryrecetteWhereInputRecursive1', List['categoryrecetteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categoryrecetteWhereInputRecursive1']
    OR: List['categoryrecetteWhereInputRecursive1']
    NOT: List['categoryrecetteWhereInputRecursive1']


class categoryrecetteWhereInputRecursive1(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    publicite: 'publiciteListRelationFilter'
    recette: 'recetteListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryrecetteWhereInputRecursive2', List['categoryrecetteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categoryrecetteWhereInputRecursive2']
    OR: List['categoryrecetteWhereInputRecursive2']
    NOT: List['categoryrecetteWhereInputRecursive2']


class categoryrecetteWhereInputRecursive2(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    publicite: 'publiciteListRelationFilter'
    recette: 'recetteListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryrecetteWhereInputRecursive3', List['categoryrecetteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categoryrecetteWhereInputRecursive3']
    OR: List['categoryrecetteWhereInputRecursive3']
    NOT: List['categoryrecetteWhereInputRecursive3']


class categoryrecetteWhereInputRecursive3(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    publicite: 'publiciteListRelationFilter'
    recette: 'recetteListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryrecetteWhereInputRecursive4', List['categoryrecetteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categoryrecetteWhereInputRecursive4']
    OR: List['categoryrecetteWhereInputRecursive4']
    NOT: List['categoryrecetteWhereInputRecursive4']


class categoryrecetteWhereInputRecursive4(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    publicite: 'publiciteListRelationFilter'
    recette: 'recetteListRelationFilter'



# aggregate categoryrecette types


    

class categoryrecetteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryrecetteScalarWhereWithAggregatesInputRecursive1']
    OR: List['categoryrecetteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categoryrecetteScalarWhereWithAggregatesInputRecursive1']


class categoryrecetteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryrecetteScalarWhereWithAggregatesInputRecursive2']
    OR: List['categoryrecetteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categoryrecetteScalarWhereWithAggregatesInputRecursive2']


class categoryrecetteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryrecetteScalarWhereWithAggregatesInputRecursive3']
    OR: List['categoryrecetteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categoryrecetteScalarWhereWithAggregatesInputRecursive3']


class categoryrecetteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryrecetteScalarWhereWithAggregatesInputRecursive4']
    OR: List['categoryrecetteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categoryrecetteScalarWhereWithAggregatesInputRecursive4']


class categoryrecetteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """categoryrecette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class categoryrecetteGroupByOutput(TypedDict, total=False):
    id: _int
    description: _str
    _sum: 'categoryrecetteSumAggregateOutput'
    _avg: 'categoryrecetteAvgAggregateOutput'
    _min: 'categoryrecetteMinAggregateOutput'
    _max: 'categoryrecetteMaxAggregateOutput'
    _count: 'categoryrecetteCountAggregateOutput'


class categoryrecetteAvgAggregateOutput(TypedDict, total=False):
    """categoryrecette output for aggregating averages"""
    id: float


class categoryrecetteSumAggregateOutput(TypedDict, total=False):
    """categoryrecette output for aggregating sums"""
    id: _int


class categoryrecetteScalarAggregateOutput(TypedDict, total=False):
    """categoryrecette output including scalar fields"""
    id: _int
    description: _str


categoryrecetteMinAggregateOutput = categoryrecetteScalarAggregateOutput
categoryrecetteMaxAggregateOutput = categoryrecetteScalarAggregateOutput


class categoryrecetteMaxAggregateInput(TypedDict, total=False):
    """categoryrecette input for aggregating by max"""
    id: bool
    description: bool


class categoryrecetteMinAggregateInput(TypedDict, total=False):
    """categoryrecette input for aggregating by min"""
    id: bool
    description: bool


class categoryrecetteNumberAggregateInput(TypedDict, total=False):
    """categoryrecette input for aggregating numbers"""
    id: bool


categoryrecetteAvgAggregateInput = categoryrecetteNumberAggregateInput
categoryrecetteSumAggregateInput = categoryrecetteNumberAggregateInput


categoryrecetteCountAggregateInput = TypedDict(
    'categoryrecetteCountAggregateInput',
    {
        'id': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

categoryrecetteCountAggregateOutput = TypedDict(
    'categoryrecetteCountAggregateOutput',
    {
        'id': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


categoryrecetteKeys = Literal[
    'id',
    'description',
    'publicite',
    'recette',
]
categoryrecetteScalarFieldKeys = Literal[
    'id',
    'description',
]
categoryrecetteScalarFieldKeysT = TypeVar('categoryrecetteScalarFieldKeysT', bound=categoryrecetteScalarFieldKeys)

categoryrecetteRelationalFieldKeys = Literal[
        'publicite',
        'recette',
    ]

# categorysensors types

class categorysensorsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the categorysensors create method"""
    id: _int
    sensor: Optional[_str]
    security: _bool
    sensors: 'sensorsCreateManyNestedWithoutRelationsInput'


class categorysensorsCreateInput(categorysensorsOptionalCreateInput):
    """Required arguments to the categorysensors create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categorysensorsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the categorysensors create method, without relations"""
    id: _int
    sensor: Optional[_str]
    security: _bool


class categorysensorsCreateWithoutRelationsInput(categorysensorsOptionalCreateWithoutRelationsInput):
    """Required arguments to the categorysensors create method, without relations"""


class categorysensorsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categorysensorsCreateWithoutRelationsInput'
    connect: 'categorysensorsWhereUniqueInput'


class categorysensorsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categorysensorsCreateWithoutRelationsInput', List['categorysensorsCreateWithoutRelationsInput']]
    connect: Union['categorysensorsWhereUniqueInput', List['categorysensorsWhereUniqueInput']]


_categorysensorsWhereUnique_id_Input = TypedDict(
    '_categorysensorsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

categorysensorsWhereUniqueInput = _categorysensorsWhereUnique_id_Input


class categorysensorsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    sensor: Optional[_str]
    security: _bool
    sensors: 'sensorsUpdateManyWithoutRelationsInput'


class categorysensorsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    sensor: Optional[_str]
    security: _bool


class categorysensorsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categorysensorsCreateWithoutRelationsInput']
    connect: List['categorysensorsWhereUniqueInput']
    set: List['categorysensorsWhereUniqueInput']
    disconnect: List['categorysensorsWhereUniqueInput']
    delete: List['categorysensorsWhereUniqueInput']

    # TODO
    # update: List['categorysensorsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categorysensorsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categorysensorsScalarWhereInput']
    # upsert: List['categorysensorsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['categorysensorsCreateOrConnectWithoutRelationsInput']


class categorysensorsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categorysensorsCreateWithoutRelationsInput'
    connect: 'categorysensorsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categorysensorsUpdateInput'
    # upsert: 'categorysensorsUpsertWithoutRelationsInput'
    # connectOrCreate: 'categorysensorsCreateOrConnectWithoutRelationsInput'


class categorysensorsUpsertInput(TypedDict):
    create: 'categorysensorsCreateInput'
    update: 'categorysensorsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_categorysensors_id_OrderByInput = TypedDict(
    '_categorysensors_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_categorysensors_sensor_OrderByInput = TypedDict(
    '_categorysensors_sensor_OrderByInput',
    {
        'sensor': 'SortOrder',
    },
    total=True
)

_categorysensors_security_OrderByInput = TypedDict(
    '_categorysensors_security_OrderByInput',
    {
        'security': 'SortOrder',
    },
    total=True
)

categorysensorsOrderByInput = Union[
    '_categorysensors_id_OrderByInput',
    '_categorysensors_sensor_OrderByInput',
    '_categorysensors_security_OrderByInput',
]



# recursive categorysensors types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categorysensorsRelationFilter = TypedDict(
    'categorysensorsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categorysensorsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categorysensorsInclude(TypedDict, total=False):
    """categorysensors relational arguments"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensors']


    

class annonceurIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class annonceurIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class annonceurIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class annonceurIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class annonceurIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class annonceurArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyannonceurArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class categorieIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class categorieIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class categorieIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class categorieIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class categorieArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManycategorieArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorysensorsRecursive1']


class categoryclaimsIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorysensorsRecursive2']


class categoryclaimsIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorysensorsRecursive3']


class categoryclaimsIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcategorysensorsRecursive4']


class categoryclaimsIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class categoryclaimsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManycategoryclaimsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorysensorsRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorysensorsRecursive1']


class categoryrecetteIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorysensorsRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorysensorsRecursive2']


class categoryrecetteIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorysensorsRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorysensorsRecursive3']


class categoryrecetteIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcategorysensorsRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromcategorysensorsRecursive4']


class categoryrecetteIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class categoryrecetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManycategoryrecetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive1']


class categorysensorsIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive2']


class categorysensorsIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive3']


class categorysensorsIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive4']


class categorysensorsIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class categorysensorsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManycategorysensorsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive1']


class commandeIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive2']


class commandeIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive3']


class commandeIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive4']


class commandeIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class commandeArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManycommandeArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive1']
    pack: Union[bool, 'packArgsFromcategorysensorsRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive1']


class distributeurIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive2']
    pack: Union[bool, 'packArgsFromcategorysensorsRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive2']


class distributeurIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive3']
    pack: Union[bool, 'packArgsFromcategorysensorsRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive3']


class distributeurIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive4']
    pack: Union[bool, 'packArgsFromcategorysensorsRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromcategorysensorsRecursive4']


class distributeurIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class distributeurArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManydistributeurArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive1']


class distributeurRecetteIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive2']


class distributeurRecetteIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive3']


class distributeurRecetteIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive4']


class distributeurRecetteIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class distributeurRecetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManydistributeurRecetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    pack: Union[bool, 'FindManypackArgsFromcategorysensorsRecursive1']
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive1']
    users: Union[bool, 'FindManyusersArgsFromcategorysensorsRecursive1']


class entrepiseIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    pack: Union[bool, 'FindManypackArgsFromcategorysensorsRecursive2']
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive2']
    users: Union[bool, 'FindManyusersArgsFromcategorysensorsRecursive2']


class entrepiseIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    pack: Union[bool, 'FindManypackArgsFromcategorysensorsRecursive3']
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive3']
    users: Union[bool, 'FindManyusersArgsFromcategorysensorsRecursive3']


class entrepiseIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    pack: Union[bool, 'FindManypackArgsFromcategorysensorsRecursive4']
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive4']
    users: Union[bool, 'FindManyusersArgsFromcategorysensorsRecursive4']


class entrepiseIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class entrepiseArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyentrepiseArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'commandeArgsFromcategorysensorsRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorysensorsRecursive1']


class factureIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'commandeArgsFromcategorysensorsRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorysensorsRecursive2']


class factureIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'commandeArgsFromcategorysensorsRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorysensorsRecursive3']


class factureIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'commandeArgsFromcategorysensorsRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromcategorysensorsRecursive4']


class factureIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class factureArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyfactureArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive1']


class infopaimentIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive2']


class infopaimentIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive3']


class infopaimentIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    facture: Union[bool, 'FindManyfactureArgsFromcategorysensorsRecursive4']


class infopaimentIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class infopaimentArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyinfopaimentArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive1']


class ingredientIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive2']


class ingredientIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive3']


class ingredientIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive4']


class ingredientIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class ingredientArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyingredientArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive1']


class packIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive2']


class packIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive3']


class packIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive4']


class packIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class packArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManypackArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive1']


class publiciteIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive2']


class publiciteIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive3']


class publiciteIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive4']


class publiciteIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class publiciteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManypubliciteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive1']


class recetteIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive2']


class recetteIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive3']


class recetteIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    commande: Union[bool, 'FindManycommandeArgsFromcategorysensorsRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcategorysensorsRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcategorysensorsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcategorysensorsRecursive4']


class recetteIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class recetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyrecetteArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive1']


class recetteingrIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive2']


class recetteingrIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive3']


class recetteingrIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    ingredient: Union[bool, 'ingredientArgsFromcategorysensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromcategorysensorsRecursive4']


class recetteingrIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class recetteingrArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyrecetteingrArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorysensorsRecursive1']


class reclamationIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorysensorsRecursive2']


class reclamationIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorysensorsRecursive3']


class reclamationIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcategorysensorsRecursive4']


class reclamationIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class reclamationArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyreclamationArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class roleIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class roleIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class roleIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""


class roleIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class roleArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyroleArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorysensorsRecursive1']


class sensorsIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorysensorsRecursive2']


class sensorsIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorysensorsRecursive3']


class sensorsIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    distributeur: Union[bool, 'distributeurArgsFromcategorysensorsRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromcategorysensorsRecursive4']


class sensorsIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class sensorsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManysensorsArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive1']
    typetask: Union[bool, 'typetaskArgsFromcategorysensorsRecursive1']
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive1']


class taskIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive2']
    typetask: Union[bool, 'typetaskArgsFromcategorysensorsRecursive2']
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive2']


class taskIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive3']
    typetask: Union[bool, 'typetaskArgsFromcategorysensorsRecursive3']
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive3']


class taskIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive4']
    typetask: Union[bool, 'typetaskArgsFromcategorysensorsRecursive4']
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive4']


class taskIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class taskArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManytaskArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive1']


class tokensIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive2']


class tokensIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive3']


class tokensIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    users: Union[bool, 'usersArgsFromcategorysensorsRecursive4']


class tokensIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class tokensArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManytokensArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive1']


class typetaskIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive2']


class typetaskIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive3']


class typetaskIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive4']


class typetaskIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class typetaskArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManytypetaskArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromcategorysensors(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive1']
    tokens: Union[bool, 'tokensArgsFromcategorysensorsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive1']


class usersIncludeFromcategorysensorsRecursive1(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive2']
    tokens: Union[bool, 'tokensArgsFromcategorysensorsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive2']


class usersIncludeFromcategorysensorsRecursive2(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive3']
    tokens: Union[bool, 'tokensArgsFromcategorysensorsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive3']


class usersIncludeFromcategorysensorsRecursive3(TypedDict, total=False):
    """Relational arguments for categorysensors"""
    task: Union[bool, 'FindManytaskArgsFromcategorysensorsRecursive4']
    tokens: Union[bool, 'tokensArgsFromcategorysensorsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcategorysensorsRecursive4']


class usersIncludeFromcategorysensorsRecursive4(TypedDict, total=False):
    """Relational arguments for categorysensors"""

    

class usersArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    
    

class FindManyusersArgsFromcategorysensors(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcategorysensorsRecursive1(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcategorysensorsRecursive2(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcategorysensorsRecursive3(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcategorysensorsRecursive4(TypedDict, total=False):
    """Arguments for categorysensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManycategorysensorsArgs = FindManycategorysensorsArgsFromcategorysensors
FindFirstcategorysensorsArgs = FindManycategorysensorsArgsFromcategorysensors


    

class categorysensorsWhereInput(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sensor: Union[None, _str, 'types.StringFilter']
    security: Union[_bool, 'types.BooleanFilter']
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['categorysensorsWhereInputRecursive1', List['categorysensorsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categorysensorsWhereInputRecursive1']
    OR: List['categorysensorsWhereInputRecursive1']
    NOT: List['categorysensorsWhereInputRecursive1']


class categorysensorsWhereInputRecursive1(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sensor: Union[None, _str, 'types.StringFilter']
    security: Union[_bool, 'types.BooleanFilter']
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['categorysensorsWhereInputRecursive2', List['categorysensorsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categorysensorsWhereInputRecursive2']
    OR: List['categorysensorsWhereInputRecursive2']
    NOT: List['categorysensorsWhereInputRecursive2']


class categorysensorsWhereInputRecursive2(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sensor: Union[None, _str, 'types.StringFilter']
    security: Union[_bool, 'types.BooleanFilter']
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['categorysensorsWhereInputRecursive3', List['categorysensorsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categorysensorsWhereInputRecursive3']
    OR: List['categorysensorsWhereInputRecursive3']
    NOT: List['categorysensorsWhereInputRecursive3']


class categorysensorsWhereInputRecursive3(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sensor: Union[None, _str, 'types.StringFilter']
    security: Union[_bool, 'types.BooleanFilter']
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['categorysensorsWhereInputRecursive4', List['categorysensorsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categorysensorsWhereInputRecursive4']
    OR: List['categorysensorsWhereInputRecursive4']
    NOT: List['categorysensorsWhereInputRecursive4']


class categorysensorsWhereInputRecursive4(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    sensor: Union[None, _str, 'types.StringFilter']
    security: Union[_bool, 'types.BooleanFilter']
    sensors: 'sensorsListRelationFilter'



# aggregate categorysensors types


    

class categorysensorsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sensor: Union[_str, 'types.StringWithAggregatesFilter']
    security: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['categorysensorsScalarWhereWithAggregatesInputRecursive1']
    OR: List['categorysensorsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categorysensorsScalarWhereWithAggregatesInputRecursive1']


class categorysensorsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sensor: Union[_str, 'types.StringWithAggregatesFilter']
    security: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['categorysensorsScalarWhereWithAggregatesInputRecursive2']
    OR: List['categorysensorsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categorysensorsScalarWhereWithAggregatesInputRecursive2']


class categorysensorsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sensor: Union[_str, 'types.StringWithAggregatesFilter']
    security: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['categorysensorsScalarWhereWithAggregatesInputRecursive3']
    OR: List['categorysensorsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categorysensorsScalarWhereWithAggregatesInputRecursive3']


class categorysensorsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sensor: Union[_str, 'types.StringWithAggregatesFilter']
    security: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['categorysensorsScalarWhereWithAggregatesInputRecursive4']
    OR: List['categorysensorsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categorysensorsScalarWhereWithAggregatesInputRecursive4']


class categorysensorsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """categorysensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    sensor: Union[_str, 'types.StringWithAggregatesFilter']
    security: Union[_bool, 'types.BooleanWithAggregatesFilter']



class categorysensorsGroupByOutput(TypedDict, total=False):
    id: _int
    sensor: _str
    security: _bool
    _sum: 'categorysensorsSumAggregateOutput'
    _avg: 'categorysensorsAvgAggregateOutput'
    _min: 'categorysensorsMinAggregateOutput'
    _max: 'categorysensorsMaxAggregateOutput'
    _count: 'categorysensorsCountAggregateOutput'


class categorysensorsAvgAggregateOutput(TypedDict, total=False):
    """categorysensors output for aggregating averages"""
    id: float


class categorysensorsSumAggregateOutput(TypedDict, total=False):
    """categorysensors output for aggregating sums"""
    id: _int


class categorysensorsScalarAggregateOutput(TypedDict, total=False):
    """categorysensors output including scalar fields"""
    id: _int
    sensor: _str
    security: _bool


categorysensorsMinAggregateOutput = categorysensorsScalarAggregateOutput
categorysensorsMaxAggregateOutput = categorysensorsScalarAggregateOutput


class categorysensorsMaxAggregateInput(TypedDict, total=False):
    """categorysensors input for aggregating by max"""
    id: bool
    sensor: bool
    security: bool


class categorysensorsMinAggregateInput(TypedDict, total=False):
    """categorysensors input for aggregating by min"""
    id: bool
    sensor: bool
    security: bool


class categorysensorsNumberAggregateInput(TypedDict, total=False):
    """categorysensors input for aggregating numbers"""
    id: bool


categorysensorsAvgAggregateInput = categorysensorsNumberAggregateInput
categorysensorsSumAggregateInput = categorysensorsNumberAggregateInput


categorysensorsCountAggregateInput = TypedDict(
    'categorysensorsCountAggregateInput',
    {
        'id': bool,
        'sensor': bool,
        'security': bool,
        '_all': bool,
    },
    total=False,
)

categorysensorsCountAggregateOutput = TypedDict(
    'categorysensorsCountAggregateOutput',
    {
        'id': int,
        'sensor': int,
        'security': int,
        '_all': int,
    },
    total=False,
)


categorysensorsKeys = Literal[
    'id',
    'sensor',
    'security',
    'sensors',
]
categorysensorsScalarFieldKeys = Literal[
    'id',
    'sensor',
    'security',
]
categorysensorsScalarFieldKeysT = TypeVar('categorysensorsScalarFieldKeysT', bound=categorysensorsScalarFieldKeys)

categorysensorsRelationalFieldKeys = Literal[
        'sensors',
    ]

# commande types

class commandeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the commande create method"""
    id: _int
    idRecette: _int
    idIngredient: Optional[_int]
    ingredient: 'ingredientCreateNestedWithoutRelationsInput'
    recette: 'recetteCreateNestedWithoutRelationsInput'
    facture: 'factureCreateManyNestedWithoutRelationsInput'


class commandeCreateInput(commandeOptionalCreateInput):
    """Required arguments to the commande create method"""
    quantity: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class commandeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the commande create method, without relations"""
    id: _int
    idRecette: _int
    idIngredient: Optional[_int]


class commandeCreateWithoutRelationsInput(commandeOptionalCreateWithoutRelationsInput):
    """Required arguments to the commande create method, without relations"""
    quantity: _str


class commandeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'commandeCreateWithoutRelationsInput'
    connect: 'commandeWhereUniqueInput'


class commandeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['commandeCreateWithoutRelationsInput', List['commandeCreateWithoutRelationsInput']]
    connect: Union['commandeWhereUniqueInput', List['commandeWhereUniqueInput']]


_commandeWhereUnique_id_Input = TypedDict(
    '_commandeWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

commandeWhereUniqueInput = _commandeWhereUnique_id_Input


class commandeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    quantity: _str
    ingredient: 'ingredientUpdateOneWithoutRelationsInput'
    recette: 'recetteUpdateOneWithoutRelationsInput'
    facture: 'factureUpdateManyWithoutRelationsInput'


class commandeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    quantity: _str


class commandeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['commandeCreateWithoutRelationsInput']
    connect: List['commandeWhereUniqueInput']
    set: List['commandeWhereUniqueInput']
    disconnect: List['commandeWhereUniqueInput']
    delete: List['commandeWhereUniqueInput']

    # TODO
    # update: List['commandeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['commandeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['commandeScalarWhereInput']
    # upsert: List['commandeUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['commandeCreateOrConnectWithoutRelationsInput']


class commandeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'commandeCreateWithoutRelationsInput'
    connect: 'commandeWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'commandeUpdateInput'
    # upsert: 'commandeUpsertWithoutRelationsInput'
    # connectOrCreate: 'commandeCreateOrConnectWithoutRelationsInput'


class commandeUpsertInput(TypedDict):
    create: 'commandeCreateInput'
    update: 'commandeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_commande_id_OrderByInput = TypedDict(
    '_commande_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_commande_idRecette_OrderByInput = TypedDict(
    '_commande_idRecette_OrderByInput',
    {
        'idRecette': 'SortOrder',
    },
    total=True
)

_commande_idIngredient_OrderByInput = TypedDict(
    '_commande_idIngredient_OrderByInput',
    {
        'idIngredient': 'SortOrder',
    },
    total=True
)

_commande_quantity_OrderByInput = TypedDict(
    '_commande_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

commandeOrderByInput = Union[
    '_commande_id_OrderByInput',
    '_commande_idRecette_OrderByInput',
    '_commande_idIngredient_OrderByInput',
    '_commande_quantity_OrderByInput',
]



# recursive commande types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

commandeRelationFilter = TypedDict(
    'commandeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class commandeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class commandeInclude(TypedDict, total=False):
    """commande relational arguments"""
    ingredient: Union[bool, 'ingredientArgsFromcommande']
    recette: Union[bool, 'recetteArgsFromcommande']
    facture: Union[bool, 'FindManyfactureArgsFromcommande']


    

class annonceurIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""


class annonceurIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""


class annonceurIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""


class annonceurIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""


class annonceurIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class annonceurArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyannonceurArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""


class categorieIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""


class categorieIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""


class categorieIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""


class categorieIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class categorieArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManycategorieArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcommandeRecursive1']


class categoryclaimsIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcommandeRecursive2']


class categoryclaimsIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcommandeRecursive3']


class categoryclaimsIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromcommandeRecursive4']


class categoryclaimsIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class categoryclaimsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManycategoryclaimsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcommandeRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromcommandeRecursive1']


class categoryrecetteIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcommandeRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromcommandeRecursive2']


class categoryrecetteIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcommandeRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromcommandeRecursive3']


class categoryrecetteIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    publicite: Union[bool, 'FindManypubliciteArgsFromcommandeRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromcommandeRecursive4']


class categoryrecetteIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class categoryrecetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManycategoryrecetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive1']


class categorysensorsIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive2']


class categorysensorsIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive3']


class categorysensorsIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive4']


class categorysensorsIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class categorysensorsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManycategorysensorsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive1']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive1']


class commandeIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive2']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive2']


class commandeIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive3']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive3']


class commandeIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive4']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive4']


class commandeIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class commandeArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManycommandeArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive1']
    pack: Union[bool, 'packArgsFromcommandeRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive1']


class distributeurIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive2']
    pack: Union[bool, 'packArgsFromcommandeRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive2']


class distributeurIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive3']
    pack: Union[bool, 'packArgsFromcommandeRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive3']


class distributeurIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive4']
    pack: Union[bool, 'packArgsFromcommandeRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromcommandeRecursive4']


class distributeurIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class distributeurArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManydistributeurArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive1']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive1']


class distributeurRecetteIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive2']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive2']


class distributeurRecetteIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive3']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive3']


class distributeurRecetteIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive4']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive4']


class distributeurRecetteIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class distributeurRecetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManydistributeurRecetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    pack: Union[bool, 'FindManypackArgsFromcommandeRecursive1']
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive1']
    users: Union[bool, 'FindManyusersArgsFromcommandeRecursive1']


class entrepiseIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    pack: Union[bool, 'FindManypackArgsFromcommandeRecursive2']
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive2']
    users: Union[bool, 'FindManyusersArgsFromcommandeRecursive2']


class entrepiseIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    pack: Union[bool, 'FindManypackArgsFromcommandeRecursive3']
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive3']
    users: Union[bool, 'FindManyusersArgsFromcommandeRecursive3']


class entrepiseIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    pack: Union[bool, 'FindManypackArgsFromcommandeRecursive4']
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive4']
    users: Union[bool, 'FindManyusersArgsFromcommandeRecursive4']


class entrepiseIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class entrepiseArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyentrepiseArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'commandeArgsFromcommandeRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromcommandeRecursive1']


class factureIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'commandeArgsFromcommandeRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromcommandeRecursive2']


class factureIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'commandeArgsFromcommandeRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromcommandeRecursive3']


class factureIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'commandeArgsFromcommandeRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromcommandeRecursive4']


class factureIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class factureArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyfactureArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive1']


class infopaimentIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive2']


class infopaimentIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive3']


class infopaimentIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    facture: Union[bool, 'FindManyfactureArgsFromcommandeRecursive4']


class infopaimentIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class infopaimentArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyinfopaimentArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive1']


class ingredientIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive2']


class ingredientIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive3']


class ingredientIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive4']


class ingredientIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class ingredientArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyingredientArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive1']


class packIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive2']


class packIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive3']


class packIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive4']


class packIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class packArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManypackArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive1']


class publiciteIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive2']


class publiciteIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive3']


class publiciteIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive4']


class publiciteIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class publiciteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManypubliciteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive1']


class recetteIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive2']


class recetteIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive3']


class recetteIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    commande: Union[bool, 'FindManycommandeArgsFromcommandeRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromcommandeRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromcommandeRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromcommandeRecursive4']


class recetteIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class recetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyrecetteArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive1']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive1']


class recetteingrIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive2']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive2']


class recetteingrIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive3']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive3']


class recetteingrIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    ingredient: Union[bool, 'ingredientArgsFromcommandeRecursive4']
    recette: Union[bool, 'recetteArgsFromcommandeRecursive4']


class recetteingrIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class recetteingrArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyrecetteingrArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcommandeRecursive1']


class reclamationIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcommandeRecursive2']


class reclamationIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcommandeRecursive3']


class reclamationIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromcommandeRecursive4']


class reclamationIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class reclamationArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyreclamationArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""


class roleIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""


class roleIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""


class roleIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""


class roleIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class roleArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyroleArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromcommandeRecursive1']


class sensorsIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromcommandeRecursive2']


class sensorsIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromcommandeRecursive3']


class sensorsIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    distributeur: Union[bool, 'distributeurArgsFromcommandeRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromcommandeRecursive4']


class sensorsIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class sensorsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManysensorsArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive1']
    typetask: Union[bool, 'typetaskArgsFromcommandeRecursive1']
    users: Union[bool, 'usersArgsFromcommandeRecursive1']


class taskIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive2']
    typetask: Union[bool, 'typetaskArgsFromcommandeRecursive2']
    users: Union[bool, 'usersArgsFromcommandeRecursive2']


class taskIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive3']
    typetask: Union[bool, 'typetaskArgsFromcommandeRecursive3']
    users: Union[bool, 'usersArgsFromcommandeRecursive3']


class taskIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive4']
    typetask: Union[bool, 'typetaskArgsFromcommandeRecursive4']
    users: Union[bool, 'usersArgsFromcommandeRecursive4']


class taskIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class taskArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManytaskArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    users: Union[bool, 'usersArgsFromcommandeRecursive1']


class tokensIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    users: Union[bool, 'usersArgsFromcommandeRecursive2']


class tokensIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    users: Union[bool, 'usersArgsFromcommandeRecursive3']


class tokensIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    users: Union[bool, 'usersArgsFromcommandeRecursive4']


class tokensIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class tokensArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManytokensArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive1']


class typetaskIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive2']


class typetaskIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive3']


class typetaskIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive4']


class typetaskIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class typetaskArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManytypetaskArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromcommande(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive1']
    tokens: Union[bool, 'tokensArgsFromcommandeRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive1']


class usersIncludeFromcommandeRecursive1(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive2']
    tokens: Union[bool, 'tokensArgsFromcommandeRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive2']


class usersIncludeFromcommandeRecursive2(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive3']
    tokens: Union[bool, 'tokensArgsFromcommandeRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive3']


class usersIncludeFromcommandeRecursive3(TypedDict, total=False):
    """Relational arguments for commande"""
    task: Union[bool, 'FindManytaskArgsFromcommandeRecursive4']
    tokens: Union[bool, 'tokensArgsFromcommandeRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromcommandeRecursive4']


class usersIncludeFromcommandeRecursive4(TypedDict, total=False):
    """Relational arguments for commande"""

    

class usersArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    
    

class FindManyusersArgsFromcommande(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcommandeRecursive1(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcommandeRecursive2(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcommandeRecursive3(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcommandeRecursive4(TypedDict, total=False):
    """Arguments for commande"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManycommandeArgs = FindManycommandeArgsFromcommande
FindFirstcommandeArgs = FindManycommandeArgsFromcommande


    

class commandeWhereInput(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[None, _int, 'types.IntFilter']
    quantity: Union[_str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['commandeWhereInputRecursive1', List['commandeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['commandeWhereInputRecursive1']
    OR: List['commandeWhereInputRecursive1']
    NOT: List['commandeWhereInputRecursive1']


class commandeWhereInputRecursive1(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[None, _int, 'types.IntFilter']
    quantity: Union[_str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['commandeWhereInputRecursive2', List['commandeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['commandeWhereInputRecursive2']
    OR: List['commandeWhereInputRecursive2']
    NOT: List['commandeWhereInputRecursive2']


class commandeWhereInputRecursive2(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[None, _int, 'types.IntFilter']
    quantity: Union[_str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['commandeWhereInputRecursive3', List['commandeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['commandeWhereInputRecursive3']
    OR: List['commandeWhereInputRecursive3']
    NOT: List['commandeWhereInputRecursive3']


class commandeWhereInputRecursive3(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[None, _int, 'types.IntFilter']
    quantity: Union[_str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['commandeWhereInputRecursive4', List['commandeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['commandeWhereInputRecursive4']
    OR: List['commandeWhereInputRecursive4']
    NOT: List['commandeWhereInputRecursive4']


class commandeWhereInputRecursive4(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[None, _int, 'types.IntFilter']
    quantity: Union[_str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'
    facture: 'factureListRelationFilter'



# aggregate commande types


    

class commandeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['commandeScalarWhereWithAggregatesInputRecursive1']
    OR: List['commandeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['commandeScalarWhereWithAggregatesInputRecursive1']


class commandeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['commandeScalarWhereWithAggregatesInputRecursive2']
    OR: List['commandeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['commandeScalarWhereWithAggregatesInputRecursive2']


class commandeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['commandeScalarWhereWithAggregatesInputRecursive3']
    OR: List['commandeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['commandeScalarWhereWithAggregatesInputRecursive3']


class commandeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['commandeScalarWhereWithAggregatesInputRecursive4']
    OR: List['commandeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['commandeScalarWhereWithAggregatesInputRecursive4']


class commandeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """commande arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']



class commandeGroupByOutput(TypedDict, total=False):
    id: _int
    idRecette: _int
    idIngredient: _int
    quantity: _str
    _sum: 'commandeSumAggregateOutput'
    _avg: 'commandeAvgAggregateOutput'
    _min: 'commandeMinAggregateOutput'
    _max: 'commandeMaxAggregateOutput'
    _count: 'commandeCountAggregateOutput'


class commandeAvgAggregateOutput(TypedDict, total=False):
    """commande output for aggregating averages"""
    id: float
    idRecette: float
    idIngredient: float


class commandeSumAggregateOutput(TypedDict, total=False):
    """commande output for aggregating sums"""
    id: _int
    idRecette: _int
    idIngredient: _int


class commandeScalarAggregateOutput(TypedDict, total=False):
    """commande output including scalar fields"""
    id: _int
    idRecette: _int
    idIngredient: _int
    quantity: _str


commandeMinAggregateOutput = commandeScalarAggregateOutput
commandeMaxAggregateOutput = commandeScalarAggregateOutput


class commandeMaxAggregateInput(TypedDict, total=False):
    """commande input for aggregating by max"""
    id: bool
    idRecette: bool
    idIngredient: bool
    quantity: bool


class commandeMinAggregateInput(TypedDict, total=False):
    """commande input for aggregating by min"""
    id: bool
    idRecette: bool
    idIngredient: bool
    quantity: bool


class commandeNumberAggregateInput(TypedDict, total=False):
    """commande input for aggregating numbers"""
    id: bool
    idRecette: bool
    idIngredient: bool


commandeAvgAggregateInput = commandeNumberAggregateInput
commandeSumAggregateInput = commandeNumberAggregateInput


commandeCountAggregateInput = TypedDict(
    'commandeCountAggregateInput',
    {
        'id': bool,
        'idRecette': bool,
        'idIngredient': bool,
        'quantity': bool,
        '_all': bool,
    },
    total=False,
)

commandeCountAggregateOutput = TypedDict(
    'commandeCountAggregateOutput',
    {
        'id': int,
        'idRecette': int,
        'idIngredient': int,
        'quantity': int,
        '_all': int,
    },
    total=False,
)


commandeKeys = Literal[
    'id',
    'idRecette',
    'idIngredient',
    'quantity',
    'ingredient',
    'recette',
    'facture',
]
commandeScalarFieldKeys = Literal[
    'id',
    'idRecette',
    'idIngredient',
    'quantity',
]
commandeScalarFieldKeysT = TypeVar('commandeScalarFieldKeysT', bound=commandeScalarFieldKeys)

commandeRelationalFieldKeys = Literal[
        'ingredient',
        'recette',
        'facture',
    ]

# distributeur types

class distributeurOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the distributeur create method"""
    id: _int
    capaciteGoblet: Optional[_int]
    capaciteSucre: Optional[_int]
    capaciteSpoon: Optional[_int]
    distributeurRecette: 'distributeurRecetteCreateManyNestedWithoutRelationsInput'
    facture: 'factureCreateManyNestedWithoutRelationsInput'
    pack: 'packCreateNestedWithoutRelationsInput'
    sensors: 'sensorsCreateManyNestedWithoutRelationsInput'


class distributeurCreateInput(distributeurOptionalCreateInput):
    """Required arguments to the distributeur create method"""
    identifiant: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class distributeurOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the distributeur create method, without relations"""
    id: _int
    capaciteGoblet: Optional[_int]
    capaciteSucre: Optional[_int]
    capaciteSpoon: Optional[_int]


class distributeurCreateWithoutRelationsInput(distributeurOptionalCreateWithoutRelationsInput):
    """Required arguments to the distributeur create method, without relations"""
    identifiant: _str


class distributeurCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'distributeurCreateWithoutRelationsInput'
    connect: 'distributeurWhereUniqueInput'


class distributeurCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['distributeurCreateWithoutRelationsInput', List['distributeurCreateWithoutRelationsInput']]
    connect: Union['distributeurWhereUniqueInput', List['distributeurWhereUniqueInput']]


_distributeurWhereUnique_id_Input = TypedDict(
    '_distributeurWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_distributeurWhereUnique_identifiant_Input = TypedDict(
    '_distributeurWhereUnique_identifiant_Input',
    {
        'identifiant': '_str',
    },
    total=True
)

distributeurWhereUniqueInput = Union[
    '_distributeurWhereUnique_id_Input',
    '_distributeurWhereUnique_identifiant_Input',
]


class distributeurUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    identifiant: _str
    capaciteGoblet: Optional[Union[AtomicIntInput, _int]]
    capaciteSucre: Optional[Union[AtomicIntInput, _int]]
    capaciteSpoon: Optional[Union[AtomicIntInput, _int]]
    distributeurRecette: 'distributeurRecetteUpdateManyWithoutRelationsInput'
    facture: 'factureUpdateManyWithoutRelationsInput'
    pack: 'packUpdateOneWithoutRelationsInput'
    sensors: 'sensorsUpdateManyWithoutRelationsInput'


class distributeurUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    identifiant: _str
    capaciteGoblet: Optional[Union[AtomicIntInput, _int]]
    capaciteSucre: Optional[Union[AtomicIntInput, _int]]
    capaciteSpoon: Optional[Union[AtomicIntInput, _int]]


class distributeurUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['distributeurCreateWithoutRelationsInput']
    connect: List['distributeurWhereUniqueInput']
    set: List['distributeurWhereUniqueInput']
    disconnect: List['distributeurWhereUniqueInput']
    delete: List['distributeurWhereUniqueInput']

    # TODO
    # update: List['distributeurUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['distributeurUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['distributeurScalarWhereInput']
    # upsert: List['distributeurUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['distributeurCreateOrConnectWithoutRelationsInput']


class distributeurUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'distributeurCreateWithoutRelationsInput'
    connect: 'distributeurWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'distributeurUpdateInput'
    # upsert: 'distributeurUpsertWithoutRelationsInput'
    # connectOrCreate: 'distributeurCreateOrConnectWithoutRelationsInput'


class distributeurUpsertInput(TypedDict):
    create: 'distributeurCreateInput'
    update: 'distributeurUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_distributeur_id_OrderByInput = TypedDict(
    '_distributeur_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_distributeur_identifiant_OrderByInput = TypedDict(
    '_distributeur_identifiant_OrderByInput',
    {
        'identifiant': 'SortOrder',
    },
    total=True
)

_distributeur_capaciteGoblet_OrderByInput = TypedDict(
    '_distributeur_capaciteGoblet_OrderByInput',
    {
        'capaciteGoblet': 'SortOrder',
    },
    total=True
)

_distributeur_capaciteSucre_OrderByInput = TypedDict(
    '_distributeur_capaciteSucre_OrderByInput',
    {
        'capaciteSucre': 'SortOrder',
    },
    total=True
)

_distributeur_capaciteSpoon_OrderByInput = TypedDict(
    '_distributeur_capaciteSpoon_OrderByInput',
    {
        'capaciteSpoon': 'SortOrder',
    },
    total=True
)

distributeurOrderByInput = Union[
    '_distributeur_id_OrderByInput',
    '_distributeur_identifiant_OrderByInput',
    '_distributeur_capaciteGoblet_OrderByInput',
    '_distributeur_capaciteSucre_OrderByInput',
    '_distributeur_capaciteSpoon_OrderByInput',
]



# recursive distributeur types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

distributeurRelationFilter = TypedDict(
    'distributeurRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class distributeurListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class distributeurInclude(TypedDict, total=False):
    """distributeur relational arguments"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeur']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeur']
    pack: Union[bool, 'packArgsFromdistributeur']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeur']


    

class annonceurIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""


class annonceurIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""


class annonceurIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""


class annonceurIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""


class annonceurIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class annonceurArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyannonceurArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""


class categorieIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""


class categorieIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""


class categorieIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""


class categorieIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class categorieArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManycategorieArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecursive1']


class categoryclaimsIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecursive2']


class categoryclaimsIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecursive3']


class categoryclaimsIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecursive4']


class categoryclaimsIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class categoryclaimsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManycategoryclaimsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecursive1']


class categoryrecetteIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecursive2']


class categoryrecetteIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecursive3']


class categoryrecetteIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecursive4']


class categoryrecetteIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class categoryrecetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManycategoryrecetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive1']


class categorysensorsIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive2']


class categorysensorsIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive3']


class categorysensorsIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive4']


class categorysensorsIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class categorysensorsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManycategorysensorsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive1']


class commandeIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive2']


class commandeIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive3']


class commandeIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive4']


class commandeIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class commandeArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManycommandeArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive1']
    pack: Union[bool, 'packArgsFromdistributeurRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive1']


class distributeurIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive2']
    pack: Union[bool, 'packArgsFromdistributeurRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive2']


class distributeurIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive3']
    pack: Union[bool, 'packArgsFromdistributeurRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive3']


class distributeurIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive4']
    pack: Union[bool, 'packArgsFromdistributeurRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecursive4']


class distributeurIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class distributeurArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManydistributeurArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive1']


class distributeurRecetteIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive2']


class distributeurRecetteIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive3']


class distributeurRecetteIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive4']


class distributeurRecetteIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class distributeurRecetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManydistributeurRecetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecursive1']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive1']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecursive1']


class entrepiseIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecursive2']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive2']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecursive2']


class entrepiseIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecursive3']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive3']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecursive3']


class entrepiseIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecursive4']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive4']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecursive4']


class entrepiseIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class entrepiseArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyentrepiseArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecursive1']


class factureIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecursive2']


class factureIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecursive3']


class factureIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecursive4']


class factureIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class factureArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyfactureArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive1']


class infopaimentIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive2']


class infopaimentIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive3']


class infopaimentIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecursive4']


class infopaimentIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class infopaimentArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyinfopaimentArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive1']


class ingredientIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive2']


class ingredientIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive3']


class ingredientIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive4']


class ingredientIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class ingredientArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyingredientArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive1']


class packIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive2']


class packIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive3']


class packIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive4']


class packIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class packArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManypackArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive1']


class publiciteIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive2']


class publiciteIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive3']


class publiciteIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive4']


class publiciteIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class publiciteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManypubliciteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive1']


class recetteIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive2']


class recetteIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive3']


class recetteIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecursive4']


class recetteIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class recetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyrecetteArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive1']


class recetteingrIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive2']


class recetteingrIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive3']


class recetteingrIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecursive4']


class recetteingrIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class recetteingrArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyrecetteingrArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecursive1']


class reclamationIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecursive2']


class reclamationIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecursive3']


class reclamationIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecursive4']


class reclamationIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class reclamationArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyreclamationArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""


class roleIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""


class roleIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""


class roleIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""


class roleIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class roleArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyroleArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecursive1']


class sensorsIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecursive2']


class sensorsIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecursive3']


class sensorsIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecursive4']


class sensorsIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class sensorsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManysensorsArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive1']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecursive1']
    users: Union[bool, 'usersArgsFromdistributeurRecursive1']


class taskIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive2']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecursive2']
    users: Union[bool, 'usersArgsFromdistributeurRecursive2']


class taskIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive3']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecursive3']
    users: Union[bool, 'usersArgsFromdistributeurRecursive3']


class taskIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive4']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecursive4']
    users: Union[bool, 'usersArgsFromdistributeurRecursive4']


class taskIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class taskArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManytaskArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    users: Union[bool, 'usersArgsFromdistributeurRecursive1']


class tokensIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    users: Union[bool, 'usersArgsFromdistributeurRecursive2']


class tokensIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    users: Union[bool, 'usersArgsFromdistributeurRecursive3']


class tokensIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    users: Union[bool, 'usersArgsFromdistributeurRecursive4']


class tokensIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class tokensArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManytokensArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive1']


class typetaskIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive2']


class typetaskIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive3']


class typetaskIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive4']


class typetaskIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class typetaskArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManytypetaskArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromdistributeur(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive1']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive1']


class usersIncludeFromdistributeurRecursive1(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive2']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive2']


class usersIncludeFromdistributeurRecursive2(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive3']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive3']


class usersIncludeFromdistributeurRecursive3(TypedDict, total=False):
    """Relational arguments for distributeur"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecursive4']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecursive4']


class usersIncludeFromdistributeurRecursive4(TypedDict, total=False):
    """Relational arguments for distributeur"""

    

class usersArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    
    

class FindManyusersArgsFromdistributeur(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromdistributeurRecursive1(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromdistributeurRecursive2(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromdistributeurRecursive3(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromdistributeurRecursive4(TypedDict, total=False):
    """Arguments for distributeur"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManydistributeurArgs = FindManydistributeurArgsFromdistributeur
FindFirstdistributeurArgs = FindManydistributeurArgsFromdistributeur


    

class distributeurWhereInput(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    capaciteGoblet: Union[None, _int, 'types.IntFilter']
    capaciteSucre: Union[None, _int, 'types.IntFilter']
    capaciteSpoon: Union[None, _int, 'types.IntFilter']
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    facture: 'factureListRelationFilter'
    pack: 'packRelationFilter'
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurWhereInputRecursive1', List['distributeurWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['distributeurWhereInputRecursive1']
    OR: List['distributeurWhereInputRecursive1']
    NOT: List['distributeurWhereInputRecursive1']


class distributeurWhereInputRecursive1(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    capaciteGoblet: Union[None, _int, 'types.IntFilter']
    capaciteSucre: Union[None, _int, 'types.IntFilter']
    capaciteSpoon: Union[None, _int, 'types.IntFilter']
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    facture: 'factureListRelationFilter'
    pack: 'packRelationFilter'
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurWhereInputRecursive2', List['distributeurWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['distributeurWhereInputRecursive2']
    OR: List['distributeurWhereInputRecursive2']
    NOT: List['distributeurWhereInputRecursive2']


class distributeurWhereInputRecursive2(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    capaciteGoblet: Union[None, _int, 'types.IntFilter']
    capaciteSucre: Union[None, _int, 'types.IntFilter']
    capaciteSpoon: Union[None, _int, 'types.IntFilter']
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    facture: 'factureListRelationFilter'
    pack: 'packRelationFilter'
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurWhereInputRecursive3', List['distributeurWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['distributeurWhereInputRecursive3']
    OR: List['distributeurWhereInputRecursive3']
    NOT: List['distributeurWhereInputRecursive3']


class distributeurWhereInputRecursive3(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    capaciteGoblet: Union[None, _int, 'types.IntFilter']
    capaciteSucre: Union[None, _int, 'types.IntFilter']
    capaciteSpoon: Union[None, _int, 'types.IntFilter']
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    facture: 'factureListRelationFilter'
    pack: 'packRelationFilter'
    sensors: 'sensorsListRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurWhereInputRecursive4', List['distributeurWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['distributeurWhereInputRecursive4']
    OR: List['distributeurWhereInputRecursive4']
    NOT: List['distributeurWhereInputRecursive4']


class distributeurWhereInputRecursive4(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    capaciteGoblet: Union[None, _int, 'types.IntFilter']
    capaciteSucre: Union[None, _int, 'types.IntFilter']
    capaciteSpoon: Union[None, _int, 'types.IntFilter']
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    facture: 'factureListRelationFilter'
    pack: 'packRelationFilter'
    sensors: 'sensorsListRelationFilter'



# aggregate distributeur types


    

class distributeurScalarWhereWithAggregatesInput(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    capaciteGoblet: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSucre: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSpoon: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['distributeurScalarWhereWithAggregatesInputRecursive1']
    OR: List['distributeurScalarWhereWithAggregatesInputRecursive1']
    NOT: List['distributeurScalarWhereWithAggregatesInputRecursive1']


class distributeurScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    capaciteGoblet: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSucre: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSpoon: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['distributeurScalarWhereWithAggregatesInputRecursive2']
    OR: List['distributeurScalarWhereWithAggregatesInputRecursive2']
    NOT: List['distributeurScalarWhereWithAggregatesInputRecursive2']


class distributeurScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    capaciteGoblet: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSucre: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSpoon: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['distributeurScalarWhereWithAggregatesInputRecursive3']
    OR: List['distributeurScalarWhereWithAggregatesInputRecursive3']
    NOT: List['distributeurScalarWhereWithAggregatesInputRecursive3']


class distributeurScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    capaciteGoblet: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSucre: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSpoon: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['distributeurScalarWhereWithAggregatesInputRecursive4']
    OR: List['distributeurScalarWhereWithAggregatesInputRecursive4']
    NOT: List['distributeurScalarWhereWithAggregatesInputRecursive4']


class distributeurScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """distributeur arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    capaciteGoblet: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSucre: Union[_int, 'types.IntWithAggregatesFilter']
    capaciteSpoon: Union[_int, 'types.IntWithAggregatesFilter']



class distributeurGroupByOutput(TypedDict, total=False):
    id: _int
    identifiant: _str
    capaciteGoblet: _int
    capaciteSucre: _int
    capaciteSpoon: _int
    _sum: 'distributeurSumAggregateOutput'
    _avg: 'distributeurAvgAggregateOutput'
    _min: 'distributeurMinAggregateOutput'
    _max: 'distributeurMaxAggregateOutput'
    _count: 'distributeurCountAggregateOutput'


class distributeurAvgAggregateOutput(TypedDict, total=False):
    """distributeur output for aggregating averages"""
    id: float
    capaciteGoblet: float
    capaciteSucre: float
    capaciteSpoon: float


class distributeurSumAggregateOutput(TypedDict, total=False):
    """distributeur output for aggregating sums"""
    id: _int
    capaciteGoblet: _int
    capaciteSucre: _int
    capaciteSpoon: _int


class distributeurScalarAggregateOutput(TypedDict, total=False):
    """distributeur output including scalar fields"""
    id: _int
    identifiant: _str
    capaciteGoblet: _int
    capaciteSucre: _int
    capaciteSpoon: _int


distributeurMinAggregateOutput = distributeurScalarAggregateOutput
distributeurMaxAggregateOutput = distributeurScalarAggregateOutput


class distributeurMaxAggregateInput(TypedDict, total=False):
    """distributeur input for aggregating by max"""
    id: bool
    identifiant: bool
    capaciteGoblet: bool
    capaciteSucre: bool
    capaciteSpoon: bool


class distributeurMinAggregateInput(TypedDict, total=False):
    """distributeur input for aggregating by min"""
    id: bool
    identifiant: bool
    capaciteGoblet: bool
    capaciteSucre: bool
    capaciteSpoon: bool


class distributeurNumberAggregateInput(TypedDict, total=False):
    """distributeur input for aggregating numbers"""
    id: bool
    capaciteGoblet: bool
    capaciteSucre: bool
    capaciteSpoon: bool


distributeurAvgAggregateInput = distributeurNumberAggregateInput
distributeurSumAggregateInput = distributeurNumberAggregateInput


distributeurCountAggregateInput = TypedDict(
    'distributeurCountAggregateInput',
    {
        'id': bool,
        'identifiant': bool,
        'capaciteGoblet': bool,
        'capaciteSucre': bool,
        'capaciteSpoon': bool,
        '_all': bool,
    },
    total=False,
)

distributeurCountAggregateOutput = TypedDict(
    'distributeurCountAggregateOutput',
    {
        'id': int,
        'identifiant': int,
        'capaciteGoblet': int,
        'capaciteSucre': int,
        'capaciteSpoon': int,
        '_all': int,
    },
    total=False,
)


distributeurKeys = Literal[
    'id',
    'identifiant',
    'capaciteGoblet',
    'capaciteSucre',
    'capaciteSpoon',
    'distributeurRecette',
    'facture',
    'pack',
    'sensors',
]
distributeurScalarFieldKeys = Literal[
    'id',
    'identifiant',
    'capaciteGoblet',
    'capaciteSucre',
    'capaciteSpoon',
]
distributeurScalarFieldKeysT = TypeVar('distributeurScalarFieldKeysT', bound=distributeurScalarFieldKeys)

distributeurRelationalFieldKeys = Literal[
        'distributeurRecette',
        'facture',
        'pack',
        'sensors',
    ]

# distributeurRecette types

class distributeurRecetteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the distributeurRecette create method"""
    idDistr: _int
    idRecette: _int
    price: decimal.Decimal
    distributeur: 'distributeurCreateNestedWithoutRelationsInput'
    recette: 'recetteCreateNestedWithoutRelationsInput'


class distributeurRecetteCreateInput(distributeurRecetteOptionalCreateInput):
    """Required arguments to the distributeurRecette create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class distributeurRecetteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the distributeurRecette create method, without relations"""
    idDistr: _int
    idRecette: _int
    price: decimal.Decimal


class distributeurRecetteCreateWithoutRelationsInput(distributeurRecetteOptionalCreateWithoutRelationsInput):
    """Required arguments to the distributeurRecette create method, without relations"""


class distributeurRecetteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'distributeurRecetteCreateWithoutRelationsInput'
    connect: 'distributeurRecetteWhereUniqueInput'


class distributeurRecetteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['distributeurRecetteCreateWithoutRelationsInput', List['distributeurRecetteCreateWithoutRelationsInput']]
    connect: Union['distributeurRecetteWhereUniqueInput', List['distributeurRecetteWhereUniqueInput']]


_distributeurRecetteCompoundPrimaryKeyInner = TypedDict(
    '_distributeurRecetteCompoundPrimaryKeyInner',
    {
        'idRecette': '_int',
        'idDistr': '_int',
    },
    total=True
)

_distributeurRecetteCompoundPrimaryKey = TypedDict(
    '_distributeurRecetteCompoundPrimaryKey',
    {
        'idRecette_idDistr': '_distributeurRecetteCompoundPrimaryKeyInner',
    },
    total=True
)

distributeurRecetteWhereUniqueInput = _distributeurRecetteCompoundPrimaryKey


class distributeurRecetteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    price: decimal.Decimal
    distributeur: 'distributeurUpdateOneWithoutRelationsInput'
    recette: 'recetteUpdateOneWithoutRelationsInput'


class distributeurRecetteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    price: decimal.Decimal


class distributeurRecetteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['distributeurRecetteCreateWithoutRelationsInput']
    connect: List['distributeurRecetteWhereUniqueInput']
    set: List['distributeurRecetteWhereUniqueInput']
    disconnect: List['distributeurRecetteWhereUniqueInput']
    delete: List['distributeurRecetteWhereUniqueInput']

    # TODO
    # update: List['distributeurRecetteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['distributeurRecetteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['distributeurRecetteScalarWhereInput']
    # upsert: List['distributeurRecetteUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['distributeurRecetteCreateOrConnectWithoutRelationsInput']


class distributeurRecetteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'distributeurRecetteCreateWithoutRelationsInput'
    connect: 'distributeurRecetteWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'distributeurRecetteUpdateInput'
    # upsert: 'distributeurRecetteUpsertWithoutRelationsInput'
    # connectOrCreate: 'distributeurRecetteCreateOrConnectWithoutRelationsInput'


class distributeurRecetteUpsertInput(TypedDict):
    create: 'distributeurRecetteCreateInput'
    update: 'distributeurRecetteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_distributeurRecette_idDistr_OrderByInput = TypedDict(
    '_distributeurRecette_idDistr_OrderByInput',
    {
        'idDistr': 'SortOrder',
    },
    total=True
)

_distributeurRecette_idRecette_OrderByInput = TypedDict(
    '_distributeurRecette_idRecette_OrderByInput',
    {
        'idRecette': 'SortOrder',
    },
    total=True
)

_distributeurRecette_price_OrderByInput = TypedDict(
    '_distributeurRecette_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

distributeurRecetteOrderByInput = Union[
    '_distributeurRecette_idDistr_OrderByInput',
    '_distributeurRecette_idRecette_OrderByInput',
    '_distributeurRecette_price_OrderByInput',
]



# recursive distributeurRecette types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

distributeurRecetteRelationFilter = TypedDict(
    'distributeurRecetteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class distributeurRecetteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class distributeurRecetteInclude(TypedDict, total=False):
    """distributeurRecette relational arguments"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecette']
    recette: Union[bool, 'recetteArgsFromdistributeurRecette']


    

class annonceurIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class annonceurIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class annonceurIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class annonceurIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class annonceurIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class annonceurArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyannonceurArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class categorieIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class categorieIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class categorieIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class categorieIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class categorieArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManycategorieArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecetteRecursive1']


class categoryclaimsIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecetteRecursive2']


class categoryclaimsIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecetteRecursive3']


class categoryclaimsIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromdistributeurRecetteRecursive4']


class categoryclaimsIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class categoryclaimsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManycategoryclaimsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecetteRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecetteRecursive1']


class categoryrecetteIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecetteRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecetteRecursive2']


class categoryrecetteIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecetteRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecetteRecursive3']


class categoryrecetteIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromdistributeurRecetteRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromdistributeurRecetteRecursive4']


class categoryrecetteIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class categoryrecetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManycategoryrecetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive1']


class categorysensorsIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive2']


class categorysensorsIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive3']


class categorysensorsIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive4']


class categorysensorsIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class categorysensorsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManycategorysensorsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive1']


class commandeIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive2']


class commandeIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive3']


class commandeIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive4']


class commandeIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class commandeArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManycommandeArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive1']
    pack: Union[bool, 'packArgsFromdistributeurRecetteRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive1']


class distributeurIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive2']
    pack: Union[bool, 'packArgsFromdistributeurRecetteRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive2']


class distributeurIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive3']
    pack: Union[bool, 'packArgsFromdistributeurRecetteRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive3']


class distributeurIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive4']
    pack: Union[bool, 'packArgsFromdistributeurRecetteRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromdistributeurRecetteRecursive4']


class distributeurIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class distributeurArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManydistributeurArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive1']


class distributeurRecetteIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive2']


class distributeurRecetteIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive3']


class distributeurRecetteIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive4']


class distributeurRecetteIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class distributeurRecetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManydistributeurRecetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecetteRecursive1']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive1']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecetteRecursive1']


class entrepiseIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecetteRecursive2']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive2']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecetteRecursive2']


class entrepiseIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecetteRecursive3']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive3']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecetteRecursive3']


class entrepiseIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    pack: Union[bool, 'FindManypackArgsFromdistributeurRecetteRecursive4']
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive4']
    users: Union[bool, 'FindManyusersArgsFromdistributeurRecetteRecursive4']


class entrepiseIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class entrepiseArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyentrepiseArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecetteRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecetteRecursive1']


class factureIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecetteRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecetteRecursive2']


class factureIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecetteRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecetteRecursive3']


class factureIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'commandeArgsFromdistributeurRecetteRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromdistributeurRecetteRecursive4']


class factureIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class factureArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyfactureArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive1']


class infopaimentIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive2']


class infopaimentIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive3']


class infopaimentIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    facture: Union[bool, 'FindManyfactureArgsFromdistributeurRecetteRecursive4']


class infopaimentIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class infopaimentArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyinfopaimentArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive1']


class ingredientIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive2']


class ingredientIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive3']


class ingredientIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive4']


class ingredientIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class ingredientArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyingredientArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive1']


class packIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive2']


class packIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive3']


class packIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive4']


class packIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class packArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManypackArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive1']


class publiciteIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive2']


class publiciteIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive3']


class publiciteIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive4']


class publiciteIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class publiciteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManypubliciteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive1']


class recetteIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive2']


class recetteIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive3']


class recetteIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    commande: Union[bool, 'FindManycommandeArgsFromdistributeurRecetteRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromdistributeurRecetteRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromdistributeurRecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromdistributeurRecetteRecursive4']


class recetteIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class recetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyrecetteArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive1']


class recetteingrIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive2']


class recetteingrIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive3']


class recetteingrIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    ingredient: Union[bool, 'ingredientArgsFromdistributeurRecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromdistributeurRecetteRecursive4']


class recetteingrIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class recetteingrArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyrecetteingrArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecetteRecursive1']


class reclamationIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecetteRecursive2']


class reclamationIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecetteRecursive3']


class reclamationIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromdistributeurRecetteRecursive4']


class reclamationIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class reclamationArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyreclamationArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class roleIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class roleIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class roleIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""


class roleIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class roleArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyroleArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecetteRecursive1']


class sensorsIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecetteRecursive2']


class sensorsIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecetteRecursive3']


class sensorsIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    distributeur: Union[bool, 'distributeurArgsFromdistributeurRecetteRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromdistributeurRecetteRecursive4']


class sensorsIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class sensorsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManysensorsArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive1']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecetteRecursive1']
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive1']


class taskIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive2']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecetteRecursive2']
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive2']


class taskIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive3']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecetteRecursive3']
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive3']


class taskIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive4']
    typetask: Union[bool, 'typetaskArgsFromdistributeurRecetteRecursive4']
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive4']


class taskIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class taskArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManytaskArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive1']


class tokensIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive2']


class tokensIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive3']


class tokensIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    users: Union[bool, 'usersArgsFromdistributeurRecetteRecursive4']


class tokensIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class tokensArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManytokensArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive1']


class typetaskIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive2']


class typetaskIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive3']


class typetaskIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive4']


class typetaskIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class typetaskArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManytypetaskArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromdistributeurRecette(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive1']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive1']


class usersIncludeFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive2']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive2']


class usersIncludeFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive3']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive3']


class usersIncludeFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""
    task: Union[bool, 'FindManytaskArgsFromdistributeurRecetteRecursive4']
    tokens: Union[bool, 'tokensArgsFromdistributeurRecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromdistributeurRecetteRecursive4']


class usersIncludeFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Relational arguments for distributeurRecette"""

    

class usersArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    
    

class FindManyusersArgsFromdistributeurRecette(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromdistributeurRecetteRecursive1(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromdistributeurRecetteRecursive2(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromdistributeurRecetteRecursive3(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromdistributeurRecetteRecursive4(TypedDict, total=False):
    """Arguments for distributeurRecette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManydistributeurRecetteArgs = FindManydistributeurRecetteArgsFromdistributeurRecette
FindFirstdistributeurRecetteArgs = FindManydistributeurRecetteArgsFromdistributeurRecette


    

class distributeurRecetteWhereInput(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    distributeur: 'distributeurRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurRecetteWhereInputRecursive1', List['distributeurRecetteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['distributeurRecetteWhereInputRecursive1']
    OR: List['distributeurRecetteWhereInputRecursive1']
    NOT: List['distributeurRecetteWhereInputRecursive1']


class distributeurRecetteWhereInputRecursive1(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    distributeur: 'distributeurRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurRecetteWhereInputRecursive2', List['distributeurRecetteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['distributeurRecetteWhereInputRecursive2']
    OR: List['distributeurRecetteWhereInputRecursive2']
    NOT: List['distributeurRecetteWhereInputRecursive2']


class distributeurRecetteWhereInputRecursive2(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    distributeur: 'distributeurRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurRecetteWhereInputRecursive3', List['distributeurRecetteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['distributeurRecetteWhereInputRecursive3']
    OR: List['distributeurRecetteWhereInputRecursive3']
    NOT: List['distributeurRecetteWhereInputRecursive3']


class distributeurRecetteWhereInputRecursive3(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    distributeur: 'distributeurRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['distributeurRecetteWhereInputRecursive4', List['distributeurRecetteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['distributeurRecetteWhereInputRecursive4']
    OR: List['distributeurRecetteWhereInputRecursive4']
    NOT: List['distributeurRecetteWhereInputRecursive4']


class distributeurRecetteWhereInputRecursive4(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idRecette: Union[_int, 'types.IntFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    distributeur: 'distributeurRelationFilter'
    recette: 'recetteRelationFilter'



# aggregate distributeurRecette types


    

class distributeurRecetteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']

    AND: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive1']
    OR: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive1']


class distributeurRecetteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']

    AND: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive2']
    OR: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive2']


class distributeurRecetteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']

    AND: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive3']
    OR: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive3']


class distributeurRecetteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']

    AND: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive4']
    OR: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['distributeurRecetteScalarWhereWithAggregatesInputRecursive4']


class distributeurRecetteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """distributeurRecette arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']



class distributeurRecetteGroupByOutput(TypedDict, total=False):
    idDistr: _int
    idRecette: _int
    price: decimal.Decimal
    _sum: 'distributeurRecetteSumAggregateOutput'
    _avg: 'distributeurRecetteAvgAggregateOutput'
    _min: 'distributeurRecetteMinAggregateOutput'
    _max: 'distributeurRecetteMaxAggregateOutput'
    _count: 'distributeurRecetteCountAggregateOutput'


class distributeurRecetteAvgAggregateOutput(TypedDict, total=False):
    """distributeurRecette output for aggregating averages"""
    idDistr: float
    idRecette: float


class distributeurRecetteSumAggregateOutput(TypedDict, total=False):
    """distributeurRecette output for aggregating sums"""
    idDistr: _int
    idRecette: _int


class distributeurRecetteScalarAggregateOutput(TypedDict, total=False):
    """distributeurRecette output including scalar fields"""
    idDistr: _int
    idRecette: _int
    price: decimal.Decimal


distributeurRecetteMinAggregateOutput = distributeurRecetteScalarAggregateOutput
distributeurRecetteMaxAggregateOutput = distributeurRecetteScalarAggregateOutput


class distributeurRecetteMaxAggregateInput(TypedDict, total=False):
    """distributeurRecette input for aggregating by max"""
    idDistr: bool
    idRecette: bool
    price: bool


class distributeurRecetteMinAggregateInput(TypedDict, total=False):
    """distributeurRecette input for aggregating by min"""
    idDistr: bool
    idRecette: bool
    price: bool


class distributeurRecetteNumberAggregateInput(TypedDict, total=False):
    """distributeurRecette input for aggregating numbers"""
    idDistr: bool
    idRecette: bool


distributeurRecetteAvgAggregateInput = distributeurRecetteNumberAggregateInput
distributeurRecetteSumAggregateInput = distributeurRecetteNumberAggregateInput


distributeurRecetteCountAggregateInput = TypedDict(
    'distributeurRecetteCountAggregateInput',
    {
        'idDistr': bool,
        'idRecette': bool,
        'price': bool,
        '_all': bool,
    },
    total=False,
)

distributeurRecetteCountAggregateOutput = TypedDict(
    'distributeurRecetteCountAggregateOutput',
    {
        'idDistr': int,
        'idRecette': int,
        'price': int,
        '_all': int,
    },
    total=False,
)


distributeurRecetteKeys = Literal[
    'idDistr',
    'idRecette',
    'price',
    'distributeur',
    'recette',
]
distributeurRecetteScalarFieldKeys = Literal[
    'idDistr',
    'idRecette',
    'price',
]
distributeurRecetteScalarFieldKeysT = TypeVar('distributeurRecetteScalarFieldKeysT', bound=distributeurRecetteScalarFieldKeys)

distributeurRecetteRelationalFieldKeys = Literal[
        'distributeur',
        'recette',
    ]

# entrepise types

class entrepiseOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the entrepise create method"""
    id: _int
    nom: Optional[_str]
    adresse: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    link: Optional[_str]
    pack: 'packCreateManyNestedWithoutRelationsInput'
    task: 'taskCreateManyNestedWithoutRelationsInput'
    users: 'usersCreateManyNestedWithoutRelationsInput'


class entrepiseCreateInput(entrepiseOptionalCreateInput):
    """Required arguments to the entrepise create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class entrepiseOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the entrepise create method, without relations"""
    id: _int
    nom: Optional[_str]
    adresse: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    link: Optional[_str]


class entrepiseCreateWithoutRelationsInput(entrepiseOptionalCreateWithoutRelationsInput):
    """Required arguments to the entrepise create method, without relations"""


class entrepiseCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'entrepiseCreateWithoutRelationsInput'
    connect: 'entrepiseWhereUniqueInput'


class entrepiseCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['entrepiseCreateWithoutRelationsInput', List['entrepiseCreateWithoutRelationsInput']]
    connect: Union['entrepiseWhereUniqueInput', List['entrepiseWhereUniqueInput']]


_entrepiseWhereUnique_id_Input = TypedDict(
    '_entrepiseWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

entrepiseWhereUniqueInput = _entrepiseWhereUnique_id_Input


class entrepiseUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    adresse: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    link: Optional[_str]
    pack: 'packUpdateManyWithoutRelationsInput'
    task: 'taskUpdateManyWithoutRelationsInput'
    users: 'usersUpdateManyWithoutRelationsInput'


class entrepiseUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    adresse: Optional[_str]
    mail: Optional[_str]
    tel: Optional[_str]
    link: Optional[_str]


class entrepiseUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['entrepiseCreateWithoutRelationsInput']
    connect: List['entrepiseWhereUniqueInput']
    set: List['entrepiseWhereUniqueInput']
    disconnect: List['entrepiseWhereUniqueInput']
    delete: List['entrepiseWhereUniqueInput']

    # TODO
    # update: List['entrepiseUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['entrepiseUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['entrepiseScalarWhereInput']
    # upsert: List['entrepiseUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['entrepiseCreateOrConnectWithoutRelationsInput']


class entrepiseUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'entrepiseCreateWithoutRelationsInput'
    connect: 'entrepiseWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'entrepiseUpdateInput'
    # upsert: 'entrepiseUpsertWithoutRelationsInput'
    # connectOrCreate: 'entrepiseCreateOrConnectWithoutRelationsInput'


class entrepiseUpsertInput(TypedDict):
    create: 'entrepiseCreateInput'
    update: 'entrepiseUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_entrepise_id_OrderByInput = TypedDict(
    '_entrepise_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_entrepise_nom_OrderByInput = TypedDict(
    '_entrepise_nom_OrderByInput',
    {
        'nom': 'SortOrder',
    },
    total=True
)

_entrepise_adresse_OrderByInput = TypedDict(
    '_entrepise_adresse_OrderByInput',
    {
        'adresse': 'SortOrder',
    },
    total=True
)

_entrepise_mail_OrderByInput = TypedDict(
    '_entrepise_mail_OrderByInput',
    {
        'mail': 'SortOrder',
    },
    total=True
)

_entrepise_tel_OrderByInput = TypedDict(
    '_entrepise_tel_OrderByInput',
    {
        'tel': 'SortOrder',
    },
    total=True
)

_entrepise_link_OrderByInput = TypedDict(
    '_entrepise_link_OrderByInput',
    {
        'link': 'SortOrder',
    },
    total=True
)

entrepiseOrderByInput = Union[
    '_entrepise_id_OrderByInput',
    '_entrepise_nom_OrderByInput',
    '_entrepise_adresse_OrderByInput',
    '_entrepise_mail_OrderByInput',
    '_entrepise_tel_OrderByInput',
    '_entrepise_link_OrderByInput',
]



# recursive entrepise types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

entrepiseRelationFilter = TypedDict(
    'entrepiseRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class entrepiseListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class entrepiseInclude(TypedDict, total=False):
    """entrepise relational arguments"""
    pack: Union[bool, 'FindManypackArgsFromentrepise']
    task: Union[bool, 'FindManytaskArgsFromentrepise']
    users: Union[bool, 'FindManyusersArgsFromentrepise']


    

class annonceurIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""


class annonceurIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""


class annonceurIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""


class annonceurIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""


class annonceurIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class annonceurArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyannonceurArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""


class categorieIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""


class categorieIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""


class categorieIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""


class categorieIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class categorieArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManycategorieArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromentrepiseRecursive1']


class categoryclaimsIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromentrepiseRecursive2']


class categoryclaimsIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromentrepiseRecursive3']


class categoryclaimsIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromentrepiseRecursive4']


class categoryclaimsIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class categoryclaimsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManycategoryclaimsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    publicite: Union[bool, 'FindManypubliciteArgsFromentrepiseRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromentrepiseRecursive1']


class categoryrecetteIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    publicite: Union[bool, 'FindManypubliciteArgsFromentrepiseRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromentrepiseRecursive2']


class categoryrecetteIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    publicite: Union[bool, 'FindManypubliciteArgsFromentrepiseRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromentrepiseRecursive3']


class categoryrecetteIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    publicite: Union[bool, 'FindManypubliciteArgsFromentrepiseRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromentrepiseRecursive4']


class categoryrecetteIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class categoryrecetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManycategoryrecetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive1']


class categorysensorsIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive2']


class categorysensorsIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive3']


class categorysensorsIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive4']


class categorysensorsIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class categorysensorsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManycategorysensorsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive1']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive1']


class commandeIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive2']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive2']


class commandeIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive3']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive3']


class commandeIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive4']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive4']


class commandeIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class commandeArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManycommandeArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive1']
    pack: Union[bool, 'packArgsFromentrepiseRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive1']


class distributeurIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive2']
    pack: Union[bool, 'packArgsFromentrepiseRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive2']


class distributeurIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive3']
    pack: Union[bool, 'packArgsFromentrepiseRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive3']


class distributeurIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive4']
    pack: Union[bool, 'packArgsFromentrepiseRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromentrepiseRecursive4']


class distributeurIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class distributeurArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManydistributeurArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive1']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive1']


class distributeurRecetteIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive2']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive2']


class distributeurRecetteIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive3']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive3']


class distributeurRecetteIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive4']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive4']


class distributeurRecetteIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class distributeurRecetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManydistributeurRecetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    pack: Union[bool, 'FindManypackArgsFromentrepiseRecursive1']
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive1']
    users: Union[bool, 'FindManyusersArgsFromentrepiseRecursive1']


class entrepiseIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    pack: Union[bool, 'FindManypackArgsFromentrepiseRecursive2']
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive2']
    users: Union[bool, 'FindManyusersArgsFromentrepiseRecursive2']


class entrepiseIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    pack: Union[bool, 'FindManypackArgsFromentrepiseRecursive3']
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive3']
    users: Union[bool, 'FindManyusersArgsFromentrepiseRecursive3']


class entrepiseIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    pack: Union[bool, 'FindManypackArgsFromentrepiseRecursive4']
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive4']
    users: Union[bool, 'FindManyusersArgsFromentrepiseRecursive4']


class entrepiseIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class entrepiseArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyentrepiseArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'commandeArgsFromentrepiseRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromentrepiseRecursive1']


class factureIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'commandeArgsFromentrepiseRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromentrepiseRecursive2']


class factureIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'commandeArgsFromentrepiseRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromentrepiseRecursive3']


class factureIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'commandeArgsFromentrepiseRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromentrepiseRecursive4']


class factureIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class factureArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyfactureArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive1']


class infopaimentIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive2']


class infopaimentIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive3']


class infopaimentIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    facture: Union[bool, 'FindManyfactureArgsFromentrepiseRecursive4']


class infopaimentIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class infopaimentArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyinfopaimentArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive1']


class ingredientIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive2']


class ingredientIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive3']


class ingredientIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive4']


class ingredientIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class ingredientArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyingredientArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive1']


class packIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive2']


class packIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive3']


class packIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive4']


class packIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class packArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManypackArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive1']


class publiciteIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive2']


class publiciteIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive3']


class publiciteIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive4']


class publiciteIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class publiciteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManypubliciteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive1']


class recetteIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive2']


class recetteIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive3']


class recetteIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    commande: Union[bool, 'FindManycommandeArgsFromentrepiseRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromentrepiseRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromentrepiseRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromentrepiseRecursive4']


class recetteIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class recetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyrecetteArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive1']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive1']


class recetteingrIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive2']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive2']


class recetteingrIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive3']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive3']


class recetteingrIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    ingredient: Union[bool, 'ingredientArgsFromentrepiseRecursive4']
    recette: Union[bool, 'recetteArgsFromentrepiseRecursive4']


class recetteingrIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class recetteingrArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyrecetteingrArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromentrepiseRecursive1']


class reclamationIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromentrepiseRecursive2']


class reclamationIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromentrepiseRecursive3']


class reclamationIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromentrepiseRecursive4']


class reclamationIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class reclamationArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyreclamationArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""


class roleIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""


class roleIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""


class roleIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""


class roleIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class roleArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyroleArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromentrepiseRecursive1']


class sensorsIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromentrepiseRecursive2']


class sensorsIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromentrepiseRecursive3']


class sensorsIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    distributeur: Union[bool, 'distributeurArgsFromentrepiseRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromentrepiseRecursive4']


class sensorsIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class sensorsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManysensorsArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive1']
    typetask: Union[bool, 'typetaskArgsFromentrepiseRecursive1']
    users: Union[bool, 'usersArgsFromentrepiseRecursive1']


class taskIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive2']
    typetask: Union[bool, 'typetaskArgsFromentrepiseRecursive2']
    users: Union[bool, 'usersArgsFromentrepiseRecursive2']


class taskIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive3']
    typetask: Union[bool, 'typetaskArgsFromentrepiseRecursive3']
    users: Union[bool, 'usersArgsFromentrepiseRecursive3']


class taskIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive4']
    typetask: Union[bool, 'typetaskArgsFromentrepiseRecursive4']
    users: Union[bool, 'usersArgsFromentrepiseRecursive4']


class taskIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class taskArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManytaskArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    users: Union[bool, 'usersArgsFromentrepiseRecursive1']


class tokensIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    users: Union[bool, 'usersArgsFromentrepiseRecursive2']


class tokensIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    users: Union[bool, 'usersArgsFromentrepiseRecursive3']


class tokensIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    users: Union[bool, 'usersArgsFromentrepiseRecursive4']


class tokensIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class tokensArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManytokensArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive1']


class typetaskIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive2']


class typetaskIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive3']


class typetaskIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive4']


class typetaskIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class typetaskArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManytypetaskArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromentrepise(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive1']
    tokens: Union[bool, 'tokensArgsFromentrepiseRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive1']


class usersIncludeFromentrepiseRecursive1(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive2']
    tokens: Union[bool, 'tokensArgsFromentrepiseRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive2']


class usersIncludeFromentrepiseRecursive2(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive3']
    tokens: Union[bool, 'tokensArgsFromentrepiseRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive3']


class usersIncludeFromentrepiseRecursive3(TypedDict, total=False):
    """Relational arguments for entrepise"""
    task: Union[bool, 'FindManytaskArgsFromentrepiseRecursive4']
    tokens: Union[bool, 'tokensArgsFromentrepiseRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromentrepiseRecursive4']


class usersIncludeFromentrepiseRecursive4(TypedDict, total=False):
    """Relational arguments for entrepise"""

    

class usersArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    
    

class FindManyusersArgsFromentrepise(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromentrepiseRecursive1(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromentrepiseRecursive2(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromentrepiseRecursive3(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromentrepiseRecursive4(TypedDict, total=False):
    """Arguments for entrepise"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyentrepiseArgs = FindManyentrepiseArgsFromentrepise
FindFirstentrepiseArgs = FindManyentrepiseArgsFromentrepise


    

class entrepiseWhereInput(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    adresse: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    link: Union[None, _str, 'types.StringFilter']
    pack: 'packListRelationFilter'
    task: 'taskListRelationFilter'
    users: 'usersListRelationFilter'

    # should be noted that AND and NOT should be Union['entrepiseWhereInputRecursive1', List['entrepiseWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['entrepiseWhereInputRecursive1']
    OR: List['entrepiseWhereInputRecursive1']
    NOT: List['entrepiseWhereInputRecursive1']


class entrepiseWhereInputRecursive1(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    adresse: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    link: Union[None, _str, 'types.StringFilter']
    pack: 'packListRelationFilter'
    task: 'taskListRelationFilter'
    users: 'usersListRelationFilter'

    # should be noted that AND and NOT should be Union['entrepiseWhereInputRecursive2', List['entrepiseWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['entrepiseWhereInputRecursive2']
    OR: List['entrepiseWhereInputRecursive2']
    NOT: List['entrepiseWhereInputRecursive2']


class entrepiseWhereInputRecursive2(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    adresse: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    link: Union[None, _str, 'types.StringFilter']
    pack: 'packListRelationFilter'
    task: 'taskListRelationFilter'
    users: 'usersListRelationFilter'

    # should be noted that AND and NOT should be Union['entrepiseWhereInputRecursive3', List['entrepiseWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['entrepiseWhereInputRecursive3']
    OR: List['entrepiseWhereInputRecursive3']
    NOT: List['entrepiseWhereInputRecursive3']


class entrepiseWhereInputRecursive3(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    adresse: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    link: Union[None, _str, 'types.StringFilter']
    pack: 'packListRelationFilter'
    task: 'taskListRelationFilter'
    users: 'usersListRelationFilter'

    # should be noted that AND and NOT should be Union['entrepiseWhereInputRecursive4', List['entrepiseWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['entrepiseWhereInputRecursive4']
    OR: List['entrepiseWhereInputRecursive4']
    NOT: List['entrepiseWhereInputRecursive4']


class entrepiseWhereInputRecursive4(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    adresse: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    link: Union[None, _str, 'types.StringFilter']
    pack: 'packListRelationFilter'
    task: 'taskListRelationFilter'
    users: 'usersListRelationFilter'



# aggregate entrepise types


    

class entrepiseScalarWhereWithAggregatesInput(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    adresse: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['entrepiseScalarWhereWithAggregatesInputRecursive1']
    OR: List['entrepiseScalarWhereWithAggregatesInputRecursive1']
    NOT: List['entrepiseScalarWhereWithAggregatesInputRecursive1']


class entrepiseScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    adresse: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['entrepiseScalarWhereWithAggregatesInputRecursive2']
    OR: List['entrepiseScalarWhereWithAggregatesInputRecursive2']
    NOT: List['entrepiseScalarWhereWithAggregatesInputRecursive2']


class entrepiseScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    adresse: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['entrepiseScalarWhereWithAggregatesInputRecursive3']
    OR: List['entrepiseScalarWhereWithAggregatesInputRecursive3']
    NOT: List['entrepiseScalarWhereWithAggregatesInputRecursive3']


class entrepiseScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    adresse: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['entrepiseScalarWhereWithAggregatesInputRecursive4']
    OR: List['entrepiseScalarWhereWithAggregatesInputRecursive4']
    NOT: List['entrepiseScalarWhereWithAggregatesInputRecursive4']


class entrepiseScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """entrepise arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    adresse: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']



class entrepiseGroupByOutput(TypedDict, total=False):
    id: _int
    nom: _str
    adresse: _str
    mail: _str
    tel: _str
    link: _str
    _sum: 'entrepiseSumAggregateOutput'
    _avg: 'entrepiseAvgAggregateOutput'
    _min: 'entrepiseMinAggregateOutput'
    _max: 'entrepiseMaxAggregateOutput'
    _count: 'entrepiseCountAggregateOutput'


class entrepiseAvgAggregateOutput(TypedDict, total=False):
    """entrepise output for aggregating averages"""
    id: float


class entrepiseSumAggregateOutput(TypedDict, total=False):
    """entrepise output for aggregating sums"""
    id: _int


class entrepiseScalarAggregateOutput(TypedDict, total=False):
    """entrepise output including scalar fields"""
    id: _int
    nom: _str
    adresse: _str
    mail: _str
    tel: _str
    link: _str


entrepiseMinAggregateOutput = entrepiseScalarAggregateOutput
entrepiseMaxAggregateOutput = entrepiseScalarAggregateOutput


class entrepiseMaxAggregateInput(TypedDict, total=False):
    """entrepise input for aggregating by max"""
    id: bool
    nom: bool
    adresse: bool
    mail: bool
    tel: bool
    link: bool


class entrepiseMinAggregateInput(TypedDict, total=False):
    """entrepise input for aggregating by min"""
    id: bool
    nom: bool
    adresse: bool
    mail: bool
    tel: bool
    link: bool


class entrepiseNumberAggregateInput(TypedDict, total=False):
    """entrepise input for aggregating numbers"""
    id: bool


entrepiseAvgAggregateInput = entrepiseNumberAggregateInput
entrepiseSumAggregateInput = entrepiseNumberAggregateInput


entrepiseCountAggregateInput = TypedDict(
    'entrepiseCountAggregateInput',
    {
        'id': bool,
        'nom': bool,
        'adresse': bool,
        'mail': bool,
        'tel': bool,
        'link': bool,
        '_all': bool,
    },
    total=False,
)

entrepiseCountAggregateOutput = TypedDict(
    'entrepiseCountAggregateOutput',
    {
        'id': int,
        'nom': int,
        'adresse': int,
        'mail': int,
        'tel': int,
        'link': int,
        '_all': int,
    },
    total=False,
)


entrepiseKeys = Literal[
    'id',
    'nom',
    'adresse',
    'mail',
    'tel',
    'link',
    'pack',
    'task',
    'users',
]
entrepiseScalarFieldKeys = Literal[
    'id',
    'nom',
    'adresse',
    'mail',
    'tel',
    'link',
]
entrepiseScalarFieldKeysT = TypeVar('entrepiseScalarFieldKeysT', bound=entrepiseScalarFieldKeys)

entrepiseRelationalFieldKeys = Literal[
        'pack',
        'task',
        'users',
    ]

# facture types

class factureOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the facture create method"""
    id: _int
    idDistr: Optional[_int]
    idComm: Optional[_int]
    idInfoPaiment: Optional[_int]
    commande: 'commandeCreateNestedWithoutRelationsInput'
    distributeur: 'distributeurCreateNestedWithoutRelationsInput'
    infopaiment: 'infopaimentCreateNestedWithoutRelationsInput'


class factureCreateInput(factureOptionalCreateInput):
    """Required arguments to the facture create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class factureOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the facture create method, without relations"""
    id: _int
    idDistr: Optional[_int]
    idComm: Optional[_int]
    idInfoPaiment: Optional[_int]


class factureCreateWithoutRelationsInput(factureOptionalCreateWithoutRelationsInput):
    """Required arguments to the facture create method, without relations"""


class factureCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'factureCreateWithoutRelationsInput'
    connect: 'factureWhereUniqueInput'


class factureCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['factureCreateWithoutRelationsInput', List['factureCreateWithoutRelationsInput']]
    connect: Union['factureWhereUniqueInput', List['factureWhereUniqueInput']]


_factureWhereUnique_id_Input = TypedDict(
    '_factureWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

factureWhereUniqueInput = _factureWhereUnique_id_Input


class factureUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    commande: 'commandeUpdateOneWithoutRelationsInput'
    distributeur: 'distributeurUpdateOneWithoutRelationsInput'
    infopaiment: 'infopaimentUpdateOneWithoutRelationsInput'


class factureUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]


class factureUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['factureCreateWithoutRelationsInput']
    connect: List['factureWhereUniqueInput']
    set: List['factureWhereUniqueInput']
    disconnect: List['factureWhereUniqueInput']
    delete: List['factureWhereUniqueInput']

    # TODO
    # update: List['factureUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['factureUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['factureScalarWhereInput']
    # upsert: List['factureUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['factureCreateOrConnectWithoutRelationsInput']


class factureUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'factureCreateWithoutRelationsInput'
    connect: 'factureWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'factureUpdateInput'
    # upsert: 'factureUpsertWithoutRelationsInput'
    # connectOrCreate: 'factureCreateOrConnectWithoutRelationsInput'


class factureUpsertInput(TypedDict):
    create: 'factureCreateInput'
    update: 'factureUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_facture_id_OrderByInput = TypedDict(
    '_facture_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_facture_idDistr_OrderByInput = TypedDict(
    '_facture_idDistr_OrderByInput',
    {
        'idDistr': 'SortOrder',
    },
    total=True
)

_facture_idComm_OrderByInput = TypedDict(
    '_facture_idComm_OrderByInput',
    {
        'idComm': 'SortOrder',
    },
    total=True
)

_facture_idInfoPaiment_OrderByInput = TypedDict(
    '_facture_idInfoPaiment_OrderByInput',
    {
        'idInfoPaiment': 'SortOrder',
    },
    total=True
)

factureOrderByInput = Union[
    '_facture_id_OrderByInput',
    '_facture_idDistr_OrderByInput',
    '_facture_idComm_OrderByInput',
    '_facture_idInfoPaiment_OrderByInput',
]



# recursive facture types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

factureRelationFilter = TypedDict(
    'factureRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class factureListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class factureInclude(TypedDict, total=False):
    """facture relational arguments"""
    commande: Union[bool, 'commandeArgsFromfacture']
    distributeur: Union[bool, 'distributeurArgsFromfacture']
    infopaiment: Union[bool, 'infopaimentArgsFromfacture']


    

class annonceurIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""


class annonceurIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""


class annonceurIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""


class annonceurIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""


class annonceurIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class annonceurArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyannonceurArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""


class categorieIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""


class categorieIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""


class categorieIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""


class categorieIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class categorieArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManycategorieArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromfactureRecursive1']


class categoryclaimsIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromfactureRecursive2']


class categoryclaimsIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromfactureRecursive3']


class categoryclaimsIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromfactureRecursive4']


class categoryclaimsIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class categoryclaimsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManycategoryclaimsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    publicite: Union[bool, 'FindManypubliciteArgsFromfactureRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromfactureRecursive1']


class categoryrecetteIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    publicite: Union[bool, 'FindManypubliciteArgsFromfactureRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromfactureRecursive2']


class categoryrecetteIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    publicite: Union[bool, 'FindManypubliciteArgsFromfactureRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromfactureRecursive3']


class categoryrecetteIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    publicite: Union[bool, 'FindManypubliciteArgsFromfactureRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromfactureRecursive4']


class categoryrecetteIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class categoryrecetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManycategoryrecetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive1']


class categorysensorsIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive2']


class categorysensorsIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive3']


class categorysensorsIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive4']


class categorysensorsIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class categorysensorsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManycategorysensorsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive1']
    recette: Union[bool, 'recetteArgsFromfactureRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive1']


class commandeIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive2']
    recette: Union[bool, 'recetteArgsFromfactureRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive2']


class commandeIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive3']
    recette: Union[bool, 'recetteArgsFromfactureRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive3']


class commandeIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive4']
    recette: Union[bool, 'recetteArgsFromfactureRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive4']


class commandeIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class commandeArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManycommandeArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive1']
    pack: Union[bool, 'packArgsFromfactureRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive1']


class distributeurIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive2']
    pack: Union[bool, 'packArgsFromfactureRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive2']


class distributeurIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive3']
    pack: Union[bool, 'packArgsFromfactureRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive3']


class distributeurIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive4']
    pack: Union[bool, 'packArgsFromfactureRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromfactureRecursive4']


class distributeurIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class distributeurArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManydistributeurArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive1']
    recette: Union[bool, 'recetteArgsFromfactureRecursive1']


class distributeurRecetteIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive2']
    recette: Union[bool, 'recetteArgsFromfactureRecursive2']


class distributeurRecetteIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive3']
    recette: Union[bool, 'recetteArgsFromfactureRecursive3']


class distributeurRecetteIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive4']
    recette: Union[bool, 'recetteArgsFromfactureRecursive4']


class distributeurRecetteIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class distributeurRecetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManydistributeurRecetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    pack: Union[bool, 'FindManypackArgsFromfactureRecursive1']
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive1']
    users: Union[bool, 'FindManyusersArgsFromfactureRecursive1']


class entrepiseIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    pack: Union[bool, 'FindManypackArgsFromfactureRecursive2']
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive2']
    users: Union[bool, 'FindManyusersArgsFromfactureRecursive2']


class entrepiseIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    pack: Union[bool, 'FindManypackArgsFromfactureRecursive3']
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive3']
    users: Union[bool, 'FindManyusersArgsFromfactureRecursive3']


class entrepiseIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    pack: Union[bool, 'FindManypackArgsFromfactureRecursive4']
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive4']
    users: Union[bool, 'FindManyusersArgsFromfactureRecursive4']


class entrepiseIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class entrepiseArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyentrepiseArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'commandeArgsFromfactureRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromfactureRecursive1']


class factureIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'commandeArgsFromfactureRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromfactureRecursive2']


class factureIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'commandeArgsFromfactureRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromfactureRecursive3']


class factureIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'commandeArgsFromfactureRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromfactureRecursive4']


class factureIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class factureArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyfactureArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive1']


class infopaimentIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive2']


class infopaimentIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive3']


class infopaimentIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    facture: Union[bool, 'FindManyfactureArgsFromfactureRecursive4']


class infopaimentIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class infopaimentArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyinfopaimentArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive1']


class ingredientIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive2']


class ingredientIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive3']


class ingredientIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive4']


class ingredientIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class ingredientArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyingredientArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive1']


class packIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive2']


class packIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive3']


class packIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive4']


class packIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class packArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManypackArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive1']


class publiciteIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive2']


class publiciteIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive3']


class publiciteIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive4']


class publiciteIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class publiciteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManypubliciteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive1']


class recetteIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive2']


class recetteIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive3']


class recetteIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    commande: Union[bool, 'FindManycommandeArgsFromfactureRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromfactureRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromfactureRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromfactureRecursive4']


class recetteIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class recetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyrecetteArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive1']
    recette: Union[bool, 'recetteArgsFromfactureRecursive1']


class recetteingrIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive2']
    recette: Union[bool, 'recetteArgsFromfactureRecursive2']


class recetteingrIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive3']
    recette: Union[bool, 'recetteArgsFromfactureRecursive3']


class recetteingrIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    ingredient: Union[bool, 'ingredientArgsFromfactureRecursive4']
    recette: Union[bool, 'recetteArgsFromfactureRecursive4']


class recetteingrIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class recetteingrArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyrecetteingrArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromfactureRecursive1']


class reclamationIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromfactureRecursive2']


class reclamationIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromfactureRecursive3']


class reclamationIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromfactureRecursive4']


class reclamationIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class reclamationArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyreclamationArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""


class roleIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""


class roleIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""


class roleIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""


class roleIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class roleArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyroleArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromfactureRecursive1']


class sensorsIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromfactureRecursive2']


class sensorsIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromfactureRecursive3']


class sensorsIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    distributeur: Union[bool, 'distributeurArgsFromfactureRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromfactureRecursive4']


class sensorsIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class sensorsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManysensorsArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive1']
    typetask: Union[bool, 'typetaskArgsFromfactureRecursive1']
    users: Union[bool, 'usersArgsFromfactureRecursive1']


class taskIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive2']
    typetask: Union[bool, 'typetaskArgsFromfactureRecursive2']
    users: Union[bool, 'usersArgsFromfactureRecursive2']


class taskIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive3']
    typetask: Union[bool, 'typetaskArgsFromfactureRecursive3']
    users: Union[bool, 'usersArgsFromfactureRecursive3']


class taskIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive4']
    typetask: Union[bool, 'typetaskArgsFromfactureRecursive4']
    users: Union[bool, 'usersArgsFromfactureRecursive4']


class taskIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class taskArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManytaskArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    users: Union[bool, 'usersArgsFromfactureRecursive1']


class tokensIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    users: Union[bool, 'usersArgsFromfactureRecursive2']


class tokensIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    users: Union[bool, 'usersArgsFromfactureRecursive3']


class tokensIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    users: Union[bool, 'usersArgsFromfactureRecursive4']


class tokensIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class tokensArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManytokensArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive1']


class typetaskIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive2']


class typetaskIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive3']


class typetaskIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive4']


class typetaskIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class typetaskArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManytypetaskArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromfacture(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive1']
    tokens: Union[bool, 'tokensArgsFromfactureRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive1']


class usersIncludeFromfactureRecursive1(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive2']
    tokens: Union[bool, 'tokensArgsFromfactureRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive2']


class usersIncludeFromfactureRecursive2(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive3']
    tokens: Union[bool, 'tokensArgsFromfactureRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive3']


class usersIncludeFromfactureRecursive3(TypedDict, total=False):
    """Relational arguments for facture"""
    task: Union[bool, 'FindManytaskArgsFromfactureRecursive4']
    tokens: Union[bool, 'tokensArgsFromfactureRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromfactureRecursive4']


class usersIncludeFromfactureRecursive4(TypedDict, total=False):
    """Relational arguments for facture"""

    

class usersArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    
    

class FindManyusersArgsFromfacture(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromfactureRecursive1(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromfactureRecursive2(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromfactureRecursive3(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromfactureRecursive4(TypedDict, total=False):
    """Arguments for facture"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyfactureArgs = FindManyfactureArgsFromfacture
FindFirstfactureArgs = FindManyfactureArgsFromfacture


    

class factureWhereInput(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[None, _int, 'types.IntFilter']
    idComm: Union[None, _int, 'types.IntFilter']
    idInfoPaiment: Union[None, _int, 'types.IntFilter']
    commande: 'commandeRelationFilter'
    distributeur: 'distributeurRelationFilter'
    infopaiment: 'infopaimentRelationFilter'

    # should be noted that AND and NOT should be Union['factureWhereInputRecursive1', List['factureWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['factureWhereInputRecursive1']
    OR: List['factureWhereInputRecursive1']
    NOT: List['factureWhereInputRecursive1']


class factureWhereInputRecursive1(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[None, _int, 'types.IntFilter']
    idComm: Union[None, _int, 'types.IntFilter']
    idInfoPaiment: Union[None, _int, 'types.IntFilter']
    commande: 'commandeRelationFilter'
    distributeur: 'distributeurRelationFilter'
    infopaiment: 'infopaimentRelationFilter'

    # should be noted that AND and NOT should be Union['factureWhereInputRecursive2', List['factureWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['factureWhereInputRecursive2']
    OR: List['factureWhereInputRecursive2']
    NOT: List['factureWhereInputRecursive2']


class factureWhereInputRecursive2(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[None, _int, 'types.IntFilter']
    idComm: Union[None, _int, 'types.IntFilter']
    idInfoPaiment: Union[None, _int, 'types.IntFilter']
    commande: 'commandeRelationFilter'
    distributeur: 'distributeurRelationFilter'
    infopaiment: 'infopaimentRelationFilter'

    # should be noted that AND and NOT should be Union['factureWhereInputRecursive3', List['factureWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['factureWhereInputRecursive3']
    OR: List['factureWhereInputRecursive3']
    NOT: List['factureWhereInputRecursive3']


class factureWhereInputRecursive3(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[None, _int, 'types.IntFilter']
    idComm: Union[None, _int, 'types.IntFilter']
    idInfoPaiment: Union[None, _int, 'types.IntFilter']
    commande: 'commandeRelationFilter'
    distributeur: 'distributeurRelationFilter'
    infopaiment: 'infopaimentRelationFilter'

    # should be noted that AND and NOT should be Union['factureWhereInputRecursive4', List['factureWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['factureWhereInputRecursive4']
    OR: List['factureWhereInputRecursive4']
    NOT: List['factureWhereInputRecursive4']


class factureWhereInputRecursive4(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[None, _int, 'types.IntFilter']
    idComm: Union[None, _int, 'types.IntFilter']
    idInfoPaiment: Union[None, _int, 'types.IntFilter']
    commande: 'commandeRelationFilter'
    distributeur: 'distributeurRelationFilter'
    infopaiment: 'infopaimentRelationFilter'



# aggregate facture types


    

class factureScalarWhereWithAggregatesInput(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idComm: Union[_int, 'types.IntWithAggregatesFilter']
    idInfoPaiment: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['factureScalarWhereWithAggregatesInputRecursive1']
    OR: List['factureScalarWhereWithAggregatesInputRecursive1']
    NOT: List['factureScalarWhereWithAggregatesInputRecursive1']


class factureScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idComm: Union[_int, 'types.IntWithAggregatesFilter']
    idInfoPaiment: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['factureScalarWhereWithAggregatesInputRecursive2']
    OR: List['factureScalarWhereWithAggregatesInputRecursive2']
    NOT: List['factureScalarWhereWithAggregatesInputRecursive2']


class factureScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idComm: Union[_int, 'types.IntWithAggregatesFilter']
    idInfoPaiment: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['factureScalarWhereWithAggregatesInputRecursive3']
    OR: List['factureScalarWhereWithAggregatesInputRecursive3']
    NOT: List['factureScalarWhereWithAggregatesInputRecursive3']


class factureScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idComm: Union[_int, 'types.IntWithAggregatesFilter']
    idInfoPaiment: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['factureScalarWhereWithAggregatesInputRecursive4']
    OR: List['factureScalarWhereWithAggregatesInputRecursive4']
    NOT: List['factureScalarWhereWithAggregatesInputRecursive4']


class factureScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """facture arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idComm: Union[_int, 'types.IntWithAggregatesFilter']
    idInfoPaiment: Union[_int, 'types.IntWithAggregatesFilter']



class factureGroupByOutput(TypedDict, total=False):
    id: _int
    idDistr: _int
    idComm: _int
    idInfoPaiment: _int
    _sum: 'factureSumAggregateOutput'
    _avg: 'factureAvgAggregateOutput'
    _min: 'factureMinAggregateOutput'
    _max: 'factureMaxAggregateOutput'
    _count: 'factureCountAggregateOutput'


class factureAvgAggregateOutput(TypedDict, total=False):
    """facture output for aggregating averages"""
    id: float
    idDistr: float
    idComm: float
    idInfoPaiment: float


class factureSumAggregateOutput(TypedDict, total=False):
    """facture output for aggregating sums"""
    id: _int
    idDistr: _int
    idComm: _int
    idInfoPaiment: _int


class factureScalarAggregateOutput(TypedDict, total=False):
    """facture output including scalar fields"""
    id: _int
    idDistr: _int
    idComm: _int
    idInfoPaiment: _int


factureMinAggregateOutput = factureScalarAggregateOutput
factureMaxAggregateOutput = factureScalarAggregateOutput


class factureMaxAggregateInput(TypedDict, total=False):
    """facture input for aggregating by max"""
    id: bool
    idDistr: bool
    idComm: bool
    idInfoPaiment: bool


class factureMinAggregateInput(TypedDict, total=False):
    """facture input for aggregating by min"""
    id: bool
    idDistr: bool
    idComm: bool
    idInfoPaiment: bool


class factureNumberAggregateInput(TypedDict, total=False):
    """facture input for aggregating numbers"""
    id: bool
    idDistr: bool
    idComm: bool
    idInfoPaiment: bool


factureAvgAggregateInput = factureNumberAggregateInput
factureSumAggregateInput = factureNumberAggregateInput


factureCountAggregateInput = TypedDict(
    'factureCountAggregateInput',
    {
        'id': bool,
        'idDistr': bool,
        'idComm': bool,
        'idInfoPaiment': bool,
        '_all': bool,
    },
    total=False,
)

factureCountAggregateOutput = TypedDict(
    'factureCountAggregateOutput',
    {
        'id': int,
        'idDistr': int,
        'idComm': int,
        'idInfoPaiment': int,
        '_all': int,
    },
    total=False,
)


factureKeys = Literal[
    'id',
    'idDistr',
    'idComm',
    'idInfoPaiment',
    'commande',
    'distributeur',
    'infopaiment',
]
factureScalarFieldKeys = Literal[
    'id',
    'idDistr',
    'idComm',
    'idInfoPaiment',
]
factureScalarFieldKeysT = TypeVar('factureScalarFieldKeysT', bound=factureScalarFieldKeys)

factureRelationalFieldKeys = Literal[
        'commande',
        'distributeur',
        'infopaiment',
    ]

# infopaiment types

class infopaimentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the infopaiment create method"""
    id: _int
    mail: Optional[_str]
    cartePaiment: Optional[_str]
    ccv: Optional[_str]
    expiryDate: Optional[_str]
    facture: 'factureCreateManyNestedWithoutRelationsInput'


class infopaimentCreateInput(infopaimentOptionalCreateInput):
    """Required arguments to the infopaiment create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class infopaimentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the infopaiment create method, without relations"""
    id: _int
    mail: Optional[_str]
    cartePaiment: Optional[_str]
    ccv: Optional[_str]
    expiryDate: Optional[_str]


class infopaimentCreateWithoutRelationsInput(infopaimentOptionalCreateWithoutRelationsInput):
    """Required arguments to the infopaiment create method, without relations"""


class infopaimentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'infopaimentCreateWithoutRelationsInput'
    connect: 'infopaimentWhereUniqueInput'


class infopaimentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['infopaimentCreateWithoutRelationsInput', List['infopaimentCreateWithoutRelationsInput']]
    connect: Union['infopaimentWhereUniqueInput', List['infopaimentWhereUniqueInput']]


_infopaimentWhereUnique_id_Input = TypedDict(
    '_infopaimentWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

infopaimentWhereUniqueInput = _infopaimentWhereUnique_id_Input


class infopaimentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    mail: Optional[_str]
    cartePaiment: Optional[_str]
    ccv: Optional[_str]
    expiryDate: Optional[_str]
    facture: 'factureUpdateManyWithoutRelationsInput'


class infopaimentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    mail: Optional[_str]
    cartePaiment: Optional[_str]
    ccv: Optional[_str]
    expiryDate: Optional[_str]


class infopaimentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['infopaimentCreateWithoutRelationsInput']
    connect: List['infopaimentWhereUniqueInput']
    set: List['infopaimentWhereUniqueInput']
    disconnect: List['infopaimentWhereUniqueInput']
    delete: List['infopaimentWhereUniqueInput']

    # TODO
    # update: List['infopaimentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['infopaimentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['infopaimentScalarWhereInput']
    # upsert: List['infopaimentUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['infopaimentCreateOrConnectWithoutRelationsInput']


class infopaimentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'infopaimentCreateWithoutRelationsInput'
    connect: 'infopaimentWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'infopaimentUpdateInput'
    # upsert: 'infopaimentUpsertWithoutRelationsInput'
    # connectOrCreate: 'infopaimentCreateOrConnectWithoutRelationsInput'


class infopaimentUpsertInput(TypedDict):
    create: 'infopaimentCreateInput'
    update: 'infopaimentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_infopaiment_id_OrderByInput = TypedDict(
    '_infopaiment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_infopaiment_mail_OrderByInput = TypedDict(
    '_infopaiment_mail_OrderByInput',
    {
        'mail': 'SortOrder',
    },
    total=True
)

_infopaiment_cartePaiment_OrderByInput = TypedDict(
    '_infopaiment_cartePaiment_OrderByInput',
    {
        'cartePaiment': 'SortOrder',
    },
    total=True
)

_infopaiment_ccv_OrderByInput = TypedDict(
    '_infopaiment_ccv_OrderByInput',
    {
        'ccv': 'SortOrder',
    },
    total=True
)

_infopaiment_expiryDate_OrderByInput = TypedDict(
    '_infopaiment_expiryDate_OrderByInput',
    {
        'expiryDate': 'SortOrder',
    },
    total=True
)

infopaimentOrderByInput = Union[
    '_infopaiment_id_OrderByInput',
    '_infopaiment_mail_OrderByInput',
    '_infopaiment_cartePaiment_OrderByInput',
    '_infopaiment_ccv_OrderByInput',
    '_infopaiment_expiryDate_OrderByInput',
]



# recursive infopaiment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

infopaimentRelationFilter = TypedDict(
    'infopaimentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class infopaimentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class infopaimentInclude(TypedDict, total=False):
    """infopaiment relational arguments"""
    facture: Union[bool, 'FindManyfactureArgsFrominfopaiment']


    

class annonceurIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class annonceurIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class annonceurIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class annonceurIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class annonceurIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class annonceurArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyannonceurArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class categorieIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class categorieIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class categorieIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class categorieIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class categorieArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManycategorieArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrominfopaimentRecursive1']


class categoryclaimsIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrominfopaimentRecursive2']


class categoryclaimsIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrominfopaimentRecursive3']


class categoryclaimsIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrominfopaimentRecursive4']


class categoryclaimsIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class categoryclaimsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManycategoryclaimsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    publicite: Union[bool, 'FindManypubliciteArgsFrominfopaimentRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFrominfopaimentRecursive1']


class categoryrecetteIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    publicite: Union[bool, 'FindManypubliciteArgsFrominfopaimentRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFrominfopaimentRecursive2']


class categoryrecetteIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    publicite: Union[bool, 'FindManypubliciteArgsFrominfopaimentRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFrominfopaimentRecursive3']


class categoryrecetteIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    publicite: Union[bool, 'FindManypubliciteArgsFrominfopaimentRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFrominfopaimentRecursive4']


class categoryrecetteIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class categoryrecetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManycategoryrecetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive1']


class categorysensorsIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive2']


class categorysensorsIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive3']


class categorysensorsIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive4']


class categorysensorsIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class categorysensorsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManycategorysensorsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive1']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive1']


class commandeIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive2']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive2']


class commandeIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive3']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive3']


class commandeIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive4']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive4']


class commandeIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class commandeArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManycommandeArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive1']
    pack: Union[bool, 'packArgsFrominfopaimentRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive1']


class distributeurIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive2']
    pack: Union[bool, 'packArgsFrominfopaimentRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive2']


class distributeurIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive3']
    pack: Union[bool, 'packArgsFrominfopaimentRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive3']


class distributeurIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive4']
    pack: Union[bool, 'packArgsFrominfopaimentRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFrominfopaimentRecursive4']


class distributeurIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class distributeurArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManydistributeurArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive1']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive1']


class distributeurRecetteIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive2']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive2']


class distributeurRecetteIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive3']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive3']


class distributeurRecetteIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive4']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive4']


class distributeurRecetteIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class distributeurRecetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManydistributeurRecetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    pack: Union[bool, 'FindManypackArgsFrominfopaimentRecursive1']
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive1']
    users: Union[bool, 'FindManyusersArgsFrominfopaimentRecursive1']


class entrepiseIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    pack: Union[bool, 'FindManypackArgsFrominfopaimentRecursive2']
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive2']
    users: Union[bool, 'FindManyusersArgsFrominfopaimentRecursive2']


class entrepiseIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    pack: Union[bool, 'FindManypackArgsFrominfopaimentRecursive3']
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive3']
    users: Union[bool, 'FindManyusersArgsFrominfopaimentRecursive3']


class entrepiseIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    pack: Union[bool, 'FindManypackArgsFrominfopaimentRecursive4']
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive4']
    users: Union[bool, 'FindManyusersArgsFrominfopaimentRecursive4']


class entrepiseIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class entrepiseArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyentrepiseArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'commandeArgsFrominfopaimentRecursive1']
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFrominfopaimentRecursive1']


class factureIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'commandeArgsFrominfopaimentRecursive2']
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFrominfopaimentRecursive2']


class factureIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'commandeArgsFrominfopaimentRecursive3']
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFrominfopaimentRecursive3']


class factureIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'commandeArgsFrominfopaimentRecursive4']
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFrominfopaimentRecursive4']


class factureIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class factureArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyfactureArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive1']


class infopaimentIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive2']


class infopaimentIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive3']


class infopaimentIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    facture: Union[bool, 'FindManyfactureArgsFrominfopaimentRecursive4']


class infopaimentIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class infopaimentArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyinfopaimentArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive1']


class ingredientIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive2']


class ingredientIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive3']


class ingredientIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive4']


class ingredientIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class ingredientArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyingredientArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive1']


class packIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive2']


class packIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive3']


class packIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive4']


class packIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class packArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManypackArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive1']


class publiciteIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive2']


class publiciteIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive3']


class publiciteIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive4']


class publiciteIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class publiciteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManypubliciteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive1']


class recetteIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive2']


class recetteIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive3']


class recetteIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    commande: Union[bool, 'FindManycommandeArgsFrominfopaimentRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrominfopaimentRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrominfopaimentRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrominfopaimentRecursive4']


class recetteIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class recetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyrecetteArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive1']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive1']


class recetteingrIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive2']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive2']


class recetteingrIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive3']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive3']


class recetteingrIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    ingredient: Union[bool, 'ingredientArgsFrominfopaimentRecursive4']
    recette: Union[bool, 'recetteArgsFrominfopaimentRecursive4']


class recetteingrIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class recetteingrArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyrecetteingrArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrominfopaimentRecursive1']


class reclamationIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrominfopaimentRecursive2']


class reclamationIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrominfopaimentRecursive3']


class reclamationIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrominfopaimentRecursive4']


class reclamationIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class reclamationArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyreclamationArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class roleIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class roleIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class roleIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""


class roleIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class roleArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyroleArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFrominfopaimentRecursive1']


class sensorsIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFrominfopaimentRecursive2']


class sensorsIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFrominfopaimentRecursive3']


class sensorsIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    distributeur: Union[bool, 'distributeurArgsFrominfopaimentRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFrominfopaimentRecursive4']


class sensorsIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class sensorsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManysensorsArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive1']
    typetask: Union[bool, 'typetaskArgsFrominfopaimentRecursive1']
    users: Union[bool, 'usersArgsFrominfopaimentRecursive1']


class taskIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive2']
    typetask: Union[bool, 'typetaskArgsFrominfopaimentRecursive2']
    users: Union[bool, 'usersArgsFrominfopaimentRecursive2']


class taskIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive3']
    typetask: Union[bool, 'typetaskArgsFrominfopaimentRecursive3']
    users: Union[bool, 'usersArgsFrominfopaimentRecursive3']


class taskIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive4']
    typetask: Union[bool, 'typetaskArgsFrominfopaimentRecursive4']
    users: Union[bool, 'usersArgsFrominfopaimentRecursive4']


class taskIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class taskArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManytaskArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    users: Union[bool, 'usersArgsFrominfopaimentRecursive1']


class tokensIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    users: Union[bool, 'usersArgsFrominfopaimentRecursive2']


class tokensIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    users: Union[bool, 'usersArgsFrominfopaimentRecursive3']


class tokensIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    users: Union[bool, 'usersArgsFrominfopaimentRecursive4']


class tokensIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class tokensArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManytokensArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive1']


class typetaskIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive2']


class typetaskIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive3']


class typetaskIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive4']


class typetaskIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class typetaskArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManytypetaskArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFrominfopaiment(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive1']
    tokens: Union[bool, 'tokensArgsFrominfopaimentRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive1']


class usersIncludeFrominfopaimentRecursive1(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive2']
    tokens: Union[bool, 'tokensArgsFrominfopaimentRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive2']


class usersIncludeFrominfopaimentRecursive2(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive3']
    tokens: Union[bool, 'tokensArgsFrominfopaimentRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive3']


class usersIncludeFrominfopaimentRecursive3(TypedDict, total=False):
    """Relational arguments for infopaiment"""
    task: Union[bool, 'FindManytaskArgsFrominfopaimentRecursive4']
    tokens: Union[bool, 'tokensArgsFrominfopaimentRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrominfopaimentRecursive4']


class usersIncludeFrominfopaimentRecursive4(TypedDict, total=False):
    """Relational arguments for infopaiment"""

    

class usersArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    
    

class FindManyusersArgsFrominfopaiment(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrominfopaimentRecursive1(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrominfopaimentRecursive2(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrominfopaimentRecursive3(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrominfopaimentRecursive4(TypedDict, total=False):
    """Arguments for infopaiment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyinfopaimentArgs = FindManyinfopaimentArgsFrominfopaiment
FindFirstinfopaimentArgs = FindManyinfopaimentArgsFrominfopaiment


    

class infopaimentWhereInput(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mail: Union[None, _str, 'types.StringFilter']
    cartePaiment: Union[None, _str, 'types.StringFilter']
    ccv: Union[None, _str, 'types.StringFilter']
    expiryDate: Union[None, _str, 'types.StringFilter']
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['infopaimentWhereInputRecursive1', List['infopaimentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['infopaimentWhereInputRecursive1']
    OR: List['infopaimentWhereInputRecursive1']
    NOT: List['infopaimentWhereInputRecursive1']


class infopaimentWhereInputRecursive1(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mail: Union[None, _str, 'types.StringFilter']
    cartePaiment: Union[None, _str, 'types.StringFilter']
    ccv: Union[None, _str, 'types.StringFilter']
    expiryDate: Union[None, _str, 'types.StringFilter']
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['infopaimentWhereInputRecursive2', List['infopaimentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['infopaimentWhereInputRecursive2']
    OR: List['infopaimentWhereInputRecursive2']
    NOT: List['infopaimentWhereInputRecursive2']


class infopaimentWhereInputRecursive2(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mail: Union[None, _str, 'types.StringFilter']
    cartePaiment: Union[None, _str, 'types.StringFilter']
    ccv: Union[None, _str, 'types.StringFilter']
    expiryDate: Union[None, _str, 'types.StringFilter']
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['infopaimentWhereInputRecursive3', List['infopaimentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['infopaimentWhereInputRecursive3']
    OR: List['infopaimentWhereInputRecursive3']
    NOT: List['infopaimentWhereInputRecursive3']


class infopaimentWhereInputRecursive3(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mail: Union[None, _str, 'types.StringFilter']
    cartePaiment: Union[None, _str, 'types.StringFilter']
    ccv: Union[None, _str, 'types.StringFilter']
    expiryDate: Union[None, _str, 'types.StringFilter']
    facture: 'factureListRelationFilter'

    # should be noted that AND and NOT should be Union['infopaimentWhereInputRecursive4', List['infopaimentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['infopaimentWhereInputRecursive4']
    OR: List['infopaimentWhereInputRecursive4']
    NOT: List['infopaimentWhereInputRecursive4']


class infopaimentWhereInputRecursive4(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mail: Union[None, _str, 'types.StringFilter']
    cartePaiment: Union[None, _str, 'types.StringFilter']
    ccv: Union[None, _str, 'types.StringFilter']
    expiryDate: Union[None, _str, 'types.StringFilter']
    facture: 'factureListRelationFilter'



# aggregate infopaiment types


    

class infopaimentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    cartePaiment: Union[_str, 'types.StringWithAggregatesFilter']
    ccv: Union[_str, 'types.StringWithAggregatesFilter']
    expiryDate: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['infopaimentScalarWhereWithAggregatesInputRecursive1']
    OR: List['infopaimentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['infopaimentScalarWhereWithAggregatesInputRecursive1']


class infopaimentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    cartePaiment: Union[_str, 'types.StringWithAggregatesFilter']
    ccv: Union[_str, 'types.StringWithAggregatesFilter']
    expiryDate: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['infopaimentScalarWhereWithAggregatesInputRecursive2']
    OR: List['infopaimentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['infopaimentScalarWhereWithAggregatesInputRecursive2']


class infopaimentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    cartePaiment: Union[_str, 'types.StringWithAggregatesFilter']
    ccv: Union[_str, 'types.StringWithAggregatesFilter']
    expiryDate: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['infopaimentScalarWhereWithAggregatesInputRecursive3']
    OR: List['infopaimentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['infopaimentScalarWhereWithAggregatesInputRecursive3']


class infopaimentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    cartePaiment: Union[_str, 'types.StringWithAggregatesFilter']
    ccv: Union[_str, 'types.StringWithAggregatesFilter']
    expiryDate: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['infopaimentScalarWhereWithAggregatesInputRecursive4']
    OR: List['infopaimentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['infopaimentScalarWhereWithAggregatesInputRecursive4']


class infopaimentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """infopaiment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    cartePaiment: Union[_str, 'types.StringWithAggregatesFilter']
    ccv: Union[_str, 'types.StringWithAggregatesFilter']
    expiryDate: Union[_str, 'types.StringWithAggregatesFilter']



class infopaimentGroupByOutput(TypedDict, total=False):
    id: _int
    mail: _str
    cartePaiment: _str
    ccv: _str
    expiryDate: _str
    _sum: 'infopaimentSumAggregateOutput'
    _avg: 'infopaimentAvgAggregateOutput'
    _min: 'infopaimentMinAggregateOutput'
    _max: 'infopaimentMaxAggregateOutput'
    _count: 'infopaimentCountAggregateOutput'


class infopaimentAvgAggregateOutput(TypedDict, total=False):
    """infopaiment output for aggregating averages"""
    id: float


class infopaimentSumAggregateOutput(TypedDict, total=False):
    """infopaiment output for aggregating sums"""
    id: _int


class infopaimentScalarAggregateOutput(TypedDict, total=False):
    """infopaiment output including scalar fields"""
    id: _int
    mail: _str
    cartePaiment: _str
    ccv: _str
    expiryDate: _str


infopaimentMinAggregateOutput = infopaimentScalarAggregateOutput
infopaimentMaxAggregateOutput = infopaimentScalarAggregateOutput


class infopaimentMaxAggregateInput(TypedDict, total=False):
    """infopaiment input for aggregating by max"""
    id: bool
    mail: bool
    cartePaiment: bool
    ccv: bool
    expiryDate: bool


class infopaimentMinAggregateInput(TypedDict, total=False):
    """infopaiment input for aggregating by min"""
    id: bool
    mail: bool
    cartePaiment: bool
    ccv: bool
    expiryDate: bool


class infopaimentNumberAggregateInput(TypedDict, total=False):
    """infopaiment input for aggregating numbers"""
    id: bool


infopaimentAvgAggregateInput = infopaimentNumberAggregateInput
infopaimentSumAggregateInput = infopaimentNumberAggregateInput


infopaimentCountAggregateInput = TypedDict(
    'infopaimentCountAggregateInput',
    {
        'id': bool,
        'mail': bool,
        'cartePaiment': bool,
        'ccv': bool,
        'expiryDate': bool,
        '_all': bool,
    },
    total=False,
)

infopaimentCountAggregateOutput = TypedDict(
    'infopaimentCountAggregateOutput',
    {
        'id': int,
        'mail': int,
        'cartePaiment': int,
        'ccv': int,
        'expiryDate': int,
        '_all': int,
    },
    total=False,
)


infopaimentKeys = Literal[
    'id',
    'mail',
    'cartePaiment',
    'ccv',
    'expiryDate',
    'facture',
]
infopaimentScalarFieldKeys = Literal[
    'id',
    'mail',
    'cartePaiment',
    'ccv',
    'expiryDate',
]
infopaimentScalarFieldKeysT = TypeVar('infopaimentScalarFieldKeysT', bound=infopaimentScalarFieldKeys)

infopaimentRelationalFieldKeys = Literal[
        'facture',
    ]

# ingredient types

class ingredientOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ingredient create method"""
    id: _int
    type: Optional[_int]
    description: Optional[_str]
    prixUnit: Optional[_int]
    commande: 'commandeCreateManyNestedWithoutRelationsInput'
    recetteingr: 'recetteingrCreateManyNestedWithoutRelationsInput'


class ingredientCreateInput(ingredientOptionalCreateInput):
    """Required arguments to the ingredient create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ingredientOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ingredient create method, without relations"""
    id: _int
    type: Optional[_int]
    description: Optional[_str]
    prixUnit: Optional[_int]


class ingredientCreateWithoutRelationsInput(ingredientOptionalCreateWithoutRelationsInput):
    """Required arguments to the ingredient create method, without relations"""


class ingredientCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ingredientCreateWithoutRelationsInput'
    connect: 'ingredientWhereUniqueInput'


class ingredientCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ingredientCreateWithoutRelationsInput', List['ingredientCreateWithoutRelationsInput']]
    connect: Union['ingredientWhereUniqueInput', List['ingredientWhereUniqueInput']]


_ingredientWhereUnique_id_Input = TypedDict(
    '_ingredientWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ingredientWhereUniqueInput = _ingredientWhereUnique_id_Input


class ingredientUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    type: Optional[Union[AtomicIntInput, _int]]
    description: Optional[_str]
    prixUnit: Optional[Union[AtomicIntInput, _int]]
    commande: 'commandeUpdateManyWithoutRelationsInput'
    recetteingr: 'recetteingrUpdateManyWithoutRelationsInput'


class ingredientUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    type: Optional[Union[AtomicIntInput, _int]]
    description: Optional[_str]
    prixUnit: Optional[Union[AtomicIntInput, _int]]


class ingredientUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ingredientCreateWithoutRelationsInput']
    connect: List['ingredientWhereUniqueInput']
    set: List['ingredientWhereUniqueInput']
    disconnect: List['ingredientWhereUniqueInput']
    delete: List['ingredientWhereUniqueInput']

    # TODO
    # update: List['ingredientUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ingredientUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ingredientScalarWhereInput']
    # upsert: List['ingredientUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ingredientCreateOrConnectWithoutRelationsInput']


class ingredientUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ingredientCreateWithoutRelationsInput'
    connect: 'ingredientWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ingredientUpdateInput'
    # upsert: 'ingredientUpsertWithoutRelationsInput'
    # connectOrCreate: 'ingredientCreateOrConnectWithoutRelationsInput'


class ingredientUpsertInput(TypedDict):
    create: 'ingredientCreateInput'
    update: 'ingredientUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ingredient_id_OrderByInput = TypedDict(
    '_ingredient_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ingredient_type_OrderByInput = TypedDict(
    '_ingredient_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_ingredient_description_OrderByInput = TypedDict(
    '_ingredient_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_ingredient_prixUnit_OrderByInput = TypedDict(
    '_ingredient_prixUnit_OrderByInput',
    {
        'prixUnit': 'SortOrder',
    },
    total=True
)

ingredientOrderByInput = Union[
    '_ingredient_id_OrderByInput',
    '_ingredient_type_OrderByInput',
    '_ingredient_description_OrderByInput',
    '_ingredient_prixUnit_OrderByInput',
]



# recursive ingredient types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ingredientRelationFilter = TypedDict(
    'ingredientRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ingredientListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ingredientInclude(TypedDict, total=False):
    """ingredient relational arguments"""
    commande: Union[bool, 'FindManycommandeArgsFromingredient']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredient']


    

class annonceurIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""


class annonceurIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""


class annonceurIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""


class annonceurIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""


class annonceurIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class annonceurArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyannonceurArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""


class categorieIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""


class categorieIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""


class categorieIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""


class categorieIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class categorieArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManycategorieArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromingredientRecursive1']


class categoryclaimsIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromingredientRecursive2']


class categoryclaimsIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromingredientRecursive3']


class categoryclaimsIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromingredientRecursive4']


class categoryclaimsIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class categoryclaimsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManycategoryclaimsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    publicite: Union[bool, 'FindManypubliciteArgsFromingredientRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromingredientRecursive1']


class categoryrecetteIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    publicite: Union[bool, 'FindManypubliciteArgsFromingredientRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromingredientRecursive2']


class categoryrecetteIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    publicite: Union[bool, 'FindManypubliciteArgsFromingredientRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromingredientRecursive3']


class categoryrecetteIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    publicite: Union[bool, 'FindManypubliciteArgsFromingredientRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromingredientRecursive4']


class categoryrecetteIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class categoryrecetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManycategoryrecetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive1']


class categorysensorsIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive2']


class categorysensorsIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive3']


class categorysensorsIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive4']


class categorysensorsIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class categorysensorsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManycategorysensorsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive1']
    recette: Union[bool, 'recetteArgsFromingredientRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive1']


class commandeIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive2']
    recette: Union[bool, 'recetteArgsFromingredientRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive2']


class commandeIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive3']
    recette: Union[bool, 'recetteArgsFromingredientRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive3']


class commandeIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive4']
    recette: Union[bool, 'recetteArgsFromingredientRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive4']


class commandeIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class commandeArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManycommandeArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive1']
    pack: Union[bool, 'packArgsFromingredientRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive1']


class distributeurIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive2']
    pack: Union[bool, 'packArgsFromingredientRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive2']


class distributeurIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive3']
    pack: Union[bool, 'packArgsFromingredientRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive3']


class distributeurIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive4']
    pack: Union[bool, 'packArgsFromingredientRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromingredientRecursive4']


class distributeurIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class distributeurArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManydistributeurArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive1']
    recette: Union[bool, 'recetteArgsFromingredientRecursive1']


class distributeurRecetteIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive2']
    recette: Union[bool, 'recetteArgsFromingredientRecursive2']


class distributeurRecetteIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive3']
    recette: Union[bool, 'recetteArgsFromingredientRecursive3']


class distributeurRecetteIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive4']
    recette: Union[bool, 'recetteArgsFromingredientRecursive4']


class distributeurRecetteIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class distributeurRecetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManydistributeurRecetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    pack: Union[bool, 'FindManypackArgsFromingredientRecursive1']
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive1']
    users: Union[bool, 'FindManyusersArgsFromingredientRecursive1']


class entrepiseIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    pack: Union[bool, 'FindManypackArgsFromingredientRecursive2']
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive2']
    users: Union[bool, 'FindManyusersArgsFromingredientRecursive2']


class entrepiseIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    pack: Union[bool, 'FindManypackArgsFromingredientRecursive3']
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive3']
    users: Union[bool, 'FindManyusersArgsFromingredientRecursive3']


class entrepiseIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    pack: Union[bool, 'FindManypackArgsFromingredientRecursive4']
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive4']
    users: Union[bool, 'FindManyusersArgsFromingredientRecursive4']


class entrepiseIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class entrepiseArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyentrepiseArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'commandeArgsFromingredientRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromingredientRecursive1']


class factureIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'commandeArgsFromingredientRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromingredientRecursive2']


class factureIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'commandeArgsFromingredientRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromingredientRecursive3']


class factureIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'commandeArgsFromingredientRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromingredientRecursive4']


class factureIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class factureArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyfactureArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive1']


class infopaimentIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive2']


class infopaimentIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive3']


class infopaimentIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    facture: Union[bool, 'FindManyfactureArgsFromingredientRecursive4']


class infopaimentIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class infopaimentArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyinfopaimentArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive1']


class ingredientIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive2']


class ingredientIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive3']


class ingredientIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive4']


class ingredientIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class ingredientArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyingredientArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive1']


class packIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive2']


class packIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive3']


class packIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive4']


class packIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class packArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManypackArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive1']


class publiciteIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive2']


class publiciteIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive3']


class publiciteIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive4']


class publiciteIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class publiciteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManypubliciteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive1']


class recetteIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive2']


class recetteIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive3']


class recetteIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    commande: Union[bool, 'FindManycommandeArgsFromingredientRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromingredientRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromingredientRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromingredientRecursive4']


class recetteIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class recetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyrecetteArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive1']
    recette: Union[bool, 'recetteArgsFromingredientRecursive1']


class recetteingrIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive2']
    recette: Union[bool, 'recetteArgsFromingredientRecursive2']


class recetteingrIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive3']
    recette: Union[bool, 'recetteArgsFromingredientRecursive3']


class recetteingrIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    ingredient: Union[bool, 'ingredientArgsFromingredientRecursive4']
    recette: Union[bool, 'recetteArgsFromingredientRecursive4']


class recetteingrIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class recetteingrArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyrecetteingrArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromingredientRecursive1']


class reclamationIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromingredientRecursive2']


class reclamationIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromingredientRecursive3']


class reclamationIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromingredientRecursive4']


class reclamationIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class reclamationArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyreclamationArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""


class roleIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""


class roleIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""


class roleIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""


class roleIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class roleArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyroleArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromingredientRecursive1']


class sensorsIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromingredientRecursive2']


class sensorsIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromingredientRecursive3']


class sensorsIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    distributeur: Union[bool, 'distributeurArgsFromingredientRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromingredientRecursive4']


class sensorsIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class sensorsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManysensorsArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive1']
    typetask: Union[bool, 'typetaskArgsFromingredientRecursive1']
    users: Union[bool, 'usersArgsFromingredientRecursive1']


class taskIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive2']
    typetask: Union[bool, 'typetaskArgsFromingredientRecursive2']
    users: Union[bool, 'usersArgsFromingredientRecursive2']


class taskIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive3']
    typetask: Union[bool, 'typetaskArgsFromingredientRecursive3']
    users: Union[bool, 'usersArgsFromingredientRecursive3']


class taskIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive4']
    typetask: Union[bool, 'typetaskArgsFromingredientRecursive4']
    users: Union[bool, 'usersArgsFromingredientRecursive4']


class taskIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class taskArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManytaskArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    users: Union[bool, 'usersArgsFromingredientRecursive1']


class tokensIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    users: Union[bool, 'usersArgsFromingredientRecursive2']


class tokensIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    users: Union[bool, 'usersArgsFromingredientRecursive3']


class tokensIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    users: Union[bool, 'usersArgsFromingredientRecursive4']


class tokensIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class tokensArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManytokensArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive1']


class typetaskIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive2']


class typetaskIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive3']


class typetaskIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive4']


class typetaskIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class typetaskArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManytypetaskArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromingredient(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive1']
    tokens: Union[bool, 'tokensArgsFromingredientRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive1']


class usersIncludeFromingredientRecursive1(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive2']
    tokens: Union[bool, 'tokensArgsFromingredientRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive2']


class usersIncludeFromingredientRecursive2(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive3']
    tokens: Union[bool, 'tokensArgsFromingredientRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive3']


class usersIncludeFromingredientRecursive3(TypedDict, total=False):
    """Relational arguments for ingredient"""
    task: Union[bool, 'FindManytaskArgsFromingredientRecursive4']
    tokens: Union[bool, 'tokensArgsFromingredientRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromingredientRecursive4']


class usersIncludeFromingredientRecursive4(TypedDict, total=False):
    """Relational arguments for ingredient"""

    

class usersArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    
    

class FindManyusersArgsFromingredient(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromingredientRecursive1(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromingredientRecursive2(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromingredientRecursive3(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromingredientRecursive4(TypedDict, total=False):
    """Arguments for ingredient"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyingredientArgs = FindManyingredientArgsFromingredient
FindFirstingredientArgs = FindManyingredientArgsFromingredient


    

class ingredientWhereInput(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[None, _int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    prixUnit: Union[None, _int, 'types.IntFilter']
    commande: 'commandeListRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['ingredientWhereInputRecursive1', List['ingredientWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ingredientWhereInputRecursive1']
    OR: List['ingredientWhereInputRecursive1']
    NOT: List['ingredientWhereInputRecursive1']


class ingredientWhereInputRecursive1(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[None, _int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    prixUnit: Union[None, _int, 'types.IntFilter']
    commande: 'commandeListRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['ingredientWhereInputRecursive2', List['ingredientWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ingredientWhereInputRecursive2']
    OR: List['ingredientWhereInputRecursive2']
    NOT: List['ingredientWhereInputRecursive2']


class ingredientWhereInputRecursive2(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[None, _int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    prixUnit: Union[None, _int, 'types.IntFilter']
    commande: 'commandeListRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['ingredientWhereInputRecursive3', List['ingredientWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ingredientWhereInputRecursive3']
    OR: List['ingredientWhereInputRecursive3']
    NOT: List['ingredientWhereInputRecursive3']


class ingredientWhereInputRecursive3(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[None, _int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    prixUnit: Union[None, _int, 'types.IntFilter']
    commande: 'commandeListRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['ingredientWhereInputRecursive4', List['ingredientWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ingredientWhereInputRecursive4']
    OR: List['ingredientWhereInputRecursive4']
    NOT: List['ingredientWhereInputRecursive4']


class ingredientWhereInputRecursive4(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[None, _int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    prixUnit: Union[None, _int, 'types.IntFilter']
    commande: 'commandeListRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'



# aggregate ingredient types


    

class ingredientScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    prixUnit: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ingredientScalarWhereWithAggregatesInputRecursive1']
    OR: List['ingredientScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ingredientScalarWhereWithAggregatesInputRecursive1']


class ingredientScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    prixUnit: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ingredientScalarWhereWithAggregatesInputRecursive2']
    OR: List['ingredientScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ingredientScalarWhereWithAggregatesInputRecursive2']


class ingredientScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    prixUnit: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ingredientScalarWhereWithAggregatesInputRecursive3']
    OR: List['ingredientScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ingredientScalarWhereWithAggregatesInputRecursive3']


class ingredientScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    prixUnit: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ingredientScalarWhereWithAggregatesInputRecursive4']
    OR: List['ingredientScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ingredientScalarWhereWithAggregatesInputRecursive4']


class ingredientScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ingredient arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    prixUnit: Union[_int, 'types.IntWithAggregatesFilter']



class ingredientGroupByOutput(TypedDict, total=False):
    id: _int
    type: _int
    description: _str
    prixUnit: _int
    _sum: 'ingredientSumAggregateOutput'
    _avg: 'ingredientAvgAggregateOutput'
    _min: 'ingredientMinAggregateOutput'
    _max: 'ingredientMaxAggregateOutput'
    _count: 'ingredientCountAggregateOutput'


class ingredientAvgAggregateOutput(TypedDict, total=False):
    """ingredient output for aggregating averages"""
    id: float
    type: float
    prixUnit: float


class ingredientSumAggregateOutput(TypedDict, total=False):
    """ingredient output for aggregating sums"""
    id: _int
    type: _int
    prixUnit: _int


class ingredientScalarAggregateOutput(TypedDict, total=False):
    """ingredient output including scalar fields"""
    id: _int
    type: _int
    description: _str
    prixUnit: _int


ingredientMinAggregateOutput = ingredientScalarAggregateOutput
ingredientMaxAggregateOutput = ingredientScalarAggregateOutput


class ingredientMaxAggregateInput(TypedDict, total=False):
    """ingredient input for aggregating by max"""
    id: bool
    type: bool
    description: bool
    prixUnit: bool


class ingredientMinAggregateInput(TypedDict, total=False):
    """ingredient input for aggregating by min"""
    id: bool
    type: bool
    description: bool
    prixUnit: bool


class ingredientNumberAggregateInput(TypedDict, total=False):
    """ingredient input for aggregating numbers"""
    id: bool
    type: bool
    prixUnit: bool


ingredientAvgAggregateInput = ingredientNumberAggregateInput
ingredientSumAggregateInput = ingredientNumberAggregateInput


ingredientCountAggregateInput = TypedDict(
    'ingredientCountAggregateInput',
    {
        'id': bool,
        'type': bool,
        'description': bool,
        'prixUnit': bool,
        '_all': bool,
    },
    total=False,
)

ingredientCountAggregateOutput = TypedDict(
    'ingredientCountAggregateOutput',
    {
        'id': int,
        'type': int,
        'description': int,
        'prixUnit': int,
        '_all': int,
    },
    total=False,
)


ingredientKeys = Literal[
    'id',
    'type',
    'description',
    'prixUnit',
    'commande',
    'recetteingr',
]
ingredientScalarFieldKeys = Literal[
    'id',
    'type',
    'description',
    'prixUnit',
]
ingredientScalarFieldKeysT = TypeVar('ingredientScalarFieldKeysT', bound=ingredientScalarFieldKeys)

ingredientRelationalFieldKeys = Literal[
        'commande',
        'recetteingr',
    ]

# pack types

class packOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the pack create method"""
    idDistr: _int
    idEntre: _int
    codeverou: Optional[_str]
    localisation: Optional[_str]
    state: Optional[_str]
    distributeur: 'distributeurCreateNestedWithoutRelationsInput'
    entrepise: 'entrepiseCreateNestedWithoutRelationsInput'


class packCreateInput(packOptionalCreateInput):
    """Required arguments to the pack create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class packOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the pack create method, without relations"""
    idDistr: _int
    idEntre: _int
    codeverou: Optional[_str]
    localisation: Optional[_str]
    state: Optional[_str]


class packCreateWithoutRelationsInput(packOptionalCreateWithoutRelationsInput):
    """Required arguments to the pack create method, without relations"""


class packCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'packCreateWithoutRelationsInput'
    connect: 'packWhereUniqueInput'


class packCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['packCreateWithoutRelationsInput', List['packCreateWithoutRelationsInput']]
    connect: Union['packWhereUniqueInput', List['packWhereUniqueInput']]


_packWhereUnique_idDistr_Input = TypedDict(
    '_packWhereUnique_idDistr_Input',
    {
        'idDistr': '_int',
    },
    total=True
)

_packCompoundPrimaryKeyInner = TypedDict(
    '_packCompoundPrimaryKeyInner',
    {
        'idDistr': '_int',
        'idEntre': '_int',
    },
    total=True
)

_packCompoundPrimaryKey = TypedDict(
    '_packCompoundPrimaryKey',
    {
        'idDistr_idEntre': '_packCompoundPrimaryKeyInner',
    },
    total=True
)

packWhereUniqueInput = Union[
    '_packWhereUnique_idDistr_Input',
    '_packCompoundPrimaryKey',
]


class packUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    codeverou: Optional[_str]
    localisation: Optional[_str]
    state: Optional[_str]
    distributeur: 'distributeurUpdateOneWithoutRelationsInput'
    entrepise: 'entrepiseUpdateOneWithoutRelationsInput'


class packUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    codeverou: Optional[_str]
    localisation: Optional[_str]
    state: Optional[_str]


class packUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['packCreateWithoutRelationsInput']
    connect: List['packWhereUniqueInput']
    set: List['packWhereUniqueInput']
    disconnect: List['packWhereUniqueInput']
    delete: List['packWhereUniqueInput']

    # TODO
    # update: List['packUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['packUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['packScalarWhereInput']
    # upsert: List['packUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['packCreateOrConnectWithoutRelationsInput']


class packUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'packCreateWithoutRelationsInput'
    connect: 'packWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'packUpdateInput'
    # upsert: 'packUpsertWithoutRelationsInput'
    # connectOrCreate: 'packCreateOrConnectWithoutRelationsInput'


class packUpsertInput(TypedDict):
    create: 'packCreateInput'
    update: 'packUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_pack_idDistr_OrderByInput = TypedDict(
    '_pack_idDistr_OrderByInput',
    {
        'idDistr': 'SortOrder',
    },
    total=True
)

_pack_idEntre_OrderByInput = TypedDict(
    '_pack_idEntre_OrderByInput',
    {
        'idEntre': 'SortOrder',
    },
    total=True
)

_pack_codeverou_OrderByInput = TypedDict(
    '_pack_codeverou_OrderByInput',
    {
        'codeverou': 'SortOrder',
    },
    total=True
)

_pack_localisation_OrderByInput = TypedDict(
    '_pack_localisation_OrderByInput',
    {
        'localisation': 'SortOrder',
    },
    total=True
)

_pack_state_OrderByInput = TypedDict(
    '_pack_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

packOrderByInput = Union[
    '_pack_idDistr_OrderByInput',
    '_pack_idEntre_OrderByInput',
    '_pack_codeverou_OrderByInput',
    '_pack_localisation_OrderByInput',
    '_pack_state_OrderByInput',
]



# recursive pack types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

packRelationFilter = TypedDict(
    'packRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class packListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class packInclude(TypedDict, total=False):
    """pack relational arguments"""
    distributeur: Union[bool, 'distributeurArgsFrompack']
    entrepise: Union[bool, 'entrepiseArgsFrompack']


    

class annonceurIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""


class annonceurIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""


class annonceurIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""


class annonceurIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""


class annonceurIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class annonceurArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyannonceurArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""


class categorieIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""


class categorieIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""


class categorieIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""


class categorieIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class categorieArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManycategorieArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompackRecursive1']


class categoryclaimsIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompackRecursive2']


class categoryclaimsIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompackRecursive3']


class categoryclaimsIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompackRecursive4']


class categoryclaimsIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class categoryclaimsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManycategoryclaimsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompackRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFrompackRecursive1']


class categoryrecetteIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompackRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFrompackRecursive2']


class categoryrecetteIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompackRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFrompackRecursive3']


class categoryrecetteIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompackRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFrompackRecursive4']


class categoryrecetteIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class categoryrecetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManycategoryrecetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive1']


class categorysensorsIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive2']


class categorysensorsIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive3']


class categorysensorsIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive4']


class categorysensorsIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class categorysensorsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManycategorysensorsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive1']
    recette: Union[bool, 'recetteArgsFrompackRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive1']


class commandeIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive2']
    recette: Union[bool, 'recetteArgsFrompackRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive2']


class commandeIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive3']
    recette: Union[bool, 'recetteArgsFrompackRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive3']


class commandeIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive4']
    recette: Union[bool, 'recetteArgsFrompackRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive4']


class commandeIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class commandeArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManycommandeArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive1']
    pack: Union[bool, 'packArgsFrompackRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive1']


class distributeurIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive2']
    pack: Union[bool, 'packArgsFrompackRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive2']


class distributeurIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive3']
    pack: Union[bool, 'packArgsFrompackRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive3']


class distributeurIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive4']
    pack: Union[bool, 'packArgsFrompackRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFrompackRecursive4']


class distributeurIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class distributeurArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManydistributeurArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive1']
    recette: Union[bool, 'recetteArgsFrompackRecursive1']


class distributeurRecetteIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive2']
    recette: Union[bool, 'recetteArgsFrompackRecursive2']


class distributeurRecetteIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive3']
    recette: Union[bool, 'recetteArgsFrompackRecursive3']


class distributeurRecetteIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive4']
    recette: Union[bool, 'recetteArgsFrompackRecursive4']


class distributeurRecetteIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class distributeurRecetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManydistributeurRecetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    pack: Union[bool, 'FindManypackArgsFrompackRecursive1']
    task: Union[bool, 'FindManytaskArgsFrompackRecursive1']
    users: Union[bool, 'FindManyusersArgsFrompackRecursive1']


class entrepiseIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    pack: Union[bool, 'FindManypackArgsFrompackRecursive2']
    task: Union[bool, 'FindManytaskArgsFrompackRecursive2']
    users: Union[bool, 'FindManyusersArgsFrompackRecursive2']


class entrepiseIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    pack: Union[bool, 'FindManypackArgsFrompackRecursive3']
    task: Union[bool, 'FindManytaskArgsFrompackRecursive3']
    users: Union[bool, 'FindManyusersArgsFrompackRecursive3']


class entrepiseIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    pack: Union[bool, 'FindManypackArgsFrompackRecursive4']
    task: Union[bool, 'FindManytaskArgsFrompackRecursive4']
    users: Union[bool, 'FindManyusersArgsFrompackRecursive4']


class entrepiseIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class entrepiseArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyentrepiseArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'commandeArgsFrompackRecursive1']
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFrompackRecursive1']


class factureIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'commandeArgsFrompackRecursive2']
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFrompackRecursive2']


class factureIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'commandeArgsFrompackRecursive3']
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFrompackRecursive3']


class factureIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'commandeArgsFrompackRecursive4']
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFrompackRecursive4']


class factureIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class factureArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyfactureArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive1']


class infopaimentIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive2']


class infopaimentIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive3']


class infopaimentIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    facture: Union[bool, 'FindManyfactureArgsFrompackRecursive4']


class infopaimentIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class infopaimentArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyinfopaimentArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive1']


class ingredientIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive2']


class ingredientIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive3']


class ingredientIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive4']


class ingredientIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class ingredientArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyingredientArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive1']


class packIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive2']


class packIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive3']


class packIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive4']


class packIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class packArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManypackArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive1']


class publiciteIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive2']


class publiciteIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive3']


class publiciteIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive4']


class publiciteIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class publiciteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManypubliciteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive1']


class recetteIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive2']


class recetteIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive3']


class recetteIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    commande: Union[bool, 'FindManycommandeArgsFrompackRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompackRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompackRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompackRecursive4']


class recetteIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class recetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyrecetteArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive1']
    recette: Union[bool, 'recetteArgsFrompackRecursive1']


class recetteingrIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive2']
    recette: Union[bool, 'recetteArgsFrompackRecursive2']


class recetteingrIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive3']
    recette: Union[bool, 'recetteArgsFrompackRecursive3']


class recetteingrIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    ingredient: Union[bool, 'ingredientArgsFrompackRecursive4']
    recette: Union[bool, 'recetteArgsFrompackRecursive4']


class recetteingrIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class recetteingrArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyrecetteingrArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompackRecursive1']


class reclamationIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompackRecursive2']


class reclamationIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompackRecursive3']


class reclamationIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompackRecursive4']


class reclamationIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class reclamationArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyreclamationArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""


class roleIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""


class roleIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""


class roleIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""


class roleIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class roleArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyroleArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFrompackRecursive1']


class sensorsIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFrompackRecursive2']


class sensorsIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFrompackRecursive3']


class sensorsIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    distributeur: Union[bool, 'distributeurArgsFrompackRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFrompackRecursive4']


class sensorsIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class sensorsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManysensorsArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive1']
    typetask: Union[bool, 'typetaskArgsFrompackRecursive1']
    users: Union[bool, 'usersArgsFrompackRecursive1']


class taskIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive2']
    typetask: Union[bool, 'typetaskArgsFrompackRecursive2']
    users: Union[bool, 'usersArgsFrompackRecursive2']


class taskIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive3']
    typetask: Union[bool, 'typetaskArgsFrompackRecursive3']
    users: Union[bool, 'usersArgsFrompackRecursive3']


class taskIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive4']
    typetask: Union[bool, 'typetaskArgsFrompackRecursive4']
    users: Union[bool, 'usersArgsFrompackRecursive4']


class taskIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class taskArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManytaskArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    users: Union[bool, 'usersArgsFrompackRecursive1']


class tokensIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    users: Union[bool, 'usersArgsFrompackRecursive2']


class tokensIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    users: Union[bool, 'usersArgsFrompackRecursive3']


class tokensIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    users: Union[bool, 'usersArgsFrompackRecursive4']


class tokensIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class tokensArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManytokensArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive1']


class typetaskIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive2']


class typetaskIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive3']


class typetaskIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive4']


class typetaskIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class typetaskArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManytypetaskArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFrompack(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive1']
    tokens: Union[bool, 'tokensArgsFrompackRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive1']


class usersIncludeFrompackRecursive1(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive2']
    tokens: Union[bool, 'tokensArgsFrompackRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive2']


class usersIncludeFrompackRecursive2(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive3']
    tokens: Union[bool, 'tokensArgsFrompackRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive3']


class usersIncludeFrompackRecursive3(TypedDict, total=False):
    """Relational arguments for pack"""
    task: Union[bool, 'FindManytaskArgsFrompackRecursive4']
    tokens: Union[bool, 'tokensArgsFrompackRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrompackRecursive4']


class usersIncludeFrompackRecursive4(TypedDict, total=False):
    """Relational arguments for pack"""

    

class usersArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    
    

class FindManyusersArgsFrompack(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrompackRecursive1(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrompackRecursive2(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrompackRecursive3(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrompackRecursive4(TypedDict, total=False):
    """Arguments for pack"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManypackArgs = FindManypackArgsFrompack
FindFirstpackArgs = FindManypackArgsFrompack


    

class packWhereInput(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    codeverou: Union[None, _str, 'types.StringFilter']
    localisation: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['packWhereInputRecursive1', List['packWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['packWhereInputRecursive1']
    OR: List['packWhereInputRecursive1']
    NOT: List['packWhereInputRecursive1']


class packWhereInputRecursive1(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    codeverou: Union[None, _str, 'types.StringFilter']
    localisation: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['packWhereInputRecursive2', List['packWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['packWhereInputRecursive2']
    OR: List['packWhereInputRecursive2']
    NOT: List['packWhereInputRecursive2']


class packWhereInputRecursive2(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    codeverou: Union[None, _str, 'types.StringFilter']
    localisation: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['packWhereInputRecursive3', List['packWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['packWhereInputRecursive3']
    OR: List['packWhereInputRecursive3']
    NOT: List['packWhereInputRecursive3']


class packWhereInputRecursive3(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    codeverou: Union[None, _str, 'types.StringFilter']
    localisation: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['packWhereInputRecursive4', List['packWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['packWhereInputRecursive4']
    OR: List['packWhereInputRecursive4']
    NOT: List['packWhereInputRecursive4']


class packWhereInputRecursive4(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    codeverou: Union[None, _str, 'types.StringFilter']
    localisation: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    entrepise: 'entrepiseRelationFilter'



# aggregate pack types


    

class packScalarWhereWithAggregatesInput(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    codeverou: Union[_str, 'types.StringWithAggregatesFilter']
    localisation: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['packScalarWhereWithAggregatesInputRecursive1']
    OR: List['packScalarWhereWithAggregatesInputRecursive1']
    NOT: List['packScalarWhereWithAggregatesInputRecursive1']


class packScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    codeverou: Union[_str, 'types.StringWithAggregatesFilter']
    localisation: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['packScalarWhereWithAggregatesInputRecursive2']
    OR: List['packScalarWhereWithAggregatesInputRecursive2']
    NOT: List['packScalarWhereWithAggregatesInputRecursive2']


class packScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    codeverou: Union[_str, 'types.StringWithAggregatesFilter']
    localisation: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['packScalarWhereWithAggregatesInputRecursive3']
    OR: List['packScalarWhereWithAggregatesInputRecursive3']
    NOT: List['packScalarWhereWithAggregatesInputRecursive3']


class packScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    codeverou: Union[_str, 'types.StringWithAggregatesFilter']
    localisation: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['packScalarWhereWithAggregatesInputRecursive4']
    OR: List['packScalarWhereWithAggregatesInputRecursive4']
    NOT: List['packScalarWhereWithAggregatesInputRecursive4']


class packScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """pack arguments for searching"""
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    codeverou: Union[_str, 'types.StringWithAggregatesFilter']
    localisation: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']



class packGroupByOutput(TypedDict, total=False):
    idDistr: _int
    idEntre: _int
    codeverou: _str
    localisation: _str
    state: _str
    _sum: 'packSumAggregateOutput'
    _avg: 'packAvgAggregateOutput'
    _min: 'packMinAggregateOutput'
    _max: 'packMaxAggregateOutput'
    _count: 'packCountAggregateOutput'


class packAvgAggregateOutput(TypedDict, total=False):
    """pack output for aggregating averages"""
    idDistr: float
    idEntre: float


class packSumAggregateOutput(TypedDict, total=False):
    """pack output for aggregating sums"""
    idDistr: _int
    idEntre: _int


class packScalarAggregateOutput(TypedDict, total=False):
    """pack output including scalar fields"""
    idDistr: _int
    idEntre: _int
    codeverou: _str
    localisation: _str
    state: _str


packMinAggregateOutput = packScalarAggregateOutput
packMaxAggregateOutput = packScalarAggregateOutput


class packMaxAggregateInput(TypedDict, total=False):
    """pack input for aggregating by max"""
    idDistr: bool
    idEntre: bool
    codeverou: bool
    localisation: bool
    state: bool


class packMinAggregateInput(TypedDict, total=False):
    """pack input for aggregating by min"""
    idDistr: bool
    idEntre: bool
    codeverou: bool
    localisation: bool
    state: bool


class packNumberAggregateInput(TypedDict, total=False):
    """pack input for aggregating numbers"""
    idDistr: bool
    idEntre: bool


packAvgAggregateInput = packNumberAggregateInput
packSumAggregateInput = packNumberAggregateInput


packCountAggregateInput = TypedDict(
    'packCountAggregateInput',
    {
        'idDistr': bool,
        'idEntre': bool,
        'codeverou': bool,
        'localisation': bool,
        'state': bool,
        '_all': bool,
    },
    total=False,
)

packCountAggregateOutput = TypedDict(
    'packCountAggregateOutput',
    {
        'idDistr': int,
        'idEntre': int,
        'codeverou': int,
        'localisation': int,
        'state': int,
        '_all': int,
    },
    total=False,
)


packKeys = Literal[
    'idDistr',
    'idEntre',
    'codeverou',
    'localisation',
    'state',
    'distributeur',
    'entrepise',
]
packScalarFieldKeys = Literal[
    'idDistr',
    'idEntre',
    'codeverou',
    'localisation',
    'state',
]
packScalarFieldKeysT = TypeVar('packScalarFieldKeysT', bound=packScalarFieldKeys)

packRelationalFieldKeys = Literal[
        'distributeur',
        'entrepise',
    ]

# publicite types

class publiciteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the publicite create method"""
    id: _int
    url: Optional[_str]
    idCategorie: Optional[_int]
    idCategRecette: Optional[_int]
    idAnnonceur: Optional[_int]
    categoryrecette: 'categoryrecetteCreateNestedWithoutRelationsInput'


class publiciteCreateInput(publiciteOptionalCreateInput):
    """Required arguments to the publicite create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class publiciteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the publicite create method, without relations"""
    id: _int
    url: Optional[_str]
    idCategorie: Optional[_int]
    idCategRecette: Optional[_int]
    idAnnonceur: Optional[_int]


class publiciteCreateWithoutRelationsInput(publiciteOptionalCreateWithoutRelationsInput):
    """Required arguments to the publicite create method, without relations"""


class publiciteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'publiciteCreateWithoutRelationsInput'
    connect: 'publiciteWhereUniqueInput'


class publiciteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['publiciteCreateWithoutRelationsInput', List['publiciteCreateWithoutRelationsInput']]
    connect: Union['publiciteWhereUniqueInput', List['publiciteWhereUniqueInput']]


_publiciteWhereUnique_id_Input = TypedDict(
    '_publiciteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

publiciteWhereUniqueInput = _publiciteWhereUnique_id_Input


class publiciteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    url: Optional[_str]
    idCategorie: Optional[Union[AtomicIntInput, _int]]
    idAnnonceur: Optional[Union[AtomicIntInput, _int]]
    categoryrecette: 'categoryrecetteUpdateOneWithoutRelationsInput'


class publiciteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    url: Optional[_str]
    idCategorie: Optional[Union[AtomicIntInput, _int]]
    idAnnonceur: Optional[Union[AtomicIntInput, _int]]


class publiciteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['publiciteCreateWithoutRelationsInput']
    connect: List['publiciteWhereUniqueInput']
    set: List['publiciteWhereUniqueInput']
    disconnect: List['publiciteWhereUniqueInput']
    delete: List['publiciteWhereUniqueInput']

    # TODO
    # update: List['publiciteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['publiciteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['publiciteScalarWhereInput']
    # upsert: List['publiciteUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['publiciteCreateOrConnectWithoutRelationsInput']


class publiciteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'publiciteCreateWithoutRelationsInput'
    connect: 'publiciteWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'publiciteUpdateInput'
    # upsert: 'publiciteUpsertWithoutRelationsInput'
    # connectOrCreate: 'publiciteCreateOrConnectWithoutRelationsInput'


class publiciteUpsertInput(TypedDict):
    create: 'publiciteCreateInput'
    update: 'publiciteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_publicite_id_OrderByInput = TypedDict(
    '_publicite_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_publicite_url_OrderByInput = TypedDict(
    '_publicite_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_publicite_idCategorie_OrderByInput = TypedDict(
    '_publicite_idCategorie_OrderByInput',
    {
        'idCategorie': 'SortOrder',
    },
    total=True
)

_publicite_idCategRecette_OrderByInput = TypedDict(
    '_publicite_idCategRecette_OrderByInput',
    {
        'idCategRecette': 'SortOrder',
    },
    total=True
)

_publicite_idAnnonceur_OrderByInput = TypedDict(
    '_publicite_idAnnonceur_OrderByInput',
    {
        'idAnnonceur': 'SortOrder',
    },
    total=True
)

publiciteOrderByInput = Union[
    '_publicite_id_OrderByInput',
    '_publicite_url_OrderByInput',
    '_publicite_idCategorie_OrderByInput',
    '_publicite_idCategRecette_OrderByInput',
    '_publicite_idAnnonceur_OrderByInput',
]



# recursive publicite types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

publiciteRelationFilter = TypedDict(
    'publiciteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class publiciteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class publiciteInclude(TypedDict, total=False):
    """publicite relational arguments"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompublicite']


    

class annonceurIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""


class annonceurIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""


class annonceurIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""


class annonceurIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""


class annonceurIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class annonceurArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyannonceurArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""


class categorieIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""


class categorieIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""


class categorieIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""


class categorieIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class categorieArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManycategorieArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompubliciteRecursive1']


class categoryclaimsIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompubliciteRecursive2']


class categoryclaimsIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompubliciteRecursive3']


class categoryclaimsIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    reclamation: Union[bool, 'FindManyreclamationArgsFrompubliciteRecursive4']


class categoryclaimsIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class categoryclaimsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManycategoryclaimsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompubliciteRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFrompubliciteRecursive1']


class categoryrecetteIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompubliciteRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFrompubliciteRecursive2']


class categoryrecetteIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompubliciteRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFrompubliciteRecursive3']


class categoryrecetteIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    publicite: Union[bool, 'FindManypubliciteArgsFrompubliciteRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFrompubliciteRecursive4']


class categoryrecetteIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class categoryrecetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManycategoryrecetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive1']


class categorysensorsIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive2']


class categorysensorsIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive3']


class categorysensorsIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive4']


class categorysensorsIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class categorysensorsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManycategorysensorsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive1']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive1']


class commandeIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive2']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive2']


class commandeIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive3']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive3']


class commandeIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive4']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive4']


class commandeIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class commandeArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManycommandeArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive1']
    pack: Union[bool, 'packArgsFrompubliciteRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive1']


class distributeurIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive2']
    pack: Union[bool, 'packArgsFrompubliciteRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive2']


class distributeurIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive3']
    pack: Union[bool, 'packArgsFrompubliciteRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive3']


class distributeurIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive4']
    pack: Union[bool, 'packArgsFrompubliciteRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFrompubliciteRecursive4']


class distributeurIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class distributeurArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManydistributeurArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive1']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive1']


class distributeurRecetteIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive2']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive2']


class distributeurRecetteIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive3']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive3']


class distributeurRecetteIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive4']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive4']


class distributeurRecetteIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class distributeurRecetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManydistributeurRecetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    pack: Union[bool, 'FindManypackArgsFrompubliciteRecursive1']
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive1']
    users: Union[bool, 'FindManyusersArgsFrompubliciteRecursive1']


class entrepiseIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    pack: Union[bool, 'FindManypackArgsFrompubliciteRecursive2']
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive2']
    users: Union[bool, 'FindManyusersArgsFrompubliciteRecursive2']


class entrepiseIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    pack: Union[bool, 'FindManypackArgsFrompubliciteRecursive3']
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive3']
    users: Union[bool, 'FindManyusersArgsFrompubliciteRecursive3']


class entrepiseIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    pack: Union[bool, 'FindManypackArgsFrompubliciteRecursive4']
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive4']
    users: Union[bool, 'FindManyusersArgsFrompubliciteRecursive4']


class entrepiseIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class entrepiseArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyentrepiseArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'commandeArgsFrompubliciteRecursive1']
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFrompubliciteRecursive1']


class factureIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'commandeArgsFrompubliciteRecursive2']
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFrompubliciteRecursive2']


class factureIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'commandeArgsFrompubliciteRecursive3']
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFrompubliciteRecursive3']


class factureIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'commandeArgsFrompubliciteRecursive4']
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFrompubliciteRecursive4']


class factureIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class factureArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyfactureArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive1']


class infopaimentIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive2']


class infopaimentIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive3']


class infopaimentIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    facture: Union[bool, 'FindManyfactureArgsFrompubliciteRecursive4']


class infopaimentIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class infopaimentArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyinfopaimentArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive1']


class ingredientIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive2']


class ingredientIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive3']


class ingredientIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive4']


class ingredientIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class ingredientArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyingredientArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive1']


class packIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive2']


class packIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive3']


class packIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive4']


class packIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class packArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManypackArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive1']


class publiciteIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive2']


class publiciteIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive3']


class publiciteIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive4']


class publiciteIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class publiciteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManypubliciteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive1']


class recetteIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive2']


class recetteIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive3']


class recetteIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    commande: Union[bool, 'FindManycommandeArgsFrompubliciteRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFrompubliciteRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFrompubliciteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFrompubliciteRecursive4']


class recetteIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class recetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyrecetteArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive1']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive1']


class recetteingrIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive2']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive2']


class recetteingrIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive3']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive3']


class recetteingrIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    ingredient: Union[bool, 'ingredientArgsFrompubliciteRecursive4']
    recette: Union[bool, 'recetteArgsFrompubliciteRecursive4']


class recetteingrIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class recetteingrArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyrecetteingrArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompubliciteRecursive1']


class reclamationIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompubliciteRecursive2']


class reclamationIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompubliciteRecursive3']


class reclamationIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFrompubliciteRecursive4']


class reclamationIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class reclamationArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyreclamationArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""


class roleIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""


class roleIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""


class roleIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""


class roleIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class roleArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyroleArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFrompubliciteRecursive1']


class sensorsIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFrompubliciteRecursive2']


class sensorsIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFrompubliciteRecursive3']


class sensorsIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    distributeur: Union[bool, 'distributeurArgsFrompubliciteRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFrompubliciteRecursive4']


class sensorsIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class sensorsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManysensorsArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive1']
    typetask: Union[bool, 'typetaskArgsFrompubliciteRecursive1']
    users: Union[bool, 'usersArgsFrompubliciteRecursive1']


class taskIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive2']
    typetask: Union[bool, 'typetaskArgsFrompubliciteRecursive2']
    users: Union[bool, 'usersArgsFrompubliciteRecursive2']


class taskIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive3']
    typetask: Union[bool, 'typetaskArgsFrompubliciteRecursive3']
    users: Union[bool, 'usersArgsFrompubliciteRecursive3']


class taskIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive4']
    typetask: Union[bool, 'typetaskArgsFrompubliciteRecursive4']
    users: Union[bool, 'usersArgsFrompubliciteRecursive4']


class taskIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class taskArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManytaskArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    users: Union[bool, 'usersArgsFrompubliciteRecursive1']


class tokensIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    users: Union[bool, 'usersArgsFrompubliciteRecursive2']


class tokensIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    users: Union[bool, 'usersArgsFrompubliciteRecursive3']


class tokensIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    users: Union[bool, 'usersArgsFrompubliciteRecursive4']


class tokensIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class tokensArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManytokensArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive1']


class typetaskIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive2']


class typetaskIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive3']


class typetaskIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive4']


class typetaskIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class typetaskArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManytypetaskArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFrompublicite(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive1']
    tokens: Union[bool, 'tokensArgsFrompubliciteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive1']


class usersIncludeFrompubliciteRecursive1(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive2']
    tokens: Union[bool, 'tokensArgsFrompubliciteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive2']


class usersIncludeFrompubliciteRecursive2(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive3']
    tokens: Union[bool, 'tokensArgsFrompubliciteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive3']


class usersIncludeFrompubliciteRecursive3(TypedDict, total=False):
    """Relational arguments for publicite"""
    task: Union[bool, 'FindManytaskArgsFrompubliciteRecursive4']
    tokens: Union[bool, 'tokensArgsFrompubliciteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFrompubliciteRecursive4']


class usersIncludeFrompubliciteRecursive4(TypedDict, total=False):
    """Relational arguments for publicite"""

    

class usersArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    
    

class FindManyusersArgsFrompublicite(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrompubliciteRecursive1(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrompubliciteRecursive2(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrompubliciteRecursive3(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrompubliciteRecursive4(TypedDict, total=False):
    """Arguments for publicite"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManypubliciteArgs = FindManypubliciteArgsFrompublicite
FindFirstpubliciteArgs = FindManypubliciteArgsFrompublicite


    

class publiciteWhereInput(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    url: Union[None, _str, 'types.StringFilter']
    idCategorie: Union[None, _int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    idAnnonceur: Union[None, _int, 'types.IntFilter']
    categoryrecette: 'categoryrecetteRelationFilter'

    # should be noted that AND and NOT should be Union['publiciteWhereInputRecursive1', List['publiciteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['publiciteWhereInputRecursive1']
    OR: List['publiciteWhereInputRecursive1']
    NOT: List['publiciteWhereInputRecursive1']


class publiciteWhereInputRecursive1(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    url: Union[None, _str, 'types.StringFilter']
    idCategorie: Union[None, _int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    idAnnonceur: Union[None, _int, 'types.IntFilter']
    categoryrecette: 'categoryrecetteRelationFilter'

    # should be noted that AND and NOT should be Union['publiciteWhereInputRecursive2', List['publiciteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['publiciteWhereInputRecursive2']
    OR: List['publiciteWhereInputRecursive2']
    NOT: List['publiciteWhereInputRecursive2']


class publiciteWhereInputRecursive2(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    url: Union[None, _str, 'types.StringFilter']
    idCategorie: Union[None, _int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    idAnnonceur: Union[None, _int, 'types.IntFilter']
    categoryrecette: 'categoryrecetteRelationFilter'

    # should be noted that AND and NOT should be Union['publiciteWhereInputRecursive3', List['publiciteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['publiciteWhereInputRecursive3']
    OR: List['publiciteWhereInputRecursive3']
    NOT: List['publiciteWhereInputRecursive3']


class publiciteWhereInputRecursive3(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    url: Union[None, _str, 'types.StringFilter']
    idCategorie: Union[None, _int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    idAnnonceur: Union[None, _int, 'types.IntFilter']
    categoryrecette: 'categoryrecetteRelationFilter'

    # should be noted that AND and NOT should be Union['publiciteWhereInputRecursive4', List['publiciteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['publiciteWhereInputRecursive4']
    OR: List['publiciteWhereInputRecursive4']
    NOT: List['publiciteWhereInputRecursive4']


class publiciteWhereInputRecursive4(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    url: Union[None, _str, 'types.StringFilter']
    idCategorie: Union[None, _int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    idAnnonceur: Union[None, _int, 'types.IntFilter']
    categoryrecette: 'categoryrecetteRelationFilter'



# aggregate publicite types


    

class publiciteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    idCategorie: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idAnnonceur: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['publiciteScalarWhereWithAggregatesInputRecursive1']
    OR: List['publiciteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['publiciteScalarWhereWithAggregatesInputRecursive1']


class publiciteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    idCategorie: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idAnnonceur: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['publiciteScalarWhereWithAggregatesInputRecursive2']
    OR: List['publiciteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['publiciteScalarWhereWithAggregatesInputRecursive2']


class publiciteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    idCategorie: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idAnnonceur: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['publiciteScalarWhereWithAggregatesInputRecursive3']
    OR: List['publiciteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['publiciteScalarWhereWithAggregatesInputRecursive3']


class publiciteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    idCategorie: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idAnnonceur: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['publiciteScalarWhereWithAggregatesInputRecursive4']
    OR: List['publiciteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['publiciteScalarWhereWithAggregatesInputRecursive4']


class publiciteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """publicite arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    idCategorie: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idAnnonceur: Union[_int, 'types.IntWithAggregatesFilter']



class publiciteGroupByOutput(TypedDict, total=False):
    id: _int
    url: _str
    idCategorie: _int
    idCategRecette: _int
    idAnnonceur: _int
    _sum: 'publiciteSumAggregateOutput'
    _avg: 'publiciteAvgAggregateOutput'
    _min: 'publiciteMinAggregateOutput'
    _max: 'publiciteMaxAggregateOutput'
    _count: 'publiciteCountAggregateOutput'


class publiciteAvgAggregateOutput(TypedDict, total=False):
    """publicite output for aggregating averages"""
    id: float
    idCategorie: float
    idCategRecette: float
    idAnnonceur: float


class publiciteSumAggregateOutput(TypedDict, total=False):
    """publicite output for aggregating sums"""
    id: _int
    idCategorie: _int
    idCategRecette: _int
    idAnnonceur: _int


class publiciteScalarAggregateOutput(TypedDict, total=False):
    """publicite output including scalar fields"""
    id: _int
    url: _str
    idCategorie: _int
    idCategRecette: _int
    idAnnonceur: _int


publiciteMinAggregateOutput = publiciteScalarAggregateOutput
publiciteMaxAggregateOutput = publiciteScalarAggregateOutput


class publiciteMaxAggregateInput(TypedDict, total=False):
    """publicite input for aggregating by max"""
    id: bool
    url: bool
    idCategorie: bool
    idCategRecette: bool
    idAnnonceur: bool


class publiciteMinAggregateInput(TypedDict, total=False):
    """publicite input for aggregating by min"""
    id: bool
    url: bool
    idCategorie: bool
    idCategRecette: bool
    idAnnonceur: bool


class publiciteNumberAggregateInput(TypedDict, total=False):
    """publicite input for aggregating numbers"""
    id: bool
    idCategorie: bool
    idCategRecette: bool
    idAnnonceur: bool


publiciteAvgAggregateInput = publiciteNumberAggregateInput
publiciteSumAggregateInput = publiciteNumberAggregateInput


publiciteCountAggregateInput = TypedDict(
    'publiciteCountAggregateInput',
    {
        'id': bool,
        'url': bool,
        'idCategorie': bool,
        'idCategRecette': bool,
        'idAnnonceur': bool,
        '_all': bool,
    },
    total=False,
)

publiciteCountAggregateOutput = TypedDict(
    'publiciteCountAggregateOutput',
    {
        'id': int,
        'url': int,
        'idCategorie': int,
        'idCategRecette': int,
        'idAnnonceur': int,
        '_all': int,
    },
    total=False,
)


publiciteKeys = Literal[
    'id',
    'url',
    'idCategorie',
    'idCategRecette',
    'idAnnonceur',
    'categoryrecette',
]
publiciteScalarFieldKeys = Literal[
    'id',
    'url',
    'idCategorie',
    'idCategRecette',
    'idAnnonceur',
]
publiciteScalarFieldKeysT = TypeVar('publiciteScalarFieldKeysT', bound=publiciteScalarFieldKeys)

publiciteRelationalFieldKeys = Literal[
        'categoryrecette',
    ]

# recette types

class recetteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the recette create method"""
    id: _int
    idCategRecette: Optional[_int]
    name: Optional[_str]
    description: Optional[_str]
    price: decimal.Decimal
    imageLink: Optional[_str]
    commande: 'commandeCreateManyNestedWithoutRelationsInput'
    distributeurRecette: 'distributeurRecetteCreateManyNestedWithoutRelationsInput'
    categoryrecette: 'categoryrecetteCreateNestedWithoutRelationsInput'
    recetteingr: 'recetteingrCreateManyNestedWithoutRelationsInput'


class recetteCreateInput(recetteOptionalCreateInput):
    """Required arguments to the recette create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class recetteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the recette create method, without relations"""
    id: _int
    idCategRecette: Optional[_int]
    name: Optional[_str]
    description: Optional[_str]
    price: decimal.Decimal
    imageLink: Optional[_str]


class recetteCreateWithoutRelationsInput(recetteOptionalCreateWithoutRelationsInput):
    """Required arguments to the recette create method, without relations"""


class recetteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'recetteCreateWithoutRelationsInput'
    connect: 'recetteWhereUniqueInput'


class recetteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['recetteCreateWithoutRelationsInput', List['recetteCreateWithoutRelationsInput']]
    connect: Union['recetteWhereUniqueInput', List['recetteWhereUniqueInput']]


_recetteWhereUnique_id_Input = TypedDict(
    '_recetteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

recetteWhereUniqueInput = _recetteWhereUnique_id_Input


class recetteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]
    description: Optional[_str]
    price: decimal.Decimal
    imageLink: Optional[_str]
    commande: 'commandeUpdateManyWithoutRelationsInput'
    distributeurRecette: 'distributeurRecetteUpdateManyWithoutRelationsInput'
    categoryrecette: 'categoryrecetteUpdateOneWithoutRelationsInput'
    recetteingr: 'recetteingrUpdateManyWithoutRelationsInput'


class recetteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]
    description: Optional[_str]
    price: decimal.Decimal
    imageLink: Optional[_str]


class recetteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['recetteCreateWithoutRelationsInput']
    connect: List['recetteWhereUniqueInput']
    set: List['recetteWhereUniqueInput']
    disconnect: List['recetteWhereUniqueInput']
    delete: List['recetteWhereUniqueInput']

    # TODO
    # update: List['recetteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['recetteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['recetteScalarWhereInput']
    # upsert: List['recetteUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['recetteCreateOrConnectWithoutRelationsInput']


class recetteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'recetteCreateWithoutRelationsInput'
    connect: 'recetteWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'recetteUpdateInput'
    # upsert: 'recetteUpsertWithoutRelationsInput'
    # connectOrCreate: 'recetteCreateOrConnectWithoutRelationsInput'


class recetteUpsertInput(TypedDict):
    create: 'recetteCreateInput'
    update: 'recetteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_recette_id_OrderByInput = TypedDict(
    '_recette_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_recette_idCategRecette_OrderByInput = TypedDict(
    '_recette_idCategRecette_OrderByInput',
    {
        'idCategRecette': 'SortOrder',
    },
    total=True
)

_recette_name_OrderByInput = TypedDict(
    '_recette_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_recette_description_OrderByInput = TypedDict(
    '_recette_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_recette_price_OrderByInput = TypedDict(
    '_recette_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_recette_imageLink_OrderByInput = TypedDict(
    '_recette_imageLink_OrderByInput',
    {
        'imageLink': 'SortOrder',
    },
    total=True
)

recetteOrderByInput = Union[
    '_recette_id_OrderByInput',
    '_recette_idCategRecette_OrderByInput',
    '_recette_name_OrderByInput',
    '_recette_description_OrderByInput',
    '_recette_price_OrderByInput',
    '_recette_imageLink_OrderByInput',
]



# recursive recette types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

recetteRelationFilter = TypedDict(
    'recetteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class recetteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class recetteInclude(TypedDict, total=False):
    """recette relational arguments"""
    commande: Union[bool, 'FindManycommandeArgsFromrecette']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecette']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecette']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecette']


    

class annonceurIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""


class annonceurIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""


class annonceurIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""


class annonceurIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""


class annonceurIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class annonceurArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyannonceurArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""


class categorieIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""


class categorieIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""


class categorieIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""


class categorieIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class categorieArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManycategorieArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteRecursive1']


class categoryclaimsIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteRecursive2']


class categoryclaimsIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteRecursive3']


class categoryclaimsIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteRecursive4']


class categoryclaimsIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class categoryclaimsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManycategoryclaimsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteRecursive1']


class categoryrecetteIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteRecursive2']


class categoryrecetteIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteRecursive3']


class categoryrecetteIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteRecursive4']


class categoryrecetteIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class categoryrecetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManycategoryrecetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive1']


class categorysensorsIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive2']


class categorysensorsIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive3']


class categorysensorsIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive4']


class categorysensorsIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class categorysensorsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManycategorysensorsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive1']


class commandeIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive2']


class commandeIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive3']


class commandeIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive4']


class commandeIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class commandeArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManycommandeArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive1']
    pack: Union[bool, 'packArgsFromrecetteRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive1']


class distributeurIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive2']
    pack: Union[bool, 'packArgsFromrecetteRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive2']


class distributeurIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive3']
    pack: Union[bool, 'packArgsFromrecetteRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive3']


class distributeurIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive4']
    pack: Union[bool, 'packArgsFromrecetteRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteRecursive4']


class distributeurIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class distributeurArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManydistributeurArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive1']


class distributeurRecetteIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive2']


class distributeurRecetteIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive3']


class distributeurRecetteIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive4']


class distributeurRecetteIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class distributeurRecetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManydistributeurRecetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    pack: Union[bool, 'FindManypackArgsFromrecetteRecursive1']
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive1']
    users: Union[bool, 'FindManyusersArgsFromrecetteRecursive1']


class entrepiseIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    pack: Union[bool, 'FindManypackArgsFromrecetteRecursive2']
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive2']
    users: Union[bool, 'FindManyusersArgsFromrecetteRecursive2']


class entrepiseIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    pack: Union[bool, 'FindManypackArgsFromrecetteRecursive3']
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive3']
    users: Union[bool, 'FindManyusersArgsFromrecetteRecursive3']


class entrepiseIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    pack: Union[bool, 'FindManypackArgsFromrecetteRecursive4']
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive4']
    users: Union[bool, 'FindManyusersArgsFromrecetteRecursive4']


class entrepiseIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class entrepiseArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyentrepiseArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'commandeArgsFromrecetteRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteRecursive1']


class factureIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'commandeArgsFromrecetteRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteRecursive2']


class factureIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'commandeArgsFromrecetteRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteRecursive3']


class factureIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'commandeArgsFromrecetteRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteRecursive4']


class factureIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class factureArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyfactureArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive1']


class infopaimentIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive2']


class infopaimentIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive3']


class infopaimentIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteRecursive4']


class infopaimentIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class infopaimentArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyinfopaimentArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive1']


class ingredientIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive2']


class ingredientIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive3']


class ingredientIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive4']


class ingredientIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class ingredientArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyingredientArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive1']


class packIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive2']


class packIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive3']


class packIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive4']


class packIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class packArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManypackArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive1']


class publiciteIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive2']


class publiciteIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive3']


class publiciteIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive4']


class publiciteIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class publiciteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManypubliciteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive1']


class recetteIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive2']


class recetteIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive3']


class recetteIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteRecursive4']


class recetteIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class recetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyrecetteArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive1']


class recetteingrIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive2']


class recetteingrIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive3']


class recetteingrIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteRecursive4']


class recetteingrIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class recetteingrArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyrecetteingrArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteRecursive1']


class reclamationIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteRecursive2']


class reclamationIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteRecursive3']


class reclamationIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteRecursive4']


class reclamationIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class reclamationArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyreclamationArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""


class roleIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""


class roleIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""


class roleIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""


class roleIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class roleArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyroleArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteRecursive1']


class sensorsIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteRecursive2']


class sensorsIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteRecursive3']


class sensorsIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteRecursive4']


class sensorsIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class sensorsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManysensorsArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive1']
    typetask: Union[bool, 'typetaskArgsFromrecetteRecursive1']
    users: Union[bool, 'usersArgsFromrecetteRecursive1']


class taskIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive2']
    typetask: Union[bool, 'typetaskArgsFromrecetteRecursive2']
    users: Union[bool, 'usersArgsFromrecetteRecursive2']


class taskIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive3']
    typetask: Union[bool, 'typetaskArgsFromrecetteRecursive3']
    users: Union[bool, 'usersArgsFromrecetteRecursive3']


class taskIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive4']
    typetask: Union[bool, 'typetaskArgsFromrecetteRecursive4']
    users: Union[bool, 'usersArgsFromrecetteRecursive4']


class taskIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class taskArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManytaskArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    users: Union[bool, 'usersArgsFromrecetteRecursive1']


class tokensIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    users: Union[bool, 'usersArgsFromrecetteRecursive2']


class tokensIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    users: Union[bool, 'usersArgsFromrecetteRecursive3']


class tokensIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    users: Union[bool, 'usersArgsFromrecetteRecursive4']


class tokensIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class tokensArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManytokensArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive1']


class typetaskIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive2']


class typetaskIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive3']


class typetaskIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive4']


class typetaskIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class typetaskArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManytypetaskArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromrecette(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive1']
    tokens: Union[bool, 'tokensArgsFromrecetteRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive1']


class usersIncludeFromrecetteRecursive1(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive2']
    tokens: Union[bool, 'tokensArgsFromrecetteRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive2']


class usersIncludeFromrecetteRecursive2(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive3']
    tokens: Union[bool, 'tokensArgsFromrecetteRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive3']


class usersIncludeFromrecetteRecursive3(TypedDict, total=False):
    """Relational arguments for recette"""
    task: Union[bool, 'FindManytaskArgsFromrecetteRecursive4']
    tokens: Union[bool, 'tokensArgsFromrecetteRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteRecursive4']


class usersIncludeFromrecetteRecursive4(TypedDict, total=False):
    """Relational arguments for recette"""

    

class usersArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    
    

class FindManyusersArgsFromrecette(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromrecetteRecursive1(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromrecetteRecursive2(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromrecetteRecursive3(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromrecetteRecursive4(TypedDict, total=False):
    """Arguments for recette"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyrecetteArgs = FindManyrecetteArgsFromrecette
FindFirstrecetteArgs = FindManyrecetteArgsFromrecette


    

class recetteWhereInput(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    imageLink: Union[None, _str, 'types.StringFilter']
    commande: 'commandeListRelationFilter'
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    categoryrecette: 'categoryrecetteRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['recetteWhereInputRecursive1', List['recetteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['recetteWhereInputRecursive1']
    OR: List['recetteWhereInputRecursive1']
    NOT: List['recetteWhereInputRecursive1']


class recetteWhereInputRecursive1(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    imageLink: Union[None, _str, 'types.StringFilter']
    commande: 'commandeListRelationFilter'
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    categoryrecette: 'categoryrecetteRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['recetteWhereInputRecursive2', List['recetteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['recetteWhereInputRecursive2']
    OR: List['recetteWhereInputRecursive2']
    NOT: List['recetteWhereInputRecursive2']


class recetteWhereInputRecursive2(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    imageLink: Union[None, _str, 'types.StringFilter']
    commande: 'commandeListRelationFilter'
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    categoryrecette: 'categoryrecetteRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['recetteWhereInputRecursive3', List['recetteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['recetteWhereInputRecursive3']
    OR: List['recetteWhereInputRecursive3']
    NOT: List['recetteWhereInputRecursive3']


class recetteWhereInputRecursive3(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    imageLink: Union[None, _str, 'types.StringFilter']
    commande: 'commandeListRelationFilter'
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    categoryrecette: 'categoryrecetteRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'

    # should be noted that AND and NOT should be Union['recetteWhereInputRecursive4', List['recetteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['recetteWhereInputRecursive4']
    OR: List['recetteWhereInputRecursive4']
    NOT: List['recetteWhereInputRecursive4']


class recetteWhereInputRecursive4(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idCategRecette: Union[None, _int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[decimal.Decimal, 'types.DecimalFilter']
    imageLink: Union[None, _str, 'types.StringFilter']
    commande: 'commandeListRelationFilter'
    distributeurRecette: 'distributeurRecetteListRelationFilter'
    categoryrecette: 'categoryrecetteRelationFilter'
    recetteingr: 'recetteingrListRelationFilter'



# aggregate recette types


    

class recetteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    imageLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteScalarWhereWithAggregatesInputRecursive1']
    OR: List['recetteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['recetteScalarWhereWithAggregatesInputRecursive1']


class recetteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    imageLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteScalarWhereWithAggregatesInputRecursive2']
    OR: List['recetteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['recetteScalarWhereWithAggregatesInputRecursive2']


class recetteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    imageLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteScalarWhereWithAggregatesInputRecursive3']
    OR: List['recetteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['recetteScalarWhereWithAggregatesInputRecursive3']


class recetteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    imageLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteScalarWhereWithAggregatesInputRecursive4']
    OR: List['recetteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['recetteScalarWhereWithAggregatesInputRecursive4']


class recetteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """recette arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idCategRecette: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    imageLink: Union[_str, 'types.StringWithAggregatesFilter']



class recetteGroupByOutput(TypedDict, total=False):
    id: _int
    idCategRecette: _int
    name: _str
    description: _str
    price: decimal.Decimal
    imageLink: _str
    _sum: 'recetteSumAggregateOutput'
    _avg: 'recetteAvgAggregateOutput'
    _min: 'recetteMinAggregateOutput'
    _max: 'recetteMaxAggregateOutput'
    _count: 'recetteCountAggregateOutput'


class recetteAvgAggregateOutput(TypedDict, total=False):
    """recette output for aggregating averages"""
    id: float
    idCategRecette: float


class recetteSumAggregateOutput(TypedDict, total=False):
    """recette output for aggregating sums"""
    id: _int
    idCategRecette: _int


class recetteScalarAggregateOutput(TypedDict, total=False):
    """recette output including scalar fields"""
    id: _int
    idCategRecette: _int
    name: _str
    description: _str
    price: decimal.Decimal
    imageLink: _str


recetteMinAggregateOutput = recetteScalarAggregateOutput
recetteMaxAggregateOutput = recetteScalarAggregateOutput


class recetteMaxAggregateInput(TypedDict, total=False):
    """recette input for aggregating by max"""
    id: bool
    idCategRecette: bool
    name: bool
    description: bool
    price: bool
    imageLink: bool


class recetteMinAggregateInput(TypedDict, total=False):
    """recette input for aggregating by min"""
    id: bool
    idCategRecette: bool
    name: bool
    description: bool
    price: bool
    imageLink: bool


class recetteNumberAggregateInput(TypedDict, total=False):
    """recette input for aggregating numbers"""
    id: bool
    idCategRecette: bool


recetteAvgAggregateInput = recetteNumberAggregateInput
recetteSumAggregateInput = recetteNumberAggregateInput


recetteCountAggregateInput = TypedDict(
    'recetteCountAggregateInput',
    {
        'id': bool,
        'idCategRecette': bool,
        'name': bool,
        'description': bool,
        'price': bool,
        'imageLink': bool,
        '_all': bool,
    },
    total=False,
)

recetteCountAggregateOutput = TypedDict(
    'recetteCountAggregateOutput',
    {
        'id': int,
        'idCategRecette': int,
        'name': int,
        'description': int,
        'price': int,
        'imageLink': int,
        '_all': int,
    },
    total=False,
)


recetteKeys = Literal[
    'id',
    'idCategRecette',
    'name',
    'description',
    'price',
    'imageLink',
    'commande',
    'distributeurRecette',
    'categoryrecette',
    'recetteingr',
]
recetteScalarFieldKeys = Literal[
    'id',
    'idCategRecette',
    'name',
    'description',
    'price',
    'imageLink',
]
recetteScalarFieldKeysT = TypeVar('recetteScalarFieldKeysT', bound=recetteScalarFieldKeys)

recetteRelationalFieldKeys = Literal[
        'commande',
        'distributeurRecette',
        'categoryrecette',
        'recetteingr',
    ]

# recetteingr types

class recetteingrOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the recetteingr create method"""
    idRecette: _int
    idIngredient: _int
    quantity: Optional[_str]
    ingredient: 'ingredientCreateNestedWithoutRelationsInput'
    recette: 'recetteCreateNestedWithoutRelationsInput'


class recetteingrCreateInput(recetteingrOptionalCreateInput):
    """Required arguments to the recetteingr create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class recetteingrOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the recetteingr create method, without relations"""
    idRecette: _int
    idIngredient: _int
    quantity: Optional[_str]


class recetteingrCreateWithoutRelationsInput(recetteingrOptionalCreateWithoutRelationsInput):
    """Required arguments to the recetteingr create method, without relations"""


class recetteingrCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'recetteingrCreateWithoutRelationsInput'
    connect: 'recetteingrWhereUniqueInput'


class recetteingrCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['recetteingrCreateWithoutRelationsInput', List['recetteingrCreateWithoutRelationsInput']]
    connect: Union['recetteingrWhereUniqueInput', List['recetteingrWhereUniqueInput']]


_recetteingrCompoundPrimaryKeyInner = TypedDict(
    '_recetteingrCompoundPrimaryKeyInner',
    {
        'idRecette': '_int',
        'idIngredient': '_int',
    },
    total=True
)

_recetteingrCompoundPrimaryKey = TypedDict(
    '_recetteingrCompoundPrimaryKey',
    {
        'idRecette_idIngredient': '_recetteingrCompoundPrimaryKeyInner',
    },
    total=True
)

recetteingrWhereUniqueInput = _recetteingrCompoundPrimaryKey


class recetteingrUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    quantity: Optional[_str]
    ingredient: 'ingredientUpdateOneWithoutRelationsInput'
    recette: 'recetteUpdateOneWithoutRelationsInput'


class recetteingrUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    quantity: Optional[_str]


class recetteingrUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['recetteingrCreateWithoutRelationsInput']
    connect: List['recetteingrWhereUniqueInput']
    set: List['recetteingrWhereUniqueInput']
    disconnect: List['recetteingrWhereUniqueInput']
    delete: List['recetteingrWhereUniqueInput']

    # TODO
    # update: List['recetteingrUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['recetteingrUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['recetteingrScalarWhereInput']
    # upsert: List['recetteingrUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['recetteingrCreateOrConnectWithoutRelationsInput']


class recetteingrUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'recetteingrCreateWithoutRelationsInput'
    connect: 'recetteingrWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'recetteingrUpdateInput'
    # upsert: 'recetteingrUpsertWithoutRelationsInput'
    # connectOrCreate: 'recetteingrCreateOrConnectWithoutRelationsInput'


class recetteingrUpsertInput(TypedDict):
    create: 'recetteingrCreateInput'
    update: 'recetteingrUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_recetteingr_idRecette_OrderByInput = TypedDict(
    '_recetteingr_idRecette_OrderByInput',
    {
        'idRecette': 'SortOrder',
    },
    total=True
)

_recetteingr_idIngredient_OrderByInput = TypedDict(
    '_recetteingr_idIngredient_OrderByInput',
    {
        'idIngredient': 'SortOrder',
    },
    total=True
)

_recetteingr_quantity_OrderByInput = TypedDict(
    '_recetteingr_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

recetteingrOrderByInput = Union[
    '_recetteingr_idRecette_OrderByInput',
    '_recetteingr_idIngredient_OrderByInput',
    '_recetteingr_quantity_OrderByInput',
]



# recursive recetteingr types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

recetteingrRelationFilter = TypedDict(
    'recetteingrRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class recetteingrListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class recetteingrInclude(TypedDict, total=False):
    """recetteingr relational arguments"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingr']
    recette: Union[bool, 'recetteArgsFromrecetteingr']


    

class annonceurIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class annonceurIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class annonceurIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class annonceurIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class annonceurIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class annonceurArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyannonceurArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class categorieIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class categorieIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class categorieIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class categorieIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class categorieArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManycategorieArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteingrRecursive1']


class categoryclaimsIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteingrRecursive2']


class categoryclaimsIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteingrRecursive3']


class categoryclaimsIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromrecetteingrRecursive4']


class categoryclaimsIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class categoryclaimsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManycategoryclaimsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteingrRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteingrRecursive1']


class categoryrecetteIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteingrRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteingrRecursive2']


class categoryrecetteIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteingrRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteingrRecursive3']


class categoryrecetteIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    publicite: Union[bool, 'FindManypubliciteArgsFromrecetteingrRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromrecetteingrRecursive4']


class categoryrecetteIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class categoryrecetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManycategoryrecetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive1']


class categorysensorsIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive2']


class categorysensorsIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive3']


class categorysensorsIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive4']


class categorysensorsIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class categorysensorsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManycategorysensorsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive1']


class commandeIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive2']


class commandeIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive3']


class commandeIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive4']


class commandeIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class commandeArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManycommandeArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive1']
    pack: Union[bool, 'packArgsFromrecetteingrRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive1']


class distributeurIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive2']
    pack: Union[bool, 'packArgsFromrecetteingrRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive2']


class distributeurIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive3']
    pack: Union[bool, 'packArgsFromrecetteingrRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive3']


class distributeurIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive4']
    pack: Union[bool, 'packArgsFromrecetteingrRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromrecetteingrRecursive4']


class distributeurIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class distributeurArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManydistributeurArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive1']


class distributeurRecetteIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive2']


class distributeurRecetteIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive3']


class distributeurRecetteIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive4']


class distributeurRecetteIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class distributeurRecetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManydistributeurRecetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    pack: Union[bool, 'FindManypackArgsFromrecetteingrRecursive1']
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive1']
    users: Union[bool, 'FindManyusersArgsFromrecetteingrRecursive1']


class entrepiseIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    pack: Union[bool, 'FindManypackArgsFromrecetteingrRecursive2']
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive2']
    users: Union[bool, 'FindManyusersArgsFromrecetteingrRecursive2']


class entrepiseIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    pack: Union[bool, 'FindManypackArgsFromrecetteingrRecursive3']
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive3']
    users: Union[bool, 'FindManyusersArgsFromrecetteingrRecursive3']


class entrepiseIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    pack: Union[bool, 'FindManypackArgsFromrecetteingrRecursive4']
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive4']
    users: Union[bool, 'FindManyusersArgsFromrecetteingrRecursive4']


class entrepiseIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class entrepiseArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyentrepiseArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'commandeArgsFromrecetteingrRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteingrRecursive1']


class factureIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'commandeArgsFromrecetteingrRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteingrRecursive2']


class factureIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'commandeArgsFromrecetteingrRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteingrRecursive3']


class factureIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'commandeArgsFromrecetteingrRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromrecetteingrRecursive4']


class factureIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class factureArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyfactureArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive1']


class infopaimentIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive2']


class infopaimentIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive3']


class infopaimentIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    facture: Union[bool, 'FindManyfactureArgsFromrecetteingrRecursive4']


class infopaimentIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class infopaimentArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyinfopaimentArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive1']


class ingredientIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive2']


class ingredientIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive3']


class ingredientIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive4']


class ingredientIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class ingredientArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyingredientArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive1']


class packIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive2']


class packIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive3']


class packIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive4']


class packIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class packArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManypackArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive1']


class publiciteIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive2']


class publiciteIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive3']


class publiciteIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive4']


class publiciteIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class publiciteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManypubliciteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive1']


class recetteIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive2']


class recetteIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive3']


class recetteIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    commande: Union[bool, 'FindManycommandeArgsFromrecetteingrRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromrecetteingrRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromrecetteingrRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromrecetteingrRecursive4']


class recetteIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class recetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyrecetteArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive1']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive1']


class recetteingrIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive2']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive2']


class recetteingrIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive3']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive3']


class recetteingrIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    ingredient: Union[bool, 'ingredientArgsFromrecetteingrRecursive4']
    recette: Union[bool, 'recetteArgsFromrecetteingrRecursive4']


class recetteingrIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class recetteingrArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyrecetteingrArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteingrRecursive1']


class reclamationIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteingrRecursive2']


class reclamationIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteingrRecursive3']


class reclamationIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromrecetteingrRecursive4']


class reclamationIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class reclamationArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyreclamationArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class roleIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class roleIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class roleIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""


class roleIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class roleArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyroleArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteingrRecursive1']


class sensorsIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteingrRecursive2']


class sensorsIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteingrRecursive3']


class sensorsIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    distributeur: Union[bool, 'distributeurArgsFromrecetteingrRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromrecetteingrRecursive4']


class sensorsIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class sensorsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManysensorsArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive1']
    typetask: Union[bool, 'typetaskArgsFromrecetteingrRecursive1']
    users: Union[bool, 'usersArgsFromrecetteingrRecursive1']


class taskIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive2']
    typetask: Union[bool, 'typetaskArgsFromrecetteingrRecursive2']
    users: Union[bool, 'usersArgsFromrecetteingrRecursive2']


class taskIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive3']
    typetask: Union[bool, 'typetaskArgsFromrecetteingrRecursive3']
    users: Union[bool, 'usersArgsFromrecetteingrRecursive3']


class taskIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive4']
    typetask: Union[bool, 'typetaskArgsFromrecetteingrRecursive4']
    users: Union[bool, 'usersArgsFromrecetteingrRecursive4']


class taskIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class taskArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManytaskArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    users: Union[bool, 'usersArgsFromrecetteingrRecursive1']


class tokensIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    users: Union[bool, 'usersArgsFromrecetteingrRecursive2']


class tokensIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    users: Union[bool, 'usersArgsFromrecetteingrRecursive3']


class tokensIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    users: Union[bool, 'usersArgsFromrecetteingrRecursive4']


class tokensIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class tokensArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManytokensArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive1']


class typetaskIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive2']


class typetaskIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive3']


class typetaskIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive4']


class typetaskIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class typetaskArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManytypetaskArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromrecetteingr(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive1']
    tokens: Union[bool, 'tokensArgsFromrecetteingrRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive1']


class usersIncludeFromrecetteingrRecursive1(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive2']
    tokens: Union[bool, 'tokensArgsFromrecetteingrRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive2']


class usersIncludeFromrecetteingrRecursive2(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive3']
    tokens: Union[bool, 'tokensArgsFromrecetteingrRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive3']


class usersIncludeFromrecetteingrRecursive3(TypedDict, total=False):
    """Relational arguments for recetteingr"""
    task: Union[bool, 'FindManytaskArgsFromrecetteingrRecursive4']
    tokens: Union[bool, 'tokensArgsFromrecetteingrRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromrecetteingrRecursive4']


class usersIncludeFromrecetteingrRecursive4(TypedDict, total=False):
    """Relational arguments for recetteingr"""

    

class usersArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    
    

class FindManyusersArgsFromrecetteingr(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromrecetteingrRecursive1(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromrecetteingrRecursive2(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromrecetteingrRecursive3(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromrecetteingrRecursive4(TypedDict, total=False):
    """Arguments for recetteingr"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyrecetteingrArgs = FindManyrecetteingrArgsFromrecetteingr
FindFirstrecetteingrArgs = FindManyrecetteingrArgsFromrecetteingr


    

class recetteingrWhereInput(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[_int, 'types.IntFilter']
    quantity: Union[None, _str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['recetteingrWhereInputRecursive1', List['recetteingrWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['recetteingrWhereInputRecursive1']
    OR: List['recetteingrWhereInputRecursive1']
    NOT: List['recetteingrWhereInputRecursive1']


class recetteingrWhereInputRecursive1(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[_int, 'types.IntFilter']
    quantity: Union[None, _str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['recetteingrWhereInputRecursive2', List['recetteingrWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['recetteingrWhereInputRecursive2']
    OR: List['recetteingrWhereInputRecursive2']
    NOT: List['recetteingrWhereInputRecursive2']


class recetteingrWhereInputRecursive2(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[_int, 'types.IntFilter']
    quantity: Union[None, _str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['recetteingrWhereInputRecursive3', List['recetteingrWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['recetteingrWhereInputRecursive3']
    OR: List['recetteingrWhereInputRecursive3']
    NOT: List['recetteingrWhereInputRecursive3']


class recetteingrWhereInputRecursive3(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[_int, 'types.IntFilter']
    quantity: Union[None, _str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'

    # should be noted that AND and NOT should be Union['recetteingrWhereInputRecursive4', List['recetteingrWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['recetteingrWhereInputRecursive4']
    OR: List['recetteingrWhereInputRecursive4']
    NOT: List['recetteingrWhereInputRecursive4']


class recetteingrWhereInputRecursive4(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntFilter']
    idIngredient: Union[_int, 'types.IntFilter']
    quantity: Union[None, _str, 'types.StringFilter']
    ingredient: 'ingredientRelationFilter'
    recette: 'recetteRelationFilter'



# aggregate recetteingr types


    

class recetteingrScalarWhereWithAggregatesInput(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteingrScalarWhereWithAggregatesInputRecursive1']
    OR: List['recetteingrScalarWhereWithAggregatesInputRecursive1']
    NOT: List['recetteingrScalarWhereWithAggregatesInputRecursive1']


class recetteingrScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteingrScalarWhereWithAggregatesInputRecursive2']
    OR: List['recetteingrScalarWhereWithAggregatesInputRecursive2']
    NOT: List['recetteingrScalarWhereWithAggregatesInputRecursive2']


class recetteingrScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteingrScalarWhereWithAggregatesInputRecursive3']
    OR: List['recetteingrScalarWhereWithAggregatesInputRecursive3']
    NOT: List['recetteingrScalarWhereWithAggregatesInputRecursive3']


class recetteingrScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['recetteingrScalarWhereWithAggregatesInputRecursive4']
    OR: List['recetteingrScalarWhereWithAggregatesInputRecursive4']
    NOT: List['recetteingrScalarWhereWithAggregatesInputRecursive4']


class recetteingrScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """recetteingr arguments for searching"""
    idRecette: Union[_int, 'types.IntWithAggregatesFilter']
    idIngredient: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_str, 'types.StringWithAggregatesFilter']



class recetteingrGroupByOutput(TypedDict, total=False):
    idRecette: _int
    idIngredient: _int
    quantity: _str
    _sum: 'recetteingrSumAggregateOutput'
    _avg: 'recetteingrAvgAggregateOutput'
    _min: 'recetteingrMinAggregateOutput'
    _max: 'recetteingrMaxAggregateOutput'
    _count: 'recetteingrCountAggregateOutput'


class recetteingrAvgAggregateOutput(TypedDict, total=False):
    """recetteingr output for aggregating averages"""
    idRecette: float
    idIngredient: float


class recetteingrSumAggregateOutput(TypedDict, total=False):
    """recetteingr output for aggregating sums"""
    idRecette: _int
    idIngredient: _int


class recetteingrScalarAggregateOutput(TypedDict, total=False):
    """recetteingr output including scalar fields"""
    idRecette: _int
    idIngredient: _int
    quantity: _str


recetteingrMinAggregateOutput = recetteingrScalarAggregateOutput
recetteingrMaxAggregateOutput = recetteingrScalarAggregateOutput


class recetteingrMaxAggregateInput(TypedDict, total=False):
    """recetteingr input for aggregating by max"""
    idRecette: bool
    idIngredient: bool
    quantity: bool


class recetteingrMinAggregateInput(TypedDict, total=False):
    """recetteingr input for aggregating by min"""
    idRecette: bool
    idIngredient: bool
    quantity: bool


class recetteingrNumberAggregateInput(TypedDict, total=False):
    """recetteingr input for aggregating numbers"""
    idRecette: bool
    idIngredient: bool


recetteingrAvgAggregateInput = recetteingrNumberAggregateInput
recetteingrSumAggregateInput = recetteingrNumberAggregateInput


recetteingrCountAggregateInput = TypedDict(
    'recetteingrCountAggregateInput',
    {
        'idRecette': bool,
        'idIngredient': bool,
        'quantity': bool,
        '_all': bool,
    },
    total=False,
)

recetteingrCountAggregateOutput = TypedDict(
    'recetteingrCountAggregateOutput',
    {
        'idRecette': int,
        'idIngredient': int,
        'quantity': int,
        '_all': int,
    },
    total=False,
)


recetteingrKeys = Literal[
    'idRecette',
    'idIngredient',
    'quantity',
    'ingredient',
    'recette',
]
recetteingrScalarFieldKeys = Literal[
    'idRecette',
    'idIngredient',
    'quantity',
]
recetteingrScalarFieldKeysT = TypeVar('recetteingrScalarFieldKeysT', bound=recetteingrScalarFieldKeys)

recetteingrRelationalFieldKeys = Literal[
        'ingredient',
        'recette',
    ]

# reclamation types

class reclamationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the reclamation create method"""
    id: _int
    idFacture: Optional[_int]
    message: Optional[_str]
    isDone: Optional[_bool]
    idCategoryClaim: Optional[_int]
    categoryclaims: 'categoryclaimsCreateNestedWithoutRelationsInput'


class reclamationCreateInput(reclamationOptionalCreateInput):
    """Required arguments to the reclamation create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class reclamationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the reclamation create method, without relations"""
    id: _int
    idFacture: Optional[_int]
    message: Optional[_str]
    isDone: Optional[_bool]
    idCategoryClaim: Optional[_int]


class reclamationCreateWithoutRelationsInput(reclamationOptionalCreateWithoutRelationsInput):
    """Required arguments to the reclamation create method, without relations"""


class reclamationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'reclamationCreateWithoutRelationsInput'
    connect: 'reclamationWhereUniqueInput'


class reclamationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['reclamationCreateWithoutRelationsInput', List['reclamationCreateWithoutRelationsInput']]
    connect: Union['reclamationWhereUniqueInput', List['reclamationWhereUniqueInput']]


_reclamationWhereUnique_id_Input = TypedDict(
    '_reclamationWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

reclamationWhereUniqueInput = _reclamationWhereUnique_id_Input


class reclamationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    idFacture: Optional[Union[AtomicIntInput, _int]]
    message: Optional[_str]
    isDone: Optional[_bool]
    categoryclaims: 'categoryclaimsUpdateOneWithoutRelationsInput'


class reclamationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    idFacture: Optional[Union[AtomicIntInput, _int]]
    message: Optional[_str]
    isDone: Optional[_bool]


class reclamationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['reclamationCreateWithoutRelationsInput']
    connect: List['reclamationWhereUniqueInput']
    set: List['reclamationWhereUniqueInput']
    disconnect: List['reclamationWhereUniqueInput']
    delete: List['reclamationWhereUniqueInput']

    # TODO
    # update: List['reclamationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['reclamationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['reclamationScalarWhereInput']
    # upsert: List['reclamationUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['reclamationCreateOrConnectWithoutRelationsInput']


class reclamationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'reclamationCreateWithoutRelationsInput'
    connect: 'reclamationWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'reclamationUpdateInput'
    # upsert: 'reclamationUpsertWithoutRelationsInput'
    # connectOrCreate: 'reclamationCreateOrConnectWithoutRelationsInput'


class reclamationUpsertInput(TypedDict):
    create: 'reclamationCreateInput'
    update: 'reclamationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_reclamation_id_OrderByInput = TypedDict(
    '_reclamation_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_reclamation_idFacture_OrderByInput = TypedDict(
    '_reclamation_idFacture_OrderByInput',
    {
        'idFacture': 'SortOrder',
    },
    total=True
)

_reclamation_message_OrderByInput = TypedDict(
    '_reclamation_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_reclamation_isDone_OrderByInput = TypedDict(
    '_reclamation_isDone_OrderByInput',
    {
        'isDone': 'SortOrder',
    },
    total=True
)

_reclamation_idCategoryClaim_OrderByInput = TypedDict(
    '_reclamation_idCategoryClaim_OrderByInput',
    {
        'idCategoryClaim': 'SortOrder',
    },
    total=True
)

reclamationOrderByInput = Union[
    '_reclamation_id_OrderByInput',
    '_reclamation_idFacture_OrderByInput',
    '_reclamation_message_OrderByInput',
    '_reclamation_isDone_OrderByInput',
    '_reclamation_idCategoryClaim_OrderByInput',
]



# recursive reclamation types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

reclamationRelationFilter = TypedDict(
    'reclamationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class reclamationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class reclamationInclude(TypedDict, total=False):
    """reclamation relational arguments"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromreclamation']


    

class annonceurIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""


class annonceurIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""


class annonceurIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""


class annonceurIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""


class annonceurIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class annonceurArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyannonceurArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""


class categorieIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""


class categorieIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""


class categorieIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""


class categorieIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class categorieArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManycategorieArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromreclamationRecursive1']


class categoryclaimsIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromreclamationRecursive2']


class categoryclaimsIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromreclamationRecursive3']


class categoryclaimsIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromreclamationRecursive4']


class categoryclaimsIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class categoryclaimsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManycategoryclaimsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    publicite: Union[bool, 'FindManypubliciteArgsFromreclamationRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromreclamationRecursive1']


class categoryrecetteIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    publicite: Union[bool, 'FindManypubliciteArgsFromreclamationRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromreclamationRecursive2']


class categoryrecetteIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    publicite: Union[bool, 'FindManypubliciteArgsFromreclamationRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromreclamationRecursive3']


class categoryrecetteIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    publicite: Union[bool, 'FindManypubliciteArgsFromreclamationRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromreclamationRecursive4']


class categoryrecetteIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class categoryrecetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManycategoryrecetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive1']


class categorysensorsIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive2']


class categorysensorsIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive3']


class categorysensorsIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive4']


class categorysensorsIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class categorysensorsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManycategorysensorsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive1']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive1']


class commandeIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive2']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive2']


class commandeIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive3']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive3']


class commandeIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive4']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive4']


class commandeIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class commandeArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManycommandeArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive1']
    pack: Union[bool, 'packArgsFromreclamationRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive1']


class distributeurIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive2']
    pack: Union[bool, 'packArgsFromreclamationRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive2']


class distributeurIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive3']
    pack: Union[bool, 'packArgsFromreclamationRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive3']


class distributeurIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive4']
    pack: Union[bool, 'packArgsFromreclamationRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromreclamationRecursive4']


class distributeurIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class distributeurArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManydistributeurArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive1']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive1']


class distributeurRecetteIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive2']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive2']


class distributeurRecetteIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive3']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive3']


class distributeurRecetteIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive4']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive4']


class distributeurRecetteIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class distributeurRecetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManydistributeurRecetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    pack: Union[bool, 'FindManypackArgsFromreclamationRecursive1']
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive1']
    users: Union[bool, 'FindManyusersArgsFromreclamationRecursive1']


class entrepiseIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    pack: Union[bool, 'FindManypackArgsFromreclamationRecursive2']
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive2']
    users: Union[bool, 'FindManyusersArgsFromreclamationRecursive2']


class entrepiseIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    pack: Union[bool, 'FindManypackArgsFromreclamationRecursive3']
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive3']
    users: Union[bool, 'FindManyusersArgsFromreclamationRecursive3']


class entrepiseIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    pack: Union[bool, 'FindManypackArgsFromreclamationRecursive4']
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive4']
    users: Union[bool, 'FindManyusersArgsFromreclamationRecursive4']


class entrepiseIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class entrepiseArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyentrepiseArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'commandeArgsFromreclamationRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromreclamationRecursive1']


class factureIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'commandeArgsFromreclamationRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromreclamationRecursive2']


class factureIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'commandeArgsFromreclamationRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromreclamationRecursive3']


class factureIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'commandeArgsFromreclamationRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromreclamationRecursive4']


class factureIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class factureArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyfactureArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive1']


class infopaimentIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive2']


class infopaimentIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive3']


class infopaimentIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    facture: Union[bool, 'FindManyfactureArgsFromreclamationRecursive4']


class infopaimentIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class infopaimentArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyinfopaimentArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive1']


class ingredientIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive2']


class ingredientIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive3']


class ingredientIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive4']


class ingredientIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class ingredientArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyingredientArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive1']


class packIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive2']


class packIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive3']


class packIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive4']


class packIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class packArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManypackArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive1']


class publiciteIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive2']


class publiciteIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive3']


class publiciteIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive4']


class publiciteIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class publiciteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManypubliciteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive1']


class recetteIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive2']


class recetteIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive3']


class recetteIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    commande: Union[bool, 'FindManycommandeArgsFromreclamationRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromreclamationRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromreclamationRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromreclamationRecursive4']


class recetteIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class recetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyrecetteArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive1']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive1']


class recetteingrIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive2']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive2']


class recetteingrIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive3']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive3']


class recetteingrIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    ingredient: Union[bool, 'ingredientArgsFromreclamationRecursive4']
    recette: Union[bool, 'recetteArgsFromreclamationRecursive4']


class recetteingrIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class recetteingrArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyrecetteingrArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromreclamationRecursive1']


class reclamationIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromreclamationRecursive2']


class reclamationIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromreclamationRecursive3']


class reclamationIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromreclamationRecursive4']


class reclamationIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class reclamationArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyreclamationArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""


class roleIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""


class roleIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""


class roleIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""


class roleIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class roleArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyroleArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromreclamationRecursive1']


class sensorsIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromreclamationRecursive2']


class sensorsIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromreclamationRecursive3']


class sensorsIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    distributeur: Union[bool, 'distributeurArgsFromreclamationRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromreclamationRecursive4']


class sensorsIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class sensorsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManysensorsArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive1']
    typetask: Union[bool, 'typetaskArgsFromreclamationRecursive1']
    users: Union[bool, 'usersArgsFromreclamationRecursive1']


class taskIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive2']
    typetask: Union[bool, 'typetaskArgsFromreclamationRecursive2']
    users: Union[bool, 'usersArgsFromreclamationRecursive2']


class taskIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive3']
    typetask: Union[bool, 'typetaskArgsFromreclamationRecursive3']
    users: Union[bool, 'usersArgsFromreclamationRecursive3']


class taskIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive4']
    typetask: Union[bool, 'typetaskArgsFromreclamationRecursive4']
    users: Union[bool, 'usersArgsFromreclamationRecursive4']


class taskIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class taskArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManytaskArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    users: Union[bool, 'usersArgsFromreclamationRecursive1']


class tokensIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    users: Union[bool, 'usersArgsFromreclamationRecursive2']


class tokensIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    users: Union[bool, 'usersArgsFromreclamationRecursive3']


class tokensIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    users: Union[bool, 'usersArgsFromreclamationRecursive4']


class tokensIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class tokensArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManytokensArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive1']


class typetaskIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive2']


class typetaskIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive3']


class typetaskIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive4']


class typetaskIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class typetaskArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManytypetaskArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromreclamation(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive1']
    tokens: Union[bool, 'tokensArgsFromreclamationRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive1']


class usersIncludeFromreclamationRecursive1(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive2']
    tokens: Union[bool, 'tokensArgsFromreclamationRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive2']


class usersIncludeFromreclamationRecursive2(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive3']
    tokens: Union[bool, 'tokensArgsFromreclamationRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive3']


class usersIncludeFromreclamationRecursive3(TypedDict, total=False):
    """Relational arguments for reclamation"""
    task: Union[bool, 'FindManytaskArgsFromreclamationRecursive4']
    tokens: Union[bool, 'tokensArgsFromreclamationRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromreclamationRecursive4']


class usersIncludeFromreclamationRecursive4(TypedDict, total=False):
    """Relational arguments for reclamation"""

    

class usersArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    
    

class FindManyusersArgsFromreclamation(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromreclamationRecursive1(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromreclamationRecursive2(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromreclamationRecursive3(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromreclamationRecursive4(TypedDict, total=False):
    """Arguments for reclamation"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyreclamationArgs = FindManyreclamationArgsFromreclamation
FindFirstreclamationArgs = FindManyreclamationArgsFromreclamation


    

class reclamationWhereInput(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idFacture: Union[None, _int, 'types.IntFilter']
    message: Union[None, _str, 'types.StringFilter']
    isDone: Union[None, _bool, 'types.BooleanFilter']
    idCategoryClaim: Union[None, _int, 'types.IntFilter']
    categoryclaims: 'categoryclaimsRelationFilter'

    # should be noted that AND and NOT should be Union['reclamationWhereInputRecursive1', List['reclamationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['reclamationWhereInputRecursive1']
    OR: List['reclamationWhereInputRecursive1']
    NOT: List['reclamationWhereInputRecursive1']


class reclamationWhereInputRecursive1(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idFacture: Union[None, _int, 'types.IntFilter']
    message: Union[None, _str, 'types.StringFilter']
    isDone: Union[None, _bool, 'types.BooleanFilter']
    idCategoryClaim: Union[None, _int, 'types.IntFilter']
    categoryclaims: 'categoryclaimsRelationFilter'

    # should be noted that AND and NOT should be Union['reclamationWhereInputRecursive2', List['reclamationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['reclamationWhereInputRecursive2']
    OR: List['reclamationWhereInputRecursive2']
    NOT: List['reclamationWhereInputRecursive2']


class reclamationWhereInputRecursive2(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idFacture: Union[None, _int, 'types.IntFilter']
    message: Union[None, _str, 'types.StringFilter']
    isDone: Union[None, _bool, 'types.BooleanFilter']
    idCategoryClaim: Union[None, _int, 'types.IntFilter']
    categoryclaims: 'categoryclaimsRelationFilter'

    # should be noted that AND and NOT should be Union['reclamationWhereInputRecursive3', List['reclamationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['reclamationWhereInputRecursive3']
    OR: List['reclamationWhereInputRecursive3']
    NOT: List['reclamationWhereInputRecursive3']


class reclamationWhereInputRecursive3(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idFacture: Union[None, _int, 'types.IntFilter']
    message: Union[None, _str, 'types.StringFilter']
    isDone: Union[None, _bool, 'types.BooleanFilter']
    idCategoryClaim: Union[None, _int, 'types.IntFilter']
    categoryclaims: 'categoryclaimsRelationFilter'

    # should be noted that AND and NOT should be Union['reclamationWhereInputRecursive4', List['reclamationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['reclamationWhereInputRecursive4']
    OR: List['reclamationWhereInputRecursive4']
    NOT: List['reclamationWhereInputRecursive4']


class reclamationWhereInputRecursive4(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idFacture: Union[None, _int, 'types.IntFilter']
    message: Union[None, _str, 'types.StringFilter']
    isDone: Union[None, _bool, 'types.BooleanFilter']
    idCategoryClaim: Union[None, _int, 'types.IntFilter']
    categoryclaims: 'categoryclaimsRelationFilter'



# aggregate reclamation types


    

class reclamationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idFacture: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    idCategoryClaim: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reclamationScalarWhereWithAggregatesInputRecursive1']
    OR: List['reclamationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['reclamationScalarWhereWithAggregatesInputRecursive1']


class reclamationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idFacture: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    idCategoryClaim: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reclamationScalarWhereWithAggregatesInputRecursive2']
    OR: List['reclamationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['reclamationScalarWhereWithAggregatesInputRecursive2']


class reclamationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idFacture: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    idCategoryClaim: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reclamationScalarWhereWithAggregatesInputRecursive3']
    OR: List['reclamationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['reclamationScalarWhereWithAggregatesInputRecursive3']


class reclamationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idFacture: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    idCategoryClaim: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reclamationScalarWhereWithAggregatesInputRecursive4']
    OR: List['reclamationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['reclamationScalarWhereWithAggregatesInputRecursive4']


class reclamationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """reclamation arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idFacture: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    idCategoryClaim: Union[_int, 'types.IntWithAggregatesFilter']



class reclamationGroupByOutput(TypedDict, total=False):
    id: _int
    idFacture: _int
    message: _str
    isDone: _bool
    idCategoryClaim: _int
    _sum: 'reclamationSumAggregateOutput'
    _avg: 'reclamationAvgAggregateOutput'
    _min: 'reclamationMinAggregateOutput'
    _max: 'reclamationMaxAggregateOutput'
    _count: 'reclamationCountAggregateOutput'


class reclamationAvgAggregateOutput(TypedDict, total=False):
    """reclamation output for aggregating averages"""
    id: float
    idFacture: float
    idCategoryClaim: float


class reclamationSumAggregateOutput(TypedDict, total=False):
    """reclamation output for aggregating sums"""
    id: _int
    idFacture: _int
    idCategoryClaim: _int


class reclamationScalarAggregateOutput(TypedDict, total=False):
    """reclamation output including scalar fields"""
    id: _int
    idFacture: _int
    message: _str
    isDone: _bool
    idCategoryClaim: _int


reclamationMinAggregateOutput = reclamationScalarAggregateOutput
reclamationMaxAggregateOutput = reclamationScalarAggregateOutput


class reclamationMaxAggregateInput(TypedDict, total=False):
    """reclamation input for aggregating by max"""
    id: bool
    idFacture: bool
    message: bool
    isDone: bool
    idCategoryClaim: bool


class reclamationMinAggregateInput(TypedDict, total=False):
    """reclamation input for aggregating by min"""
    id: bool
    idFacture: bool
    message: bool
    isDone: bool
    idCategoryClaim: bool


class reclamationNumberAggregateInput(TypedDict, total=False):
    """reclamation input for aggregating numbers"""
    id: bool
    idFacture: bool
    idCategoryClaim: bool


reclamationAvgAggregateInput = reclamationNumberAggregateInput
reclamationSumAggregateInput = reclamationNumberAggregateInput


reclamationCountAggregateInput = TypedDict(
    'reclamationCountAggregateInput',
    {
        'id': bool,
        'idFacture': bool,
        'message': bool,
        'isDone': bool,
        'idCategoryClaim': bool,
        '_all': bool,
    },
    total=False,
)

reclamationCountAggregateOutput = TypedDict(
    'reclamationCountAggregateOutput',
    {
        'id': int,
        'idFacture': int,
        'message': int,
        'isDone': int,
        'idCategoryClaim': int,
        '_all': int,
    },
    total=False,
)


reclamationKeys = Literal[
    'id',
    'idFacture',
    'message',
    'isDone',
    'idCategoryClaim',
    'categoryclaims',
]
reclamationScalarFieldKeys = Literal[
    'id',
    'idFacture',
    'message',
    'isDone',
    'idCategoryClaim',
]
reclamationScalarFieldKeysT = TypeVar('reclamationScalarFieldKeysT', bound=reclamationScalarFieldKeys)

reclamationRelationalFieldKeys = Literal[
        'categoryclaims',
    ]

# role types

class roleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the role create method"""
    id: _int
    description: Optional[_str]


class roleCreateInput(roleOptionalCreateInput):
    """Required arguments to the role create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class roleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the role create method, without relations"""
    id: _int
    description: Optional[_str]


class roleCreateWithoutRelationsInput(roleOptionalCreateWithoutRelationsInput):
    """Required arguments to the role create method, without relations"""


class roleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'roleCreateWithoutRelationsInput'
    connect: 'roleWhereUniqueInput'


class roleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['roleCreateWithoutRelationsInput', List['roleCreateWithoutRelationsInput']]
    connect: Union['roleWhereUniqueInput', List['roleWhereUniqueInput']]


_roleWhereUnique_id_Input = TypedDict(
    '_roleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

roleWhereUniqueInput = _roleWhereUnique_id_Input


class roleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    description: Optional[_str]


class roleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    description: Optional[_str]


class roleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['roleCreateWithoutRelationsInput']
    connect: List['roleWhereUniqueInput']
    set: List['roleWhereUniqueInput']
    disconnect: List['roleWhereUniqueInput']
    delete: List['roleWhereUniqueInput']

    # TODO
    # update: List['roleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['roleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['roleScalarWhereInput']
    # upsert: List['roleUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['roleCreateOrConnectWithoutRelationsInput']


class roleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'roleCreateWithoutRelationsInput'
    connect: 'roleWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'roleUpdateInput'
    # upsert: 'roleUpsertWithoutRelationsInput'
    # connectOrCreate: 'roleCreateOrConnectWithoutRelationsInput'


class roleUpsertInput(TypedDict):
    create: 'roleCreateInput'
    update: 'roleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_role_id_OrderByInput = TypedDict(
    '_role_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_role_description_OrderByInput = TypedDict(
    '_role_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

roleOrderByInput = Union[
    '_role_id_OrderByInput',
    '_role_description_OrderByInput',
]



# recursive role types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

roleRelationFilter = TypedDict(
    'roleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class roleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class roleInclude(TypedDict, total=False):
    """role relational arguments"""


    

class annonceurIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""


class annonceurIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""


class annonceurIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""


class annonceurIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""


class annonceurIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class annonceurArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyannonceurArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""


class categorieIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""


class categorieIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""


class categorieIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""


class categorieIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class categorieArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManycategorieArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromroleRecursive1']


class categoryclaimsIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromroleRecursive2']


class categoryclaimsIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromroleRecursive3']


class categoryclaimsIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromroleRecursive4']


class categoryclaimsIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class categoryclaimsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManycategoryclaimsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    publicite: Union[bool, 'FindManypubliciteArgsFromroleRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromroleRecursive1']


class categoryrecetteIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    publicite: Union[bool, 'FindManypubliciteArgsFromroleRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromroleRecursive2']


class categoryrecetteIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    publicite: Union[bool, 'FindManypubliciteArgsFromroleRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromroleRecursive3']


class categoryrecetteIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    publicite: Union[bool, 'FindManypubliciteArgsFromroleRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromroleRecursive4']


class categoryrecetteIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class categoryrecetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManycategoryrecetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive1']


class categorysensorsIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive2']


class categorysensorsIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive3']


class categorysensorsIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive4']


class categorysensorsIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class categorysensorsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManycategorysensorsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive1']
    recette: Union[bool, 'recetteArgsFromroleRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive1']


class commandeIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive2']
    recette: Union[bool, 'recetteArgsFromroleRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive2']


class commandeIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive3']
    recette: Union[bool, 'recetteArgsFromroleRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive3']


class commandeIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive4']
    recette: Union[bool, 'recetteArgsFromroleRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive4']


class commandeIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class commandeArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManycommandeArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive1']
    pack: Union[bool, 'packArgsFromroleRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive1']


class distributeurIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive2']
    pack: Union[bool, 'packArgsFromroleRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive2']


class distributeurIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive3']
    pack: Union[bool, 'packArgsFromroleRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive3']


class distributeurIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive4']
    pack: Union[bool, 'packArgsFromroleRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromroleRecursive4']


class distributeurIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class distributeurArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManydistributeurArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive1']
    recette: Union[bool, 'recetteArgsFromroleRecursive1']


class distributeurRecetteIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive2']
    recette: Union[bool, 'recetteArgsFromroleRecursive2']


class distributeurRecetteIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive3']
    recette: Union[bool, 'recetteArgsFromroleRecursive3']


class distributeurRecetteIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive4']
    recette: Union[bool, 'recetteArgsFromroleRecursive4']


class distributeurRecetteIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class distributeurRecetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManydistributeurRecetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    pack: Union[bool, 'FindManypackArgsFromroleRecursive1']
    task: Union[bool, 'FindManytaskArgsFromroleRecursive1']
    users: Union[bool, 'FindManyusersArgsFromroleRecursive1']


class entrepiseIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    pack: Union[bool, 'FindManypackArgsFromroleRecursive2']
    task: Union[bool, 'FindManytaskArgsFromroleRecursive2']
    users: Union[bool, 'FindManyusersArgsFromroleRecursive2']


class entrepiseIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    pack: Union[bool, 'FindManypackArgsFromroleRecursive3']
    task: Union[bool, 'FindManytaskArgsFromroleRecursive3']
    users: Union[bool, 'FindManyusersArgsFromroleRecursive3']


class entrepiseIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    pack: Union[bool, 'FindManypackArgsFromroleRecursive4']
    task: Union[bool, 'FindManytaskArgsFromroleRecursive4']
    users: Union[bool, 'FindManyusersArgsFromroleRecursive4']


class entrepiseIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class entrepiseArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyentrepiseArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'commandeArgsFromroleRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromroleRecursive1']


class factureIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'commandeArgsFromroleRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromroleRecursive2']


class factureIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'commandeArgsFromroleRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromroleRecursive3']


class factureIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'commandeArgsFromroleRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromroleRecursive4']


class factureIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class factureArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyfactureArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive1']


class infopaimentIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive2']


class infopaimentIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive3']


class infopaimentIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    facture: Union[bool, 'FindManyfactureArgsFromroleRecursive4']


class infopaimentIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class infopaimentArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyinfopaimentArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive1']


class ingredientIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive2']


class ingredientIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive3']


class ingredientIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive4']


class ingredientIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class ingredientArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyingredientArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive1']


class packIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive2']


class packIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive3']


class packIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive4']


class packIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class packArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManypackArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive1']


class publiciteIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive2']


class publiciteIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive3']


class publiciteIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive4']


class publiciteIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class publiciteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManypubliciteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive1']


class recetteIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive2']


class recetteIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive3']


class recetteIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    commande: Union[bool, 'FindManycommandeArgsFromroleRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromroleRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromroleRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromroleRecursive4']


class recetteIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class recetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyrecetteArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive1']
    recette: Union[bool, 'recetteArgsFromroleRecursive1']


class recetteingrIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive2']
    recette: Union[bool, 'recetteArgsFromroleRecursive2']


class recetteingrIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive3']
    recette: Union[bool, 'recetteArgsFromroleRecursive3']


class recetteingrIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    ingredient: Union[bool, 'ingredientArgsFromroleRecursive4']
    recette: Union[bool, 'recetteArgsFromroleRecursive4']


class recetteingrIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class recetteingrArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyrecetteingrArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromroleRecursive1']


class reclamationIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromroleRecursive2']


class reclamationIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromroleRecursive3']


class reclamationIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromroleRecursive4']


class reclamationIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class reclamationArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyreclamationArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""


class roleIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""


class roleIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""


class roleIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""


class roleIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class roleArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyroleArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromroleRecursive1']


class sensorsIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromroleRecursive2']


class sensorsIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromroleRecursive3']


class sensorsIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    distributeur: Union[bool, 'distributeurArgsFromroleRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromroleRecursive4']


class sensorsIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class sensorsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManysensorsArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive1']
    typetask: Union[bool, 'typetaskArgsFromroleRecursive1']
    users: Union[bool, 'usersArgsFromroleRecursive1']


class taskIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive2']
    typetask: Union[bool, 'typetaskArgsFromroleRecursive2']
    users: Union[bool, 'usersArgsFromroleRecursive2']


class taskIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive3']
    typetask: Union[bool, 'typetaskArgsFromroleRecursive3']
    users: Union[bool, 'usersArgsFromroleRecursive3']


class taskIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive4']
    typetask: Union[bool, 'typetaskArgsFromroleRecursive4']
    users: Union[bool, 'usersArgsFromroleRecursive4']


class taskIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class taskArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManytaskArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    users: Union[bool, 'usersArgsFromroleRecursive1']


class tokensIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    users: Union[bool, 'usersArgsFromroleRecursive2']


class tokensIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    users: Union[bool, 'usersArgsFromroleRecursive3']


class tokensIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    users: Union[bool, 'usersArgsFromroleRecursive4']


class tokensIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class tokensArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManytokensArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive1']


class typetaskIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive2']


class typetaskIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive3']


class typetaskIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive4']


class typetaskIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class typetaskArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManytypetaskArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromrole(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive1']
    tokens: Union[bool, 'tokensArgsFromroleRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive1']


class usersIncludeFromroleRecursive1(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive2']
    tokens: Union[bool, 'tokensArgsFromroleRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive2']


class usersIncludeFromroleRecursive2(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive3']
    tokens: Union[bool, 'tokensArgsFromroleRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive3']


class usersIncludeFromroleRecursive3(TypedDict, total=False):
    """Relational arguments for role"""
    task: Union[bool, 'FindManytaskArgsFromroleRecursive4']
    tokens: Union[bool, 'tokensArgsFromroleRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromroleRecursive4']


class usersIncludeFromroleRecursive4(TypedDict, total=False):
    """Relational arguments for role"""

    

class usersArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    
    

class FindManyusersArgsFromrole(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromroleRecursive1(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromroleRecursive2(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromroleRecursive3(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromroleRecursive4(TypedDict, total=False):
    """Arguments for role"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyroleArgs = FindManyroleArgsFromrole
FindFirstroleArgs = FindManyroleArgsFromrole


    

class roleWhereInput(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['roleWhereInputRecursive1', List['roleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['roleWhereInputRecursive1']
    OR: List['roleWhereInputRecursive1']
    NOT: List['roleWhereInputRecursive1']


class roleWhereInputRecursive1(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['roleWhereInputRecursive2', List['roleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['roleWhereInputRecursive2']
    OR: List['roleWhereInputRecursive2']
    NOT: List['roleWhereInputRecursive2']


class roleWhereInputRecursive2(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['roleWhereInputRecursive3', List['roleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['roleWhereInputRecursive3']
    OR: List['roleWhereInputRecursive3']
    NOT: List['roleWhereInputRecursive3']


class roleWhereInputRecursive3(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['roleWhereInputRecursive4', List['roleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['roleWhereInputRecursive4']
    OR: List['roleWhereInputRecursive4']
    NOT: List['roleWhereInputRecursive4']


class roleWhereInputRecursive4(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']



# aggregate role types


    

class roleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['roleScalarWhereWithAggregatesInputRecursive1']
    OR: List['roleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['roleScalarWhereWithAggregatesInputRecursive1']


class roleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['roleScalarWhereWithAggregatesInputRecursive2']
    OR: List['roleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['roleScalarWhereWithAggregatesInputRecursive2']


class roleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['roleScalarWhereWithAggregatesInputRecursive3']
    OR: List['roleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['roleScalarWhereWithAggregatesInputRecursive3']


class roleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['roleScalarWhereWithAggregatesInputRecursive4']
    OR: List['roleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['roleScalarWhereWithAggregatesInputRecursive4']


class roleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """role arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class roleGroupByOutput(TypedDict, total=False):
    id: _int
    description: _str
    _sum: 'roleSumAggregateOutput'
    _avg: 'roleAvgAggregateOutput'
    _min: 'roleMinAggregateOutput'
    _max: 'roleMaxAggregateOutput'
    _count: 'roleCountAggregateOutput'


class roleAvgAggregateOutput(TypedDict, total=False):
    """role output for aggregating averages"""
    id: float


class roleSumAggregateOutput(TypedDict, total=False):
    """role output for aggregating sums"""
    id: _int


class roleScalarAggregateOutput(TypedDict, total=False):
    """role output including scalar fields"""
    id: _int
    description: _str


roleMinAggregateOutput = roleScalarAggregateOutput
roleMaxAggregateOutput = roleScalarAggregateOutput


class roleMaxAggregateInput(TypedDict, total=False):
    """role input for aggregating by max"""
    id: bool
    description: bool


class roleMinAggregateInput(TypedDict, total=False):
    """role input for aggregating by min"""
    id: bool
    description: bool


class roleNumberAggregateInput(TypedDict, total=False):
    """role input for aggregating numbers"""
    id: bool


roleAvgAggregateInput = roleNumberAggregateInput
roleSumAggregateInput = roleNumberAggregateInput


roleCountAggregateInput = TypedDict(
    'roleCountAggregateInput',
    {
        'id': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

roleCountAggregateOutput = TypedDict(
    'roleCountAggregateOutput',
    {
        'id': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


roleKeys = Literal[
    'id',
    'description',
]
roleScalarFieldKeys = Literal[
    'id',
    'description',
]
roleScalarFieldKeysT = TypeVar('roleScalarFieldKeysT', bound=roleScalarFieldKeys)

roleRelationalFieldKeys = _NoneType

# sensors types

class sensorsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the sensors create method"""
    id: _int
    idDistr: _int
    idSensor: _int
    date: Optional[_str]
    distributeur: 'distributeurCreateNestedWithoutRelationsInput'
    categorysensors: 'categorysensorsCreateNestedWithoutRelationsInput'


class sensorsCreateInput(sensorsOptionalCreateInput):
    """Required arguments to the sensors create method"""
    value: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class sensorsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the sensors create method, without relations"""
    id: _int
    idDistr: _int
    idSensor: _int
    date: Optional[_str]


class sensorsCreateWithoutRelationsInput(sensorsOptionalCreateWithoutRelationsInput):
    """Required arguments to the sensors create method, without relations"""
    value: _str


class sensorsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'sensorsCreateWithoutRelationsInput'
    connect: 'sensorsWhereUniqueInput'


class sensorsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['sensorsCreateWithoutRelationsInput', List['sensorsCreateWithoutRelationsInput']]
    connect: Union['sensorsWhereUniqueInput', List['sensorsWhereUniqueInput']]


_sensorsWhereUnique_id_Input = TypedDict(
    '_sensorsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

sensorsWhereUniqueInput = _sensorsWhereUnique_id_Input


class sensorsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    value: _str
    date: Optional[_str]
    distributeur: 'distributeurUpdateOneWithoutRelationsInput'
    categorysensors: 'categorysensorsUpdateOneWithoutRelationsInput'


class sensorsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    value: _str
    date: Optional[_str]


class sensorsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['sensorsCreateWithoutRelationsInput']
    connect: List['sensorsWhereUniqueInput']
    set: List['sensorsWhereUniqueInput']
    disconnect: List['sensorsWhereUniqueInput']
    delete: List['sensorsWhereUniqueInput']

    # TODO
    # update: List['sensorsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['sensorsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['sensorsScalarWhereInput']
    # upsert: List['sensorsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['sensorsCreateOrConnectWithoutRelationsInput']


class sensorsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'sensorsCreateWithoutRelationsInput'
    connect: 'sensorsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'sensorsUpdateInput'
    # upsert: 'sensorsUpsertWithoutRelationsInput'
    # connectOrCreate: 'sensorsCreateOrConnectWithoutRelationsInput'


class sensorsUpsertInput(TypedDict):
    create: 'sensorsCreateInput'
    update: 'sensorsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_sensors_id_OrderByInput = TypedDict(
    '_sensors_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_sensors_idDistr_OrderByInput = TypedDict(
    '_sensors_idDistr_OrderByInput',
    {
        'idDistr': 'SortOrder',
    },
    total=True
)

_sensors_idSensor_OrderByInput = TypedDict(
    '_sensors_idSensor_OrderByInput',
    {
        'idSensor': 'SortOrder',
    },
    total=True
)

_sensors_value_OrderByInput = TypedDict(
    '_sensors_value_OrderByInput',
    {
        'value': 'SortOrder',
    },
    total=True
)

_sensors_date_OrderByInput = TypedDict(
    '_sensors_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

sensorsOrderByInput = Union[
    '_sensors_id_OrderByInput',
    '_sensors_idDistr_OrderByInput',
    '_sensors_idSensor_OrderByInput',
    '_sensors_value_OrderByInput',
    '_sensors_date_OrderByInput',
]



# recursive sensors types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

sensorsRelationFilter = TypedDict(
    'sensorsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class sensorsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class sensorsInclude(TypedDict, total=False):
    """sensors relational arguments"""
    distributeur: Union[bool, 'distributeurArgsFromsensors']
    categorysensors: Union[bool, 'categorysensorsArgsFromsensors']


    

class annonceurIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""


class annonceurIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""


class annonceurIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""


class annonceurIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""


class annonceurIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class annonceurArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyannonceurArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""


class categorieIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""


class categorieIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""


class categorieIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""


class categorieIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class categorieArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManycategorieArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromsensorsRecursive1']


class categoryclaimsIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromsensorsRecursive2']


class categoryclaimsIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromsensorsRecursive3']


class categoryclaimsIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromsensorsRecursive4']


class categoryclaimsIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class categoryclaimsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManycategoryclaimsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromsensorsRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromsensorsRecursive1']


class categoryrecetteIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromsensorsRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromsensorsRecursive2']


class categoryrecetteIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromsensorsRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromsensorsRecursive3']


class categoryrecetteIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    publicite: Union[bool, 'FindManypubliciteArgsFromsensorsRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromsensorsRecursive4']


class categoryrecetteIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class categoryrecetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManycategoryrecetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive1']


class categorysensorsIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive2']


class categorysensorsIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive3']


class categorysensorsIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive4']


class categorysensorsIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class categorysensorsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManycategorysensorsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive1']


class commandeIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive2']


class commandeIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive3']


class commandeIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive4']


class commandeIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class commandeArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManycommandeArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive1']
    pack: Union[bool, 'packArgsFromsensorsRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive1']


class distributeurIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive2']
    pack: Union[bool, 'packArgsFromsensorsRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive2']


class distributeurIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive3']
    pack: Union[bool, 'packArgsFromsensorsRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive3']


class distributeurIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive4']
    pack: Union[bool, 'packArgsFromsensorsRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromsensorsRecursive4']


class distributeurIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class distributeurArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManydistributeurArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive1']


class distributeurRecetteIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive2']


class distributeurRecetteIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive3']


class distributeurRecetteIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive4']


class distributeurRecetteIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class distributeurRecetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManydistributeurRecetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    pack: Union[bool, 'FindManypackArgsFromsensorsRecursive1']
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive1']
    users: Union[bool, 'FindManyusersArgsFromsensorsRecursive1']


class entrepiseIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    pack: Union[bool, 'FindManypackArgsFromsensorsRecursive2']
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive2']
    users: Union[bool, 'FindManyusersArgsFromsensorsRecursive2']


class entrepiseIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    pack: Union[bool, 'FindManypackArgsFromsensorsRecursive3']
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive3']
    users: Union[bool, 'FindManyusersArgsFromsensorsRecursive3']


class entrepiseIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    pack: Union[bool, 'FindManypackArgsFromsensorsRecursive4']
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive4']
    users: Union[bool, 'FindManyusersArgsFromsensorsRecursive4']


class entrepiseIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class entrepiseArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyentrepiseArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'commandeArgsFromsensorsRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromsensorsRecursive1']


class factureIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'commandeArgsFromsensorsRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromsensorsRecursive2']


class factureIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'commandeArgsFromsensorsRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromsensorsRecursive3']


class factureIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'commandeArgsFromsensorsRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromsensorsRecursive4']


class factureIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class factureArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyfactureArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive1']


class infopaimentIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive2']


class infopaimentIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive3']


class infopaimentIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    facture: Union[bool, 'FindManyfactureArgsFromsensorsRecursive4']


class infopaimentIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class infopaimentArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyinfopaimentArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive1']


class ingredientIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive2']


class ingredientIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive3']


class ingredientIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive4']


class ingredientIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class ingredientArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyingredientArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive1']


class packIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive2']


class packIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive3']


class packIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive4']


class packIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class packArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManypackArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive1']


class publiciteIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive2']


class publiciteIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive3']


class publiciteIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive4']


class publiciteIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class publiciteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManypubliciteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive1']


class recetteIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive2']


class recetteIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive3']


class recetteIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    commande: Union[bool, 'FindManycommandeArgsFromsensorsRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromsensorsRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromsensorsRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromsensorsRecursive4']


class recetteIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class recetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyrecetteArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive1']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive1']


class recetteingrIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive2']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive2']


class recetteingrIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive3']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive3']


class recetteingrIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    ingredient: Union[bool, 'ingredientArgsFromsensorsRecursive4']
    recette: Union[bool, 'recetteArgsFromsensorsRecursive4']


class recetteingrIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class recetteingrArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyrecetteingrArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromsensorsRecursive1']


class reclamationIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromsensorsRecursive2']


class reclamationIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromsensorsRecursive3']


class reclamationIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromsensorsRecursive4']


class reclamationIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class reclamationArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyreclamationArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""


class roleIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""


class roleIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""


class roleIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""


class roleIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class roleArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyroleArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromsensorsRecursive1']


class sensorsIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromsensorsRecursive2']


class sensorsIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromsensorsRecursive3']


class sensorsIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    distributeur: Union[bool, 'distributeurArgsFromsensorsRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromsensorsRecursive4']


class sensorsIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class sensorsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManysensorsArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive1']
    typetask: Union[bool, 'typetaskArgsFromsensorsRecursive1']
    users: Union[bool, 'usersArgsFromsensorsRecursive1']


class taskIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive2']
    typetask: Union[bool, 'typetaskArgsFromsensorsRecursive2']
    users: Union[bool, 'usersArgsFromsensorsRecursive2']


class taskIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive3']
    typetask: Union[bool, 'typetaskArgsFromsensorsRecursive3']
    users: Union[bool, 'usersArgsFromsensorsRecursive3']


class taskIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive4']
    typetask: Union[bool, 'typetaskArgsFromsensorsRecursive4']
    users: Union[bool, 'usersArgsFromsensorsRecursive4']


class taskIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class taskArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManytaskArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    users: Union[bool, 'usersArgsFromsensorsRecursive1']


class tokensIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    users: Union[bool, 'usersArgsFromsensorsRecursive2']


class tokensIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    users: Union[bool, 'usersArgsFromsensorsRecursive3']


class tokensIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    users: Union[bool, 'usersArgsFromsensorsRecursive4']


class tokensIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class tokensArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManytokensArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive1']


class typetaskIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive2']


class typetaskIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive3']


class typetaskIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive4']


class typetaskIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class typetaskArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManytypetaskArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromsensors(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive1']
    tokens: Union[bool, 'tokensArgsFromsensorsRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive1']


class usersIncludeFromsensorsRecursive1(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive2']
    tokens: Union[bool, 'tokensArgsFromsensorsRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive2']


class usersIncludeFromsensorsRecursive2(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive3']
    tokens: Union[bool, 'tokensArgsFromsensorsRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive3']


class usersIncludeFromsensorsRecursive3(TypedDict, total=False):
    """Relational arguments for sensors"""
    task: Union[bool, 'FindManytaskArgsFromsensorsRecursive4']
    tokens: Union[bool, 'tokensArgsFromsensorsRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromsensorsRecursive4']


class usersIncludeFromsensorsRecursive4(TypedDict, total=False):
    """Relational arguments for sensors"""

    

class usersArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    
    

class FindManyusersArgsFromsensors(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromsensorsRecursive1(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromsensorsRecursive2(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromsensorsRecursive3(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromsensorsRecursive4(TypedDict, total=False):
    """Arguments for sensors"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManysensorsArgs = FindManysensorsArgsFromsensors
FindFirstsensorsArgs = FindManysensorsArgsFromsensors


    

class sensorsWhereInput(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idSensor: Union[_int, 'types.IntFilter']
    value: Union[_str, 'types.StringFilter']
    date: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    categorysensors: 'categorysensorsRelationFilter'

    # should be noted that AND and NOT should be Union['sensorsWhereInputRecursive1', List['sensorsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['sensorsWhereInputRecursive1']
    OR: List['sensorsWhereInputRecursive1']
    NOT: List['sensorsWhereInputRecursive1']


class sensorsWhereInputRecursive1(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idSensor: Union[_int, 'types.IntFilter']
    value: Union[_str, 'types.StringFilter']
    date: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    categorysensors: 'categorysensorsRelationFilter'

    # should be noted that AND and NOT should be Union['sensorsWhereInputRecursive2', List['sensorsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['sensorsWhereInputRecursive2']
    OR: List['sensorsWhereInputRecursive2']
    NOT: List['sensorsWhereInputRecursive2']


class sensorsWhereInputRecursive2(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idSensor: Union[_int, 'types.IntFilter']
    value: Union[_str, 'types.StringFilter']
    date: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    categorysensors: 'categorysensorsRelationFilter'

    # should be noted that AND and NOT should be Union['sensorsWhereInputRecursive3', List['sensorsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['sensorsWhereInputRecursive3']
    OR: List['sensorsWhereInputRecursive3']
    NOT: List['sensorsWhereInputRecursive3']


class sensorsWhereInputRecursive3(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idSensor: Union[_int, 'types.IntFilter']
    value: Union[_str, 'types.StringFilter']
    date: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    categorysensors: 'categorysensorsRelationFilter'

    # should be noted that AND and NOT should be Union['sensorsWhereInputRecursive4', List['sensorsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['sensorsWhereInputRecursive4']
    OR: List['sensorsWhereInputRecursive4']
    NOT: List['sensorsWhereInputRecursive4']


class sensorsWhereInputRecursive4(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idSensor: Union[_int, 'types.IntFilter']
    value: Union[_str, 'types.StringFilter']
    date: Union[None, _str, 'types.StringFilter']
    distributeur: 'distributeurRelationFilter'
    categorysensors: 'categorysensorsRelationFilter'



# aggregate sensors types


    

class sensorsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idSensor: Union[_int, 'types.IntWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['sensorsScalarWhereWithAggregatesInputRecursive1']
    OR: List['sensorsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['sensorsScalarWhereWithAggregatesInputRecursive1']


class sensorsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idSensor: Union[_int, 'types.IntWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['sensorsScalarWhereWithAggregatesInputRecursive2']
    OR: List['sensorsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['sensorsScalarWhereWithAggregatesInputRecursive2']


class sensorsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idSensor: Union[_int, 'types.IntWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['sensorsScalarWhereWithAggregatesInputRecursive3']
    OR: List['sensorsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['sensorsScalarWhereWithAggregatesInputRecursive3']


class sensorsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idSensor: Union[_int, 'types.IntWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['sensorsScalarWhereWithAggregatesInputRecursive4']
    OR: List['sensorsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['sensorsScalarWhereWithAggregatesInputRecursive4']


class sensorsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """sensors arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idSensor: Union[_int, 'types.IntWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']



class sensorsGroupByOutput(TypedDict, total=False):
    id: _int
    idDistr: _int
    idSensor: _int
    value: _str
    date: _str
    _sum: 'sensorsSumAggregateOutput'
    _avg: 'sensorsAvgAggregateOutput'
    _min: 'sensorsMinAggregateOutput'
    _max: 'sensorsMaxAggregateOutput'
    _count: 'sensorsCountAggregateOutput'


class sensorsAvgAggregateOutput(TypedDict, total=False):
    """sensors output for aggregating averages"""
    id: float
    idDistr: float
    idSensor: float


class sensorsSumAggregateOutput(TypedDict, total=False):
    """sensors output for aggregating sums"""
    id: _int
    idDistr: _int
    idSensor: _int


class sensorsScalarAggregateOutput(TypedDict, total=False):
    """sensors output including scalar fields"""
    id: _int
    idDistr: _int
    idSensor: _int
    value: _str
    date: _str


sensorsMinAggregateOutput = sensorsScalarAggregateOutput
sensorsMaxAggregateOutput = sensorsScalarAggregateOutput


class sensorsMaxAggregateInput(TypedDict, total=False):
    """sensors input for aggregating by max"""
    id: bool
    idDistr: bool
    idSensor: bool
    value: bool
    date: bool


class sensorsMinAggregateInput(TypedDict, total=False):
    """sensors input for aggregating by min"""
    id: bool
    idDistr: bool
    idSensor: bool
    value: bool
    date: bool


class sensorsNumberAggregateInput(TypedDict, total=False):
    """sensors input for aggregating numbers"""
    id: bool
    idDistr: bool
    idSensor: bool


sensorsAvgAggregateInput = sensorsNumberAggregateInput
sensorsSumAggregateInput = sensorsNumberAggregateInput


sensorsCountAggregateInput = TypedDict(
    'sensorsCountAggregateInput',
    {
        'id': bool,
        'idDistr': bool,
        'idSensor': bool,
        'value': bool,
        'date': bool,
        '_all': bool,
    },
    total=False,
)

sensorsCountAggregateOutput = TypedDict(
    'sensorsCountAggregateOutput',
    {
        'id': int,
        'idDistr': int,
        'idSensor': int,
        'value': int,
        'date': int,
        '_all': int,
    },
    total=False,
)


sensorsKeys = Literal[
    'id',
    'idDistr',
    'idSensor',
    'value',
    'date',
    'distributeur',
    'categorysensors',
]
sensorsScalarFieldKeys = Literal[
    'id',
    'idDistr',
    'idSensor',
    'value',
    'date',
]
sensorsScalarFieldKeysT = TypeVar('sensorsScalarFieldKeysT', bound=sensorsScalarFieldKeys)

sensorsRelationalFieldKeys = Literal[
        'distributeur',
        'categorysensors',
    ]

# task types

class taskOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the task create method"""
    id: _int
    idUser: Optional[_int]
    idEntre: _int
    idType: _int
    isDone: _bool
    isOpen: _bool
    entrepise: 'entrepiseCreateNestedWithoutRelationsInput'
    typetask: 'typetaskCreateNestedWithoutRelationsInput'
    users: 'usersCreateNestedWithoutRelationsInput'


class taskCreateInput(taskOptionalCreateInput):
    """Required arguments to the task create method"""
    idDistr: _int
    date: _str
    time: _str
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class taskOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the task create method, without relations"""
    id: _int
    idUser: Optional[_int]
    idEntre: _int
    idType: _int
    isDone: _bool
    isOpen: _bool


class taskCreateWithoutRelationsInput(taskOptionalCreateWithoutRelationsInput):
    """Required arguments to the task create method, without relations"""
    idDistr: _int
    date: _str
    time: _str
    message: _str


class taskCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'taskCreateWithoutRelationsInput'
    connect: 'taskWhereUniqueInput'


class taskCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['taskCreateWithoutRelationsInput', List['taskCreateWithoutRelationsInput']]
    connect: Union['taskWhereUniqueInput', List['taskWhereUniqueInput']]


_taskWhereUnique_id_Input = TypedDict(
    '_taskWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

taskWhereUniqueInput = _taskWhereUnique_id_Input


class taskUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    idDistr: Union[AtomicIntInput, _int]
    isDone: _bool
    isOpen: _bool
    date: _str
    time: _str
    message: _str
    entrepise: 'entrepiseUpdateOneWithoutRelationsInput'
    typetask: 'typetaskUpdateOneWithoutRelationsInput'
    users: 'usersUpdateOneWithoutRelationsInput'


class taskUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    idDistr: Union[AtomicIntInput, _int]
    isDone: _bool
    isOpen: _bool
    date: _str
    time: _str
    message: _str


class taskUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['taskCreateWithoutRelationsInput']
    connect: List['taskWhereUniqueInput']
    set: List['taskWhereUniqueInput']
    disconnect: List['taskWhereUniqueInput']
    delete: List['taskWhereUniqueInput']

    # TODO
    # update: List['taskUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['taskUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['taskScalarWhereInput']
    # upsert: List['taskUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['taskCreateOrConnectWithoutRelationsInput']


class taskUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'taskCreateWithoutRelationsInput'
    connect: 'taskWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'taskUpdateInput'
    # upsert: 'taskUpsertWithoutRelationsInput'
    # connectOrCreate: 'taskCreateOrConnectWithoutRelationsInput'


class taskUpsertInput(TypedDict):
    create: 'taskCreateInput'
    update: 'taskUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_task_id_OrderByInput = TypedDict(
    '_task_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_task_idDistr_OrderByInput = TypedDict(
    '_task_idDistr_OrderByInput',
    {
        'idDistr': 'SortOrder',
    },
    total=True
)

_task_idUser_OrderByInput = TypedDict(
    '_task_idUser_OrderByInput',
    {
        'idUser': 'SortOrder',
    },
    total=True
)

_task_idEntre_OrderByInput = TypedDict(
    '_task_idEntre_OrderByInput',
    {
        'idEntre': 'SortOrder',
    },
    total=True
)

_task_idType_OrderByInput = TypedDict(
    '_task_idType_OrderByInput',
    {
        'idType': 'SortOrder',
    },
    total=True
)

_task_isDone_OrderByInput = TypedDict(
    '_task_isDone_OrderByInput',
    {
        'isDone': 'SortOrder',
    },
    total=True
)

_task_isOpen_OrderByInput = TypedDict(
    '_task_isOpen_OrderByInput',
    {
        'isOpen': 'SortOrder',
    },
    total=True
)

_task_date_OrderByInput = TypedDict(
    '_task_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_task_time_OrderByInput = TypedDict(
    '_task_time_OrderByInput',
    {
        'time': 'SortOrder',
    },
    total=True
)

_task_message_OrderByInput = TypedDict(
    '_task_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

taskOrderByInput = Union[
    '_task_id_OrderByInput',
    '_task_idDistr_OrderByInput',
    '_task_idUser_OrderByInput',
    '_task_idEntre_OrderByInput',
    '_task_idType_OrderByInput',
    '_task_isDone_OrderByInput',
    '_task_isOpen_OrderByInput',
    '_task_date_OrderByInput',
    '_task_time_OrderByInput',
    '_task_message_OrderByInput',
]



# recursive task types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

taskRelationFilter = TypedDict(
    'taskRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class taskListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class taskInclude(TypedDict, total=False):
    """task relational arguments"""
    entrepise: Union[bool, 'entrepiseArgsFromtask']
    typetask: Union[bool, 'typetaskArgsFromtask']
    users: Union[bool, 'usersArgsFromtask']


    

class annonceurIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""


class annonceurIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""


class annonceurIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""


class annonceurIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""


class annonceurIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class annonceurArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyannonceurArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""


class categorieIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""


class categorieIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""


class categorieIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""


class categorieIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class categorieArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManycategorieArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtaskRecursive1']


class categoryclaimsIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtaskRecursive2']


class categoryclaimsIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtaskRecursive3']


class categoryclaimsIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtaskRecursive4']


class categoryclaimsIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class categoryclaimsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManycategoryclaimsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtaskRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromtaskRecursive1']


class categoryrecetteIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtaskRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromtaskRecursive2']


class categoryrecetteIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtaskRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromtaskRecursive3']


class categoryrecetteIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtaskRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromtaskRecursive4']


class categoryrecetteIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class categoryrecetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManycategoryrecetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive1']


class categorysensorsIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive2']


class categorysensorsIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive3']


class categorysensorsIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive4']


class categorysensorsIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class categorysensorsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManycategorysensorsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtaskRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive1']


class commandeIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtaskRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive2']


class commandeIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtaskRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive3']


class commandeIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtaskRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive4']


class commandeIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class commandeArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManycommandeArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive1']
    pack: Union[bool, 'packArgsFromtaskRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive1']


class distributeurIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive2']
    pack: Union[bool, 'packArgsFromtaskRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive2']


class distributeurIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive3']
    pack: Union[bool, 'packArgsFromtaskRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive3']


class distributeurIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive4']
    pack: Union[bool, 'packArgsFromtaskRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromtaskRecursive4']


class distributeurIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class distributeurArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManydistributeurArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtaskRecursive1']


class distributeurRecetteIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtaskRecursive2']


class distributeurRecetteIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtaskRecursive3']


class distributeurRecetteIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtaskRecursive4']


class distributeurRecetteIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class distributeurRecetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManydistributeurRecetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    pack: Union[bool, 'FindManypackArgsFromtaskRecursive1']
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive1']
    users: Union[bool, 'FindManyusersArgsFromtaskRecursive1']


class entrepiseIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    pack: Union[bool, 'FindManypackArgsFromtaskRecursive2']
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive2']
    users: Union[bool, 'FindManyusersArgsFromtaskRecursive2']


class entrepiseIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    pack: Union[bool, 'FindManypackArgsFromtaskRecursive3']
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive3']
    users: Union[bool, 'FindManyusersArgsFromtaskRecursive3']


class entrepiseIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    pack: Union[bool, 'FindManypackArgsFromtaskRecursive4']
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive4']
    users: Union[bool, 'FindManyusersArgsFromtaskRecursive4']


class entrepiseIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class entrepiseArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyentrepiseArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'commandeArgsFromtaskRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromtaskRecursive1']


class factureIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'commandeArgsFromtaskRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromtaskRecursive2']


class factureIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'commandeArgsFromtaskRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromtaskRecursive3']


class factureIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'commandeArgsFromtaskRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromtaskRecursive4']


class factureIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class factureArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyfactureArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive1']


class infopaimentIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive2']


class infopaimentIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive3']


class infopaimentIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    facture: Union[bool, 'FindManyfactureArgsFromtaskRecursive4']


class infopaimentIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class infopaimentArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyinfopaimentArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive1']


class ingredientIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive2']


class ingredientIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive3']


class ingredientIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive4']


class ingredientIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class ingredientArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyingredientArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive1']


class packIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive2']


class packIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive3']


class packIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive4']


class packIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class packArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManypackArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive1']


class publiciteIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive2']


class publiciteIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive3']


class publiciteIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive4']


class publiciteIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class publiciteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManypubliciteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive1']


class recetteIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive2']


class recetteIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive3']


class recetteIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    commande: Union[bool, 'FindManycommandeArgsFromtaskRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtaskRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtaskRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtaskRecursive4']


class recetteIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class recetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyrecetteArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtaskRecursive1']


class recetteingrIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtaskRecursive2']


class recetteingrIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtaskRecursive3']


class recetteingrIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    ingredient: Union[bool, 'ingredientArgsFromtaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtaskRecursive4']


class recetteingrIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class recetteingrArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyrecetteingrArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtaskRecursive1']


class reclamationIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtaskRecursive2']


class reclamationIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtaskRecursive3']


class reclamationIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtaskRecursive4']


class reclamationIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class reclamationArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyreclamationArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""


class roleIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""


class roleIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""


class roleIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""


class roleIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class roleArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyroleArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromtaskRecursive1']


class sensorsIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromtaskRecursive2']


class sensorsIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromtaskRecursive3']


class sensorsIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    distributeur: Union[bool, 'distributeurArgsFromtaskRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromtaskRecursive4']


class sensorsIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class sensorsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManysensorsArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive1']
    typetask: Union[bool, 'typetaskArgsFromtaskRecursive1']
    users: Union[bool, 'usersArgsFromtaskRecursive1']


class taskIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive2']
    typetask: Union[bool, 'typetaskArgsFromtaskRecursive2']
    users: Union[bool, 'usersArgsFromtaskRecursive2']


class taskIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive3']
    typetask: Union[bool, 'typetaskArgsFromtaskRecursive3']
    users: Union[bool, 'usersArgsFromtaskRecursive3']


class taskIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive4']
    typetask: Union[bool, 'typetaskArgsFromtaskRecursive4']
    users: Union[bool, 'usersArgsFromtaskRecursive4']


class taskIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class taskArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManytaskArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    users: Union[bool, 'usersArgsFromtaskRecursive1']


class tokensIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    users: Union[bool, 'usersArgsFromtaskRecursive2']


class tokensIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    users: Union[bool, 'usersArgsFromtaskRecursive3']


class tokensIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    users: Union[bool, 'usersArgsFromtaskRecursive4']


class tokensIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class tokensArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManytokensArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive1']


class typetaskIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive2']


class typetaskIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive3']


class typetaskIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive4']


class typetaskIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class typetaskArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManytypetaskArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromtask(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive1']
    tokens: Union[bool, 'tokensArgsFromtaskRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive1']


class usersIncludeFromtaskRecursive1(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive2']
    tokens: Union[bool, 'tokensArgsFromtaskRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive2']


class usersIncludeFromtaskRecursive2(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive3']
    tokens: Union[bool, 'tokensArgsFromtaskRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive3']


class usersIncludeFromtaskRecursive3(TypedDict, total=False):
    """Relational arguments for task"""
    task: Union[bool, 'FindManytaskArgsFromtaskRecursive4']
    tokens: Union[bool, 'tokensArgsFromtaskRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtaskRecursive4']


class usersIncludeFromtaskRecursive4(TypedDict, total=False):
    """Relational arguments for task"""

    

class usersArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    
    

class FindManyusersArgsFromtask(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromtaskRecursive1(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromtaskRecursive2(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromtaskRecursive3(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromtaskRecursive4(TypedDict, total=False):
    """Arguments for task"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManytaskArgs = FindManytaskArgsFromtask
FindFirsttaskArgs = FindManytaskArgsFromtask


    

class taskWhereInput(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idUser: Union[None, _int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    idType: Union[_int, 'types.IntFilter']
    isDone: Union[_bool, 'types.BooleanFilter']
    isOpen: Union[_bool, 'types.BooleanFilter']
    date: Union[_str, 'types.StringFilter']
    time: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    entrepise: 'entrepiseRelationFilter'
    typetask: 'typetaskRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['taskWhereInputRecursive1', List['taskWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['taskWhereInputRecursive1']
    OR: List['taskWhereInputRecursive1']
    NOT: List['taskWhereInputRecursive1']


class taskWhereInputRecursive1(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idUser: Union[None, _int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    idType: Union[_int, 'types.IntFilter']
    isDone: Union[_bool, 'types.BooleanFilter']
    isOpen: Union[_bool, 'types.BooleanFilter']
    date: Union[_str, 'types.StringFilter']
    time: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    entrepise: 'entrepiseRelationFilter'
    typetask: 'typetaskRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['taskWhereInputRecursive2', List['taskWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['taskWhereInputRecursive2']
    OR: List['taskWhereInputRecursive2']
    NOT: List['taskWhereInputRecursive2']


class taskWhereInputRecursive2(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idUser: Union[None, _int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    idType: Union[_int, 'types.IntFilter']
    isDone: Union[_bool, 'types.BooleanFilter']
    isOpen: Union[_bool, 'types.BooleanFilter']
    date: Union[_str, 'types.StringFilter']
    time: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    entrepise: 'entrepiseRelationFilter'
    typetask: 'typetaskRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['taskWhereInputRecursive3', List['taskWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['taskWhereInputRecursive3']
    OR: List['taskWhereInputRecursive3']
    NOT: List['taskWhereInputRecursive3']


class taskWhereInputRecursive3(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idUser: Union[None, _int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    idType: Union[_int, 'types.IntFilter']
    isDone: Union[_bool, 'types.BooleanFilter']
    isOpen: Union[_bool, 'types.BooleanFilter']
    date: Union[_str, 'types.StringFilter']
    time: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    entrepise: 'entrepiseRelationFilter'
    typetask: 'typetaskRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['taskWhereInputRecursive4', List['taskWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['taskWhereInputRecursive4']
    OR: List['taskWhereInputRecursive4']
    NOT: List['taskWhereInputRecursive4']


class taskWhereInputRecursive4(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idDistr: Union[_int, 'types.IntFilter']
    idUser: Union[None, _int, 'types.IntFilter']
    idEntre: Union[_int, 'types.IntFilter']
    idType: Union[_int, 'types.IntFilter']
    isDone: Union[_bool, 'types.BooleanFilter']
    isOpen: Union[_bool, 'types.BooleanFilter']
    date: Union[_str, 'types.StringFilter']
    time: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    entrepise: 'entrepiseRelationFilter'
    typetask: 'typetaskRelationFilter'
    users: 'usersRelationFilter'



# aggregate task types


    

class taskScalarWhereWithAggregatesInput(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    idType: Union[_int, 'types.IntWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOpen: Union[_bool, 'types.BooleanWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    time: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['taskScalarWhereWithAggregatesInputRecursive1']
    OR: List['taskScalarWhereWithAggregatesInputRecursive1']
    NOT: List['taskScalarWhereWithAggregatesInputRecursive1']


class taskScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    idType: Union[_int, 'types.IntWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOpen: Union[_bool, 'types.BooleanWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    time: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['taskScalarWhereWithAggregatesInputRecursive2']
    OR: List['taskScalarWhereWithAggregatesInputRecursive2']
    NOT: List['taskScalarWhereWithAggregatesInputRecursive2']


class taskScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    idType: Union[_int, 'types.IntWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOpen: Union[_bool, 'types.BooleanWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    time: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['taskScalarWhereWithAggregatesInputRecursive3']
    OR: List['taskScalarWhereWithAggregatesInputRecursive3']
    NOT: List['taskScalarWhereWithAggregatesInputRecursive3']


class taskScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    idType: Union[_int, 'types.IntWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOpen: Union[_bool, 'types.BooleanWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    time: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['taskScalarWhereWithAggregatesInputRecursive4']
    OR: List['taskScalarWhereWithAggregatesInputRecursive4']
    NOT: List['taskScalarWhereWithAggregatesInputRecursive4']


class taskScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """task arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idDistr: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    idEntre: Union[_int, 'types.IntWithAggregatesFilter']
    idType: Union[_int, 'types.IntWithAggregatesFilter']
    isDone: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOpen: Union[_bool, 'types.BooleanWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    time: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']



class taskGroupByOutput(TypedDict, total=False):
    id: _int
    idDistr: _int
    idUser: _int
    idEntre: _int
    idType: _int
    isDone: _bool
    isOpen: _bool
    date: _str
    time: _str
    message: _str
    _sum: 'taskSumAggregateOutput'
    _avg: 'taskAvgAggregateOutput'
    _min: 'taskMinAggregateOutput'
    _max: 'taskMaxAggregateOutput'
    _count: 'taskCountAggregateOutput'


class taskAvgAggregateOutput(TypedDict, total=False):
    """task output for aggregating averages"""
    id: float
    idDistr: float
    idUser: float
    idEntre: float
    idType: float


class taskSumAggregateOutput(TypedDict, total=False):
    """task output for aggregating sums"""
    id: _int
    idDistr: _int
    idUser: _int
    idEntre: _int
    idType: _int


class taskScalarAggregateOutput(TypedDict, total=False):
    """task output including scalar fields"""
    id: _int
    idDistr: _int
    idUser: _int
    idEntre: _int
    idType: _int
    isDone: _bool
    isOpen: _bool
    date: _str
    time: _str
    message: _str


taskMinAggregateOutput = taskScalarAggregateOutput
taskMaxAggregateOutput = taskScalarAggregateOutput


class taskMaxAggregateInput(TypedDict, total=False):
    """task input for aggregating by max"""
    id: bool
    idDistr: bool
    idUser: bool
    idEntre: bool
    idType: bool
    isDone: bool
    isOpen: bool
    date: bool
    time: bool
    message: bool


class taskMinAggregateInput(TypedDict, total=False):
    """task input for aggregating by min"""
    id: bool
    idDistr: bool
    idUser: bool
    idEntre: bool
    idType: bool
    isDone: bool
    isOpen: bool
    date: bool
    time: bool
    message: bool


class taskNumberAggregateInput(TypedDict, total=False):
    """task input for aggregating numbers"""
    id: bool
    idDistr: bool
    idUser: bool
    idEntre: bool
    idType: bool


taskAvgAggregateInput = taskNumberAggregateInput
taskSumAggregateInput = taskNumberAggregateInput


taskCountAggregateInput = TypedDict(
    'taskCountAggregateInput',
    {
        'id': bool,
        'idDistr': bool,
        'idUser': bool,
        'idEntre': bool,
        'idType': bool,
        'isDone': bool,
        'isOpen': bool,
        'date': bool,
        'time': bool,
        'message': bool,
        '_all': bool,
    },
    total=False,
)

taskCountAggregateOutput = TypedDict(
    'taskCountAggregateOutput',
    {
        'id': int,
        'idDistr': int,
        'idUser': int,
        'idEntre': int,
        'idType': int,
        'isDone': int,
        'isOpen': int,
        'date': int,
        'time': int,
        'message': int,
        '_all': int,
    },
    total=False,
)


taskKeys = Literal[
    'id',
    'idDistr',
    'idUser',
    'idEntre',
    'idType',
    'isDone',
    'isOpen',
    'date',
    'time',
    'message',
    'entrepise',
    'typetask',
    'users',
]
taskScalarFieldKeys = Literal[
    'id',
    'idDistr',
    'idUser',
    'idEntre',
    'idType',
    'isDone',
    'isOpen',
    'date',
    'time',
    'message',
]
taskScalarFieldKeysT = TypeVar('taskScalarFieldKeysT', bound=taskScalarFieldKeys)

taskRelationalFieldKeys = Literal[
        'entrepise',
        'typetask',
        'users',
    ]

# tokens types

class tokensOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the tokens create method"""
    id: _int
    idUser: _int
    token: Optional[_str]
    users: 'usersCreateNestedWithoutRelationsInput'


class tokensCreateInput(tokensOptionalCreateInput):
    """Required arguments to the tokens create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class tokensOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the tokens create method, without relations"""
    id: _int
    idUser: _int
    token: Optional[_str]


class tokensCreateWithoutRelationsInput(tokensOptionalCreateWithoutRelationsInput):
    """Required arguments to the tokens create method, without relations"""


class tokensCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'tokensCreateWithoutRelationsInput'
    connect: 'tokensWhereUniqueInput'


class tokensCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['tokensCreateWithoutRelationsInput', List['tokensCreateWithoutRelationsInput']]
    connect: Union['tokensWhereUniqueInput', List['tokensWhereUniqueInput']]


_tokensWhereUnique_id_Input = TypedDict(
    '_tokensWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_tokensWhereUnique_idUser_Input = TypedDict(
    '_tokensWhereUnique_idUser_Input',
    {
        'idUser': '_int',
    },
    total=True
)

tokensWhereUniqueInput = Union[
    '_tokensWhereUnique_id_Input',
    '_tokensWhereUnique_idUser_Input',
]


class tokensUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    token: Optional[_str]
    users: 'usersUpdateOneWithoutRelationsInput'


class tokensUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    token: Optional[_str]


class tokensUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['tokensCreateWithoutRelationsInput']
    connect: List['tokensWhereUniqueInput']
    set: List['tokensWhereUniqueInput']
    disconnect: List['tokensWhereUniqueInput']
    delete: List['tokensWhereUniqueInput']

    # TODO
    # update: List['tokensUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['tokensUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['tokensScalarWhereInput']
    # upsert: List['tokensUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['tokensCreateOrConnectWithoutRelationsInput']


class tokensUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'tokensCreateWithoutRelationsInput'
    connect: 'tokensWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'tokensUpdateInput'
    # upsert: 'tokensUpsertWithoutRelationsInput'
    # connectOrCreate: 'tokensCreateOrConnectWithoutRelationsInput'


class tokensUpsertInput(TypedDict):
    create: 'tokensCreateInput'
    update: 'tokensUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_tokens_id_OrderByInput = TypedDict(
    '_tokens_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_tokens_idUser_OrderByInput = TypedDict(
    '_tokens_idUser_OrderByInput',
    {
        'idUser': 'SortOrder',
    },
    total=True
)

_tokens_token_OrderByInput = TypedDict(
    '_tokens_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

tokensOrderByInput = Union[
    '_tokens_id_OrderByInput',
    '_tokens_idUser_OrderByInput',
    '_tokens_token_OrderByInput',
]



# recursive tokens types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

tokensRelationFilter = TypedDict(
    'tokensRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class tokensListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class tokensInclude(TypedDict, total=False):
    """tokens relational arguments"""
    users: Union[bool, 'usersArgsFromtokens']


    

class annonceurIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""


class annonceurIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""


class annonceurIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""


class annonceurIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""


class annonceurIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class annonceurArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyannonceurArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""


class categorieIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""


class categorieIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""


class categorieIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""


class categorieIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class categorieArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManycategorieArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtokensRecursive1']


class categoryclaimsIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtokensRecursive2']


class categoryclaimsIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtokensRecursive3']


class categoryclaimsIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtokensRecursive4']


class categoryclaimsIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class categoryclaimsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManycategoryclaimsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtokensRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromtokensRecursive1']


class categoryrecetteIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtokensRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromtokensRecursive2']


class categoryrecetteIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtokensRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromtokensRecursive3']


class categoryrecetteIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtokensRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromtokensRecursive4']


class categoryrecetteIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class categoryrecetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManycategoryrecetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive1']


class categorysensorsIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive2']


class categorysensorsIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive3']


class categorysensorsIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive4']


class categorysensorsIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class categorysensorsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManycategorysensorsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive1']
    recette: Union[bool, 'recetteArgsFromtokensRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive1']


class commandeIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive2']
    recette: Union[bool, 'recetteArgsFromtokensRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive2']


class commandeIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive3']
    recette: Union[bool, 'recetteArgsFromtokensRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive3']


class commandeIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive4']
    recette: Union[bool, 'recetteArgsFromtokensRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive4']


class commandeIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class commandeArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManycommandeArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive1']
    pack: Union[bool, 'packArgsFromtokensRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive1']


class distributeurIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive2']
    pack: Union[bool, 'packArgsFromtokensRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive2']


class distributeurIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive3']
    pack: Union[bool, 'packArgsFromtokensRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive3']


class distributeurIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive4']
    pack: Union[bool, 'packArgsFromtokensRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromtokensRecursive4']


class distributeurIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class distributeurArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManydistributeurArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive1']
    recette: Union[bool, 'recetteArgsFromtokensRecursive1']


class distributeurRecetteIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive2']
    recette: Union[bool, 'recetteArgsFromtokensRecursive2']


class distributeurRecetteIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive3']
    recette: Union[bool, 'recetteArgsFromtokensRecursive3']


class distributeurRecetteIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive4']
    recette: Union[bool, 'recetteArgsFromtokensRecursive4']


class distributeurRecetteIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class distributeurRecetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManydistributeurRecetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    pack: Union[bool, 'FindManypackArgsFromtokensRecursive1']
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive1']
    users: Union[bool, 'FindManyusersArgsFromtokensRecursive1']


class entrepiseIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    pack: Union[bool, 'FindManypackArgsFromtokensRecursive2']
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive2']
    users: Union[bool, 'FindManyusersArgsFromtokensRecursive2']


class entrepiseIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    pack: Union[bool, 'FindManypackArgsFromtokensRecursive3']
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive3']
    users: Union[bool, 'FindManyusersArgsFromtokensRecursive3']


class entrepiseIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    pack: Union[bool, 'FindManypackArgsFromtokensRecursive4']
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive4']
    users: Union[bool, 'FindManyusersArgsFromtokensRecursive4']


class entrepiseIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class entrepiseArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyentrepiseArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'commandeArgsFromtokensRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromtokensRecursive1']


class factureIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'commandeArgsFromtokensRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromtokensRecursive2']


class factureIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'commandeArgsFromtokensRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromtokensRecursive3']


class factureIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'commandeArgsFromtokensRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromtokensRecursive4']


class factureIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class factureArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyfactureArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive1']


class infopaimentIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive2']


class infopaimentIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive3']


class infopaimentIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    facture: Union[bool, 'FindManyfactureArgsFromtokensRecursive4']


class infopaimentIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class infopaimentArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyinfopaimentArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive1']


class ingredientIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive2']


class ingredientIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive3']


class ingredientIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive4']


class ingredientIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class ingredientArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyingredientArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive1']


class packIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive2']


class packIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive3']


class packIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive4']


class packIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class packArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManypackArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive1']


class publiciteIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive2']


class publiciteIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive3']


class publiciteIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive4']


class publiciteIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class publiciteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManypubliciteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive1']


class recetteIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive2']


class recetteIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive3']


class recetteIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    commande: Union[bool, 'FindManycommandeArgsFromtokensRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtokensRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtokensRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtokensRecursive4']


class recetteIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class recetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyrecetteArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive1']
    recette: Union[bool, 'recetteArgsFromtokensRecursive1']


class recetteingrIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive2']
    recette: Union[bool, 'recetteArgsFromtokensRecursive2']


class recetteingrIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive3']
    recette: Union[bool, 'recetteArgsFromtokensRecursive3']


class recetteingrIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    ingredient: Union[bool, 'ingredientArgsFromtokensRecursive4']
    recette: Union[bool, 'recetteArgsFromtokensRecursive4']


class recetteingrIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class recetteingrArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyrecetteingrArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtokensRecursive1']


class reclamationIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtokensRecursive2']


class reclamationIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtokensRecursive3']


class reclamationIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtokensRecursive4']


class reclamationIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class reclamationArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyreclamationArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""


class roleIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""


class roleIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""


class roleIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""


class roleIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class roleArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyroleArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromtokensRecursive1']


class sensorsIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromtokensRecursive2']


class sensorsIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromtokensRecursive3']


class sensorsIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    distributeur: Union[bool, 'distributeurArgsFromtokensRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromtokensRecursive4']


class sensorsIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class sensorsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManysensorsArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive1']
    typetask: Union[bool, 'typetaskArgsFromtokensRecursive1']
    users: Union[bool, 'usersArgsFromtokensRecursive1']


class taskIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive2']
    typetask: Union[bool, 'typetaskArgsFromtokensRecursive2']
    users: Union[bool, 'usersArgsFromtokensRecursive2']


class taskIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive3']
    typetask: Union[bool, 'typetaskArgsFromtokensRecursive3']
    users: Union[bool, 'usersArgsFromtokensRecursive3']


class taskIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive4']
    typetask: Union[bool, 'typetaskArgsFromtokensRecursive4']
    users: Union[bool, 'usersArgsFromtokensRecursive4']


class taskIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class taskArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManytaskArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    users: Union[bool, 'usersArgsFromtokensRecursive1']


class tokensIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    users: Union[bool, 'usersArgsFromtokensRecursive2']


class tokensIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    users: Union[bool, 'usersArgsFromtokensRecursive3']


class tokensIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    users: Union[bool, 'usersArgsFromtokensRecursive4']


class tokensIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class tokensArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManytokensArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive1']


class typetaskIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive2']


class typetaskIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive3']


class typetaskIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive4']


class typetaskIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class typetaskArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManytypetaskArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromtokens(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive1']
    tokens: Union[bool, 'tokensArgsFromtokensRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive1']


class usersIncludeFromtokensRecursive1(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive2']
    tokens: Union[bool, 'tokensArgsFromtokensRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive2']


class usersIncludeFromtokensRecursive2(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive3']
    tokens: Union[bool, 'tokensArgsFromtokensRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive3']


class usersIncludeFromtokensRecursive3(TypedDict, total=False):
    """Relational arguments for tokens"""
    task: Union[bool, 'FindManytaskArgsFromtokensRecursive4']
    tokens: Union[bool, 'tokensArgsFromtokensRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtokensRecursive4']


class usersIncludeFromtokensRecursive4(TypedDict, total=False):
    """Relational arguments for tokens"""

    

class usersArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    
    

class FindManyusersArgsFromtokens(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromtokensRecursive1(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromtokensRecursive2(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromtokensRecursive3(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromtokensRecursive4(TypedDict, total=False):
    """Arguments for tokens"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManytokensArgs = FindManytokensArgsFromtokens
FindFirsttokensArgs = FindManytokensArgsFromtokens


    

class tokensWhereInput(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idUser: Union[_int, 'types.IntFilter']
    token: Union[None, _str, 'types.StringFilter']
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['tokensWhereInputRecursive1', List['tokensWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['tokensWhereInputRecursive1']
    OR: List['tokensWhereInputRecursive1']
    NOT: List['tokensWhereInputRecursive1']


class tokensWhereInputRecursive1(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idUser: Union[_int, 'types.IntFilter']
    token: Union[None, _str, 'types.StringFilter']
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['tokensWhereInputRecursive2', List['tokensWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['tokensWhereInputRecursive2']
    OR: List['tokensWhereInputRecursive2']
    NOT: List['tokensWhereInputRecursive2']


class tokensWhereInputRecursive2(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idUser: Union[_int, 'types.IntFilter']
    token: Union[None, _str, 'types.StringFilter']
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['tokensWhereInputRecursive3', List['tokensWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['tokensWhereInputRecursive3']
    OR: List['tokensWhereInputRecursive3']
    NOT: List['tokensWhereInputRecursive3']


class tokensWhereInputRecursive3(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idUser: Union[_int, 'types.IntFilter']
    token: Union[None, _str, 'types.StringFilter']
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['tokensWhereInputRecursive4', List['tokensWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['tokensWhereInputRecursive4']
    OR: List['tokensWhereInputRecursive4']
    NOT: List['tokensWhereInputRecursive4']


class tokensWhereInputRecursive4(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    idUser: Union[_int, 'types.IntFilter']
    token: Union[None, _str, 'types.StringFilter']
    users: 'usersRelationFilter'



# aggregate tokens types


    

class tokensScalarWhereWithAggregatesInput(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['tokensScalarWhereWithAggregatesInputRecursive1']
    OR: List['tokensScalarWhereWithAggregatesInputRecursive1']
    NOT: List['tokensScalarWhereWithAggregatesInputRecursive1']


class tokensScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['tokensScalarWhereWithAggregatesInputRecursive2']
    OR: List['tokensScalarWhereWithAggregatesInputRecursive2']
    NOT: List['tokensScalarWhereWithAggregatesInputRecursive2']


class tokensScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['tokensScalarWhereWithAggregatesInputRecursive3']
    OR: List['tokensScalarWhereWithAggregatesInputRecursive3']
    NOT: List['tokensScalarWhereWithAggregatesInputRecursive3']


class tokensScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['tokensScalarWhereWithAggregatesInputRecursive4']
    OR: List['tokensScalarWhereWithAggregatesInputRecursive4']
    NOT: List['tokensScalarWhereWithAggregatesInputRecursive4']


class tokensScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """tokens arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    idUser: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']



class tokensGroupByOutput(TypedDict, total=False):
    id: _int
    idUser: _int
    token: _str
    _sum: 'tokensSumAggregateOutput'
    _avg: 'tokensAvgAggregateOutput'
    _min: 'tokensMinAggregateOutput'
    _max: 'tokensMaxAggregateOutput'
    _count: 'tokensCountAggregateOutput'


class tokensAvgAggregateOutput(TypedDict, total=False):
    """tokens output for aggregating averages"""
    id: float
    idUser: float


class tokensSumAggregateOutput(TypedDict, total=False):
    """tokens output for aggregating sums"""
    id: _int
    idUser: _int


class tokensScalarAggregateOutput(TypedDict, total=False):
    """tokens output including scalar fields"""
    id: _int
    idUser: _int
    token: _str


tokensMinAggregateOutput = tokensScalarAggregateOutput
tokensMaxAggregateOutput = tokensScalarAggregateOutput


class tokensMaxAggregateInput(TypedDict, total=False):
    """tokens input for aggregating by max"""
    id: bool
    idUser: bool
    token: bool


class tokensMinAggregateInput(TypedDict, total=False):
    """tokens input for aggregating by min"""
    id: bool
    idUser: bool
    token: bool


class tokensNumberAggregateInput(TypedDict, total=False):
    """tokens input for aggregating numbers"""
    id: bool
    idUser: bool


tokensAvgAggregateInput = tokensNumberAggregateInput
tokensSumAggregateInput = tokensNumberAggregateInput


tokensCountAggregateInput = TypedDict(
    'tokensCountAggregateInput',
    {
        'id': bool,
        'idUser': bool,
        'token': bool,
        '_all': bool,
    },
    total=False,
)

tokensCountAggregateOutput = TypedDict(
    'tokensCountAggregateOutput',
    {
        'id': int,
        'idUser': int,
        'token': int,
        '_all': int,
    },
    total=False,
)


tokensKeys = Literal[
    'id',
    'idUser',
    'token',
    'users',
]
tokensScalarFieldKeys = Literal[
    'id',
    'idUser',
    'token',
]
tokensScalarFieldKeysT = TypeVar('tokensScalarFieldKeysT', bound=tokensScalarFieldKeys)

tokensRelationalFieldKeys = Literal[
        'users',
    ]

# typetask types

class typetaskOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the typetask create method"""
    id: _int
    description: Optional[_str]
    task: 'taskCreateManyNestedWithoutRelationsInput'


class typetaskCreateInput(typetaskOptionalCreateInput):
    """Required arguments to the typetask create method"""
    identifiant: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class typetaskOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the typetask create method, without relations"""
    id: _int
    description: Optional[_str]


class typetaskCreateWithoutRelationsInput(typetaskOptionalCreateWithoutRelationsInput):
    """Required arguments to the typetask create method, without relations"""
    identifiant: _str


class typetaskCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'typetaskCreateWithoutRelationsInput'
    connect: 'typetaskWhereUniqueInput'


class typetaskCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['typetaskCreateWithoutRelationsInput', List['typetaskCreateWithoutRelationsInput']]
    connect: Union['typetaskWhereUniqueInput', List['typetaskWhereUniqueInput']]


_typetaskWhereUnique_id_Input = TypedDict(
    '_typetaskWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_typetaskWhereUnique_identifiant_Input = TypedDict(
    '_typetaskWhereUnique_identifiant_Input',
    {
        'identifiant': '_str',
    },
    total=True
)

typetaskWhereUniqueInput = Union[
    '_typetaskWhereUnique_id_Input',
    '_typetaskWhereUnique_identifiant_Input',
]


class typetaskUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    identifiant: _str
    description: Optional[_str]
    task: 'taskUpdateManyWithoutRelationsInput'


class typetaskUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    identifiant: _str
    description: Optional[_str]


class typetaskUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['typetaskCreateWithoutRelationsInput']
    connect: List['typetaskWhereUniqueInput']
    set: List['typetaskWhereUniqueInput']
    disconnect: List['typetaskWhereUniqueInput']
    delete: List['typetaskWhereUniqueInput']

    # TODO
    # update: List['typetaskUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['typetaskUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['typetaskScalarWhereInput']
    # upsert: List['typetaskUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['typetaskCreateOrConnectWithoutRelationsInput']


class typetaskUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'typetaskCreateWithoutRelationsInput'
    connect: 'typetaskWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'typetaskUpdateInput'
    # upsert: 'typetaskUpsertWithoutRelationsInput'
    # connectOrCreate: 'typetaskCreateOrConnectWithoutRelationsInput'


class typetaskUpsertInput(TypedDict):
    create: 'typetaskCreateInput'
    update: 'typetaskUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_typetask_id_OrderByInput = TypedDict(
    '_typetask_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_typetask_identifiant_OrderByInput = TypedDict(
    '_typetask_identifiant_OrderByInput',
    {
        'identifiant': 'SortOrder',
    },
    total=True
)

_typetask_description_OrderByInput = TypedDict(
    '_typetask_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

typetaskOrderByInput = Union[
    '_typetask_id_OrderByInput',
    '_typetask_identifiant_OrderByInput',
    '_typetask_description_OrderByInput',
]



# recursive typetask types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

typetaskRelationFilter = TypedDict(
    'typetaskRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class typetaskListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class typetaskInclude(TypedDict, total=False):
    """typetask relational arguments"""
    task: Union[bool, 'FindManytaskArgsFromtypetask']


    

class annonceurIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""


class annonceurIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""


class annonceurIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""


class annonceurIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""


class annonceurIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class annonceurArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyannonceurArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""


class categorieIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""


class categorieIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""


class categorieIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""


class categorieIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class categorieArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManycategorieArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtypetaskRecursive1']


class categoryclaimsIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtypetaskRecursive2']


class categoryclaimsIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtypetaskRecursive3']


class categoryclaimsIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromtypetaskRecursive4']


class categoryclaimsIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class categoryclaimsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManycategoryclaimsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtypetaskRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromtypetaskRecursive1']


class categoryrecetteIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtypetaskRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromtypetaskRecursive2']


class categoryrecetteIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtypetaskRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromtypetaskRecursive3']


class categoryrecetteIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    publicite: Union[bool, 'FindManypubliciteArgsFromtypetaskRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromtypetaskRecursive4']


class categoryrecetteIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class categoryrecetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManycategoryrecetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive1']


class categorysensorsIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive2']


class categorysensorsIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive3']


class categorysensorsIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive4']


class categorysensorsIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class categorysensorsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManycategorysensorsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive1']


class commandeIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive2']


class commandeIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive3']


class commandeIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive4']


class commandeIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class commandeArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManycommandeArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive1']
    pack: Union[bool, 'packArgsFromtypetaskRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive1']


class distributeurIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive2']
    pack: Union[bool, 'packArgsFromtypetaskRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive2']


class distributeurIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive3']
    pack: Union[bool, 'packArgsFromtypetaskRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive3']


class distributeurIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive4']
    pack: Union[bool, 'packArgsFromtypetaskRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromtypetaskRecursive4']


class distributeurIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class distributeurArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManydistributeurArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive1']


class distributeurRecetteIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive2']


class distributeurRecetteIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive3']


class distributeurRecetteIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive4']


class distributeurRecetteIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class distributeurRecetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManydistributeurRecetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    pack: Union[bool, 'FindManypackArgsFromtypetaskRecursive1']
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive1']
    users: Union[bool, 'FindManyusersArgsFromtypetaskRecursive1']


class entrepiseIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    pack: Union[bool, 'FindManypackArgsFromtypetaskRecursive2']
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive2']
    users: Union[bool, 'FindManyusersArgsFromtypetaskRecursive2']


class entrepiseIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    pack: Union[bool, 'FindManypackArgsFromtypetaskRecursive3']
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive3']
    users: Union[bool, 'FindManyusersArgsFromtypetaskRecursive3']


class entrepiseIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    pack: Union[bool, 'FindManypackArgsFromtypetaskRecursive4']
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive4']
    users: Union[bool, 'FindManyusersArgsFromtypetaskRecursive4']


class entrepiseIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class entrepiseArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyentrepiseArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'commandeArgsFromtypetaskRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromtypetaskRecursive1']


class factureIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'commandeArgsFromtypetaskRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromtypetaskRecursive2']


class factureIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'commandeArgsFromtypetaskRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromtypetaskRecursive3']


class factureIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'commandeArgsFromtypetaskRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromtypetaskRecursive4']


class factureIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class factureArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyfactureArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive1']


class infopaimentIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive2']


class infopaimentIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive3']


class infopaimentIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    facture: Union[bool, 'FindManyfactureArgsFromtypetaskRecursive4']


class infopaimentIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class infopaimentArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyinfopaimentArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive1']


class ingredientIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive2']


class ingredientIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive3']


class ingredientIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive4']


class ingredientIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class ingredientArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyingredientArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive1']


class packIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive2']


class packIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive3']


class packIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive4']


class packIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class packArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManypackArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive1']


class publiciteIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive2']


class publiciteIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive3']


class publiciteIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive4']


class publiciteIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class publiciteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManypubliciteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive1']


class recetteIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive2']


class recetteIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive3']


class recetteIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    commande: Union[bool, 'FindManycommandeArgsFromtypetaskRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromtypetaskRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromtypetaskRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromtypetaskRecursive4']


class recetteIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class recetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyrecetteArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive1']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive1']


class recetteingrIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive2']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive2']


class recetteingrIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive3']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive3']


class recetteingrIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    ingredient: Union[bool, 'ingredientArgsFromtypetaskRecursive4']
    recette: Union[bool, 'recetteArgsFromtypetaskRecursive4']


class recetteingrIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class recetteingrArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyrecetteingrArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtypetaskRecursive1']


class reclamationIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtypetaskRecursive2']


class reclamationIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtypetaskRecursive3']


class reclamationIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromtypetaskRecursive4']


class reclamationIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class reclamationArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyreclamationArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""


class roleIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""


class roleIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""


class roleIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""


class roleIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class roleArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyroleArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromtypetaskRecursive1']


class sensorsIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromtypetaskRecursive2']


class sensorsIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromtypetaskRecursive3']


class sensorsIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    distributeur: Union[bool, 'distributeurArgsFromtypetaskRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromtypetaskRecursive4']


class sensorsIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class sensorsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManysensorsArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive1']
    typetask: Union[bool, 'typetaskArgsFromtypetaskRecursive1']
    users: Union[bool, 'usersArgsFromtypetaskRecursive1']


class taskIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive2']
    typetask: Union[bool, 'typetaskArgsFromtypetaskRecursive2']
    users: Union[bool, 'usersArgsFromtypetaskRecursive2']


class taskIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive3']
    typetask: Union[bool, 'typetaskArgsFromtypetaskRecursive3']
    users: Union[bool, 'usersArgsFromtypetaskRecursive3']


class taskIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive4']
    typetask: Union[bool, 'typetaskArgsFromtypetaskRecursive4']
    users: Union[bool, 'usersArgsFromtypetaskRecursive4']


class taskIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class taskArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManytaskArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    users: Union[bool, 'usersArgsFromtypetaskRecursive1']


class tokensIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    users: Union[bool, 'usersArgsFromtypetaskRecursive2']


class tokensIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    users: Union[bool, 'usersArgsFromtypetaskRecursive3']


class tokensIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    users: Union[bool, 'usersArgsFromtypetaskRecursive4']


class tokensIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class tokensArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManytokensArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive1']


class typetaskIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive2']


class typetaskIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive3']


class typetaskIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive4']


class typetaskIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class typetaskArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManytypetaskArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromtypetask(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive1']
    tokens: Union[bool, 'tokensArgsFromtypetaskRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive1']


class usersIncludeFromtypetaskRecursive1(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive2']
    tokens: Union[bool, 'tokensArgsFromtypetaskRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive2']


class usersIncludeFromtypetaskRecursive2(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive3']
    tokens: Union[bool, 'tokensArgsFromtypetaskRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive3']


class usersIncludeFromtypetaskRecursive3(TypedDict, total=False):
    """Relational arguments for typetask"""
    task: Union[bool, 'FindManytaskArgsFromtypetaskRecursive4']
    tokens: Union[bool, 'tokensArgsFromtypetaskRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromtypetaskRecursive4']


class usersIncludeFromtypetaskRecursive4(TypedDict, total=False):
    """Relational arguments for typetask"""

    

class usersArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    
    

class FindManyusersArgsFromtypetask(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromtypetaskRecursive1(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromtypetaskRecursive2(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromtypetaskRecursive3(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromtypetaskRecursive4(TypedDict, total=False):
    """Arguments for typetask"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManytypetaskArgs = FindManytypetaskArgsFromtypetask
FindFirsttypetaskArgs = FindManytypetaskArgsFromtypetask


    

class typetaskWhereInput(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    task: 'taskListRelationFilter'

    # should be noted that AND and NOT should be Union['typetaskWhereInputRecursive1', List['typetaskWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['typetaskWhereInputRecursive1']
    OR: List['typetaskWhereInputRecursive1']
    NOT: List['typetaskWhereInputRecursive1']


class typetaskWhereInputRecursive1(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    task: 'taskListRelationFilter'

    # should be noted that AND and NOT should be Union['typetaskWhereInputRecursive2', List['typetaskWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['typetaskWhereInputRecursive2']
    OR: List['typetaskWhereInputRecursive2']
    NOT: List['typetaskWhereInputRecursive2']


class typetaskWhereInputRecursive2(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    task: 'taskListRelationFilter'

    # should be noted that AND and NOT should be Union['typetaskWhereInputRecursive3', List['typetaskWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['typetaskWhereInputRecursive3']
    OR: List['typetaskWhereInputRecursive3']
    NOT: List['typetaskWhereInputRecursive3']


class typetaskWhereInputRecursive3(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    task: 'taskListRelationFilter'

    # should be noted that AND and NOT should be Union['typetaskWhereInputRecursive4', List['typetaskWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['typetaskWhereInputRecursive4']
    OR: List['typetaskWhereInputRecursive4']
    NOT: List['typetaskWhereInputRecursive4']


class typetaskWhereInputRecursive4(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    identifiant: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    task: 'taskListRelationFilter'



# aggregate typetask types


    

class typetaskScalarWhereWithAggregatesInput(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['typetaskScalarWhereWithAggregatesInputRecursive1']
    OR: List['typetaskScalarWhereWithAggregatesInputRecursive1']
    NOT: List['typetaskScalarWhereWithAggregatesInputRecursive1']


class typetaskScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['typetaskScalarWhereWithAggregatesInputRecursive2']
    OR: List['typetaskScalarWhereWithAggregatesInputRecursive2']
    NOT: List['typetaskScalarWhereWithAggregatesInputRecursive2']


class typetaskScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['typetaskScalarWhereWithAggregatesInputRecursive3']
    OR: List['typetaskScalarWhereWithAggregatesInputRecursive3']
    NOT: List['typetaskScalarWhereWithAggregatesInputRecursive3']


class typetaskScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['typetaskScalarWhereWithAggregatesInputRecursive4']
    OR: List['typetaskScalarWhereWithAggregatesInputRecursive4']
    NOT: List['typetaskScalarWhereWithAggregatesInputRecursive4']


class typetaskScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """typetask arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    identifiant: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class typetaskGroupByOutput(TypedDict, total=False):
    id: _int
    identifiant: _str
    description: _str
    _sum: 'typetaskSumAggregateOutput'
    _avg: 'typetaskAvgAggregateOutput'
    _min: 'typetaskMinAggregateOutput'
    _max: 'typetaskMaxAggregateOutput'
    _count: 'typetaskCountAggregateOutput'


class typetaskAvgAggregateOutput(TypedDict, total=False):
    """typetask output for aggregating averages"""
    id: float


class typetaskSumAggregateOutput(TypedDict, total=False):
    """typetask output for aggregating sums"""
    id: _int


class typetaskScalarAggregateOutput(TypedDict, total=False):
    """typetask output including scalar fields"""
    id: _int
    identifiant: _str
    description: _str


typetaskMinAggregateOutput = typetaskScalarAggregateOutput
typetaskMaxAggregateOutput = typetaskScalarAggregateOutput


class typetaskMaxAggregateInput(TypedDict, total=False):
    """typetask input for aggregating by max"""
    id: bool
    identifiant: bool
    description: bool


class typetaskMinAggregateInput(TypedDict, total=False):
    """typetask input for aggregating by min"""
    id: bool
    identifiant: bool
    description: bool


class typetaskNumberAggregateInput(TypedDict, total=False):
    """typetask input for aggregating numbers"""
    id: bool


typetaskAvgAggregateInput = typetaskNumberAggregateInput
typetaskSumAggregateInput = typetaskNumberAggregateInput


typetaskCountAggregateInput = TypedDict(
    'typetaskCountAggregateInput',
    {
        'id': bool,
        'identifiant': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

typetaskCountAggregateOutput = TypedDict(
    'typetaskCountAggregateOutput',
    {
        'id': int,
        'identifiant': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


typetaskKeys = Literal[
    'id',
    'identifiant',
    'description',
    'task',
]
typetaskScalarFieldKeys = Literal[
    'id',
    'identifiant',
    'description',
]
typetaskScalarFieldKeysT = TypeVar('typetaskScalarFieldKeysT', bound=typetaskScalarFieldKeys)

typetaskRelationalFieldKeys = Literal[
        'task',
    ]

# users types

class usersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the users create method"""
    id: _int
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    mdp: Optional[_str]
    tel: Optional[_str]
    idRole: Optional[_int]
    idCreatedpar: Optional[_int]
    idEntreprise: Optional[_int]
    isActive: Optional[_int]
    task: 'taskCreateManyNestedWithoutRelationsInput'
    tokens: 'tokensCreateNestedWithoutRelationsInput'
    entrepise: 'entrepiseCreateNestedWithoutRelationsInput'


class usersCreateInput(usersOptionalCreateInput):
    """Required arguments to the users create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class usersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the users create method, without relations"""
    id: _int
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    mdp: Optional[_str]
    tel: Optional[_str]
    idRole: Optional[_int]
    idCreatedpar: Optional[_int]
    idEntreprise: Optional[_int]
    isActive: Optional[_int]


class usersCreateWithoutRelationsInput(usersOptionalCreateWithoutRelationsInput):
    """Required arguments to the users create method, without relations"""


class usersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'


class usersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['usersCreateWithoutRelationsInput', List['usersCreateWithoutRelationsInput']]
    connect: Union['usersWhereUniqueInput', List['usersWhereUniqueInput']]


_usersWhereUnique_id_Input = TypedDict(
    '_usersWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

usersWhereUniqueInput = _usersWhereUnique_id_Input


class usersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    mdp: Optional[_str]
    tel: Optional[_str]
    idRole: Optional[Union[AtomicIntInput, _int]]
    idCreatedpar: Optional[Union[AtomicIntInput, _int]]
    isActive: Optional[Union[AtomicIntInput, _int]]
    task: 'taskUpdateManyWithoutRelationsInput'
    tokens: 'tokensUpdateOneWithoutRelationsInput'
    entrepise: 'entrepiseUpdateOneWithoutRelationsInput'


class usersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nom: Optional[_str]
    prenom: Optional[_str]
    mail: Optional[_str]
    mdp: Optional[_str]
    tel: Optional[_str]
    idRole: Optional[Union[AtomicIntInput, _int]]
    idCreatedpar: Optional[Union[AtomicIntInput, _int]]
    isActive: Optional[Union[AtomicIntInput, _int]]


class usersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['usersCreateWithoutRelationsInput']
    connect: List['usersWhereUniqueInput']
    set: List['usersWhereUniqueInput']
    disconnect: List['usersWhereUniqueInput']
    delete: List['usersWhereUniqueInput']

    # TODO
    # update: List['usersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['usersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['usersScalarWhereInput']
    # upsert: List['usersUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['usersCreateOrConnectWithoutRelationsInput']


class usersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'usersUpdateInput'
    # upsert: 'usersUpsertWithoutRelationsInput'
    # connectOrCreate: 'usersCreateOrConnectWithoutRelationsInput'


class usersUpsertInput(TypedDict):
    create: 'usersCreateInput'
    update: 'usersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_users_id_OrderByInput = TypedDict(
    '_users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_users_nom_OrderByInput = TypedDict(
    '_users_nom_OrderByInput',
    {
        'nom': 'SortOrder',
    },
    total=True
)

_users_prenom_OrderByInput = TypedDict(
    '_users_prenom_OrderByInput',
    {
        'prenom': 'SortOrder',
    },
    total=True
)

_users_mail_OrderByInput = TypedDict(
    '_users_mail_OrderByInput',
    {
        'mail': 'SortOrder',
    },
    total=True
)

_users_mdp_OrderByInput = TypedDict(
    '_users_mdp_OrderByInput',
    {
        'mdp': 'SortOrder',
    },
    total=True
)

_users_tel_OrderByInput = TypedDict(
    '_users_tel_OrderByInput',
    {
        'tel': 'SortOrder',
    },
    total=True
)

_users_idRole_OrderByInput = TypedDict(
    '_users_idRole_OrderByInput',
    {
        'idRole': 'SortOrder',
    },
    total=True
)

_users_idCreatedpar_OrderByInput = TypedDict(
    '_users_idCreatedpar_OrderByInput',
    {
        'idCreatedpar': 'SortOrder',
    },
    total=True
)

_users_idEntreprise_OrderByInput = TypedDict(
    '_users_idEntreprise_OrderByInput',
    {
        'idEntreprise': 'SortOrder',
    },
    total=True
)

_users_isActive_OrderByInput = TypedDict(
    '_users_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

usersOrderByInput = Union[
    '_users_id_OrderByInput',
    '_users_nom_OrderByInput',
    '_users_prenom_OrderByInput',
    '_users_mail_OrderByInput',
    '_users_mdp_OrderByInput',
    '_users_tel_OrderByInput',
    '_users_idRole_OrderByInput',
    '_users_idCreatedpar_OrderByInput',
    '_users_idEntreprise_OrderByInput',
    '_users_isActive_OrderByInput',
]



# recursive users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

usersRelationFilter = TypedDict(
    'usersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class usersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class usersInclude(TypedDict, total=False):
    """users relational arguments"""
    task: Union[bool, 'FindManytaskArgsFromusers']
    tokens: Union[bool, 'tokensArgsFromusers']
    entrepise: Union[bool, 'entrepiseArgsFromusers']


    

class annonceurIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""


class annonceurIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""


class annonceurIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""


class annonceurIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""


class annonceurIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class annonceurArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'annonceurIncludeFromannonceurRecursive1'


class annonceurArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'annonceurIncludeFromannonceurRecursive2'


class annonceurArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'annonceurIncludeFromannonceurRecursive3'


class annonceurArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'annonceurIncludeFromannonceurRecursive4'


class annonceurArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyannonceurArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive1'


class FindManyannonceurArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive2'


class FindManyannonceurArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive3'


class FindManyannonceurArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    include: 'annonceurIncludeFromannonceurRecursive4'


class FindManyannonceurArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['annonceurOrderByInput', List['annonceurOrderByInput']]
    where: 'annonceurWhereInput'
    cursor: 'annonceurWhereUniqueInput'
    distinct: List['annonceurScalarFieldKeys']
    
    

class categorieIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""


class categorieIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""


class categorieIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""


class categorieIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""


class categorieIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class categorieArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorieIncludeFromcategorieRecursive1'


class categorieArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorieIncludeFromcategorieRecursive2'


class categorieArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorieIncludeFromcategorieRecursive3'


class categorieArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorieIncludeFromcategorieRecursive4'


class categorieArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycategorieArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive1'


class FindManycategorieArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive2'


class FindManycategorieArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive3'


class FindManycategorieArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    include: 'categorieIncludeFromcategorieRecursive4'


class FindManycategorieArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorieOrderByInput', List['categorieOrderByInput']]
    where: 'categorieWhereInput'
    cursor: 'categorieWhereUniqueInput'
    distinct: List['categorieScalarFieldKeys']
    
    

class categoryclaimsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromusersRecursive1']


class categoryclaimsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromusersRecursive2']


class categoryclaimsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromusersRecursive3']


class categoryclaimsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    reclamation: Union[bool, 'FindManyreclamationArgsFromusersRecursive4']


class categoryclaimsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class categoryclaimsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class categoryclaimsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class categoryclaimsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class categoryclaimsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class categoryclaimsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycategoryclaimsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive1'


class FindManycategoryclaimsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive2'


class FindManycategoryclaimsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive3'


class FindManycategoryclaimsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    include: 'categoryclaimsIncludeFromcategoryclaimsRecursive4'


class FindManycategoryclaimsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryclaimsOrderByInput', List['categoryclaimsOrderByInput']]
    where: 'categoryclaimsWhereInput'
    cursor: 'categoryclaimsWhereUniqueInput'
    distinct: List['categoryclaimsScalarFieldKeys']
    
    

class categoryrecetteIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    publicite: Union[bool, 'FindManypubliciteArgsFromusersRecursive1']
    recette: Union[bool, 'FindManyrecetteArgsFromusersRecursive1']


class categoryrecetteIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    publicite: Union[bool, 'FindManypubliciteArgsFromusersRecursive2']
    recette: Union[bool, 'FindManyrecetteArgsFromusersRecursive2']


class categoryrecetteIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    publicite: Union[bool, 'FindManypubliciteArgsFromusersRecursive3']
    recette: Union[bool, 'FindManyrecetteArgsFromusersRecursive3']


class categoryrecetteIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    publicite: Union[bool, 'FindManypubliciteArgsFromusersRecursive4']
    recette: Union[bool, 'FindManyrecetteArgsFromusersRecursive4']


class categoryrecetteIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class categoryrecetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class categoryrecetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class categoryrecetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class categoryrecetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class categoryrecetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycategoryrecetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive1'


class FindManycategoryrecetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive2'


class FindManycategoryrecetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive3'


class FindManycategoryrecetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    include: 'categoryrecetteIncludeFromcategoryrecetteRecursive4'


class FindManycategoryrecetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categoryrecetteOrderByInput', List['categoryrecetteOrderByInput']]
    where: 'categoryrecetteWhereInput'
    cursor: 'categoryrecetteWhereUniqueInput'
    distinct: List['categoryrecetteScalarFieldKeys']
    
    

class categorysensorsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive1']


class categorysensorsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive2']


class categorysensorsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive3']


class categorysensorsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive4']


class categorysensorsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class categorysensorsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class categorysensorsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class categorysensorsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class categorysensorsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class categorysensorsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycategorysensorsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive1'


class FindManycategorysensorsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive2'


class FindManycategorysensorsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive3'


class FindManycategorysensorsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    include: 'categorysensorsIncludeFromcategorysensorsRecursive4'


class FindManycategorysensorsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['categorysensorsOrderByInput', List['categorysensorsOrderByInput']]
    where: 'categorysensorsWhereInput'
    cursor: 'categorysensorsWhereUniqueInput'
    distinct: List['categorysensorsScalarFieldKeys']
    
    

class commandeIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive1']
    recette: Union[bool, 'recetteArgsFromusersRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive1']


class commandeIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive2']
    recette: Union[bool, 'recetteArgsFromusersRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive2']


class commandeIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive3']
    recette: Union[bool, 'recetteArgsFromusersRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive3']


class commandeIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive4']
    recette: Union[bool, 'recetteArgsFromusersRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive4']


class commandeIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class commandeArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'commandeIncludeFromcommandeRecursive1'


class commandeArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'commandeIncludeFromcommandeRecursive2'


class commandeArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'commandeIncludeFromcommandeRecursive3'


class commandeArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'commandeIncludeFromcommandeRecursive4'


class commandeArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycommandeArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive1'


class FindManycommandeArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive2'


class FindManycommandeArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive3'


class FindManycommandeArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    include: 'commandeIncludeFromcommandeRecursive4'


class FindManycommandeArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['commandeOrderByInput', List['commandeOrderByInput']]
    where: 'commandeWhereInput'
    cursor: 'commandeWhereUniqueInput'
    distinct: List['commandeScalarFieldKeys']
    
    

class distributeurIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive1']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive1']
    pack: Union[bool, 'packArgsFromusersRecursive1']
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive1']


class distributeurIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive2']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive2']
    pack: Union[bool, 'packArgsFromusersRecursive2']
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive2']


class distributeurIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive3']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive3']
    pack: Union[bool, 'packArgsFromusersRecursive3']
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive3']


class distributeurIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive4']
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive4']
    pack: Union[bool, 'packArgsFromusersRecursive4']
    sensors: Union[bool, 'FindManysensorsArgsFromusersRecursive4']


class distributeurIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class distributeurArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurIncludeFromdistributeurRecursive1'


class distributeurArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurIncludeFromdistributeurRecursive2'


class distributeurArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurIncludeFromdistributeurRecursive3'


class distributeurArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurIncludeFromdistributeurRecursive4'


class distributeurArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManydistributeurArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive1'


class FindManydistributeurArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive2'


class FindManydistributeurArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive3'


class FindManydistributeurArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    include: 'distributeurIncludeFromdistributeurRecursive4'


class FindManydistributeurArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurOrderByInput', List['distributeurOrderByInput']]
    where: 'distributeurWhereInput'
    cursor: 'distributeurWhereUniqueInput'
    distinct: List['distributeurScalarFieldKeys']
    
    

class distributeurRecetteIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive1']
    recette: Union[bool, 'recetteArgsFromusersRecursive1']


class distributeurRecetteIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive2']
    recette: Union[bool, 'recetteArgsFromusersRecursive2']


class distributeurRecetteIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive3']
    recette: Union[bool, 'recetteArgsFromusersRecursive3']


class distributeurRecetteIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive4']
    recette: Union[bool, 'recetteArgsFromusersRecursive4']


class distributeurRecetteIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class distributeurRecetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class distributeurRecetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class distributeurRecetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class distributeurRecetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class distributeurRecetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManydistributeurRecetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive1'


class FindManydistributeurRecetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive2'


class FindManydistributeurRecetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive3'


class FindManydistributeurRecetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    include: 'distributeurRecetteIncludeFromdistributeurRecetteRecursive4'


class FindManydistributeurRecetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['distributeurRecetteOrderByInput', List['distributeurRecetteOrderByInput']]
    where: 'distributeurRecetteWhereInput'
    cursor: 'distributeurRecetteWhereUniqueInput'
    distinct: List['distributeurRecetteScalarFieldKeys']
    
    

class entrepiseIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    pack: Union[bool, 'FindManypackArgsFromusersRecursive1']
    task: Union[bool, 'FindManytaskArgsFromusersRecursive1']
    users: Union[bool, 'FindManyusersArgsFromusersRecursive1']


class entrepiseIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    pack: Union[bool, 'FindManypackArgsFromusersRecursive2']
    task: Union[bool, 'FindManytaskArgsFromusersRecursive2']
    users: Union[bool, 'FindManyusersArgsFromusersRecursive2']


class entrepiseIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    pack: Union[bool, 'FindManypackArgsFromusersRecursive3']
    task: Union[bool, 'FindManytaskArgsFromusersRecursive3']
    users: Union[bool, 'FindManyusersArgsFromusersRecursive3']


class entrepiseIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    pack: Union[bool, 'FindManypackArgsFromusersRecursive4']
    task: Union[bool, 'FindManytaskArgsFromusersRecursive4']
    users: Union[bool, 'FindManyusersArgsFromusersRecursive4']


class entrepiseIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class entrepiseArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class entrepiseArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class entrepiseArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class entrepiseArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class entrepiseArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyentrepiseArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive1'


class FindManyentrepiseArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive2'


class FindManyentrepiseArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive3'


class FindManyentrepiseArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    include: 'entrepiseIncludeFromentrepiseRecursive4'


class FindManyentrepiseArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['entrepiseOrderByInput', List['entrepiseOrderByInput']]
    where: 'entrepiseWhereInput'
    cursor: 'entrepiseWhereUniqueInput'
    distinct: List['entrepiseScalarFieldKeys']
    
    

class factureIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'commandeArgsFromusersRecursive1']
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive1']
    infopaiment: Union[bool, 'infopaimentArgsFromusersRecursive1']


class factureIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'commandeArgsFromusersRecursive2']
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive2']
    infopaiment: Union[bool, 'infopaimentArgsFromusersRecursive2']


class factureIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'commandeArgsFromusersRecursive3']
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive3']
    infopaiment: Union[bool, 'infopaimentArgsFromusersRecursive3']


class factureIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'commandeArgsFromusersRecursive4']
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive4']
    infopaiment: Union[bool, 'infopaimentArgsFromusersRecursive4']


class factureIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class factureArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'factureIncludeFromfactureRecursive1'


class factureArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'factureIncludeFromfactureRecursive2'


class factureArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'factureIncludeFromfactureRecursive3'


class factureArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'factureIncludeFromfactureRecursive4'


class factureArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyfactureArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive1'


class FindManyfactureArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive2'


class FindManyfactureArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive3'


class FindManyfactureArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    include: 'factureIncludeFromfactureRecursive4'


class FindManyfactureArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['factureOrderByInput', List['factureOrderByInput']]
    where: 'factureWhereInput'
    cursor: 'factureWhereUniqueInput'
    distinct: List['factureScalarFieldKeys']
    
    

class infopaimentIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive1']


class infopaimentIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive2']


class infopaimentIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive3']


class infopaimentIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    facture: Union[bool, 'FindManyfactureArgsFromusersRecursive4']


class infopaimentIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class infopaimentArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class infopaimentArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class infopaimentArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class infopaimentArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class infopaimentArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyinfopaimentArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive1'


class FindManyinfopaimentArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive2'


class FindManyinfopaimentArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive3'


class FindManyinfopaimentArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    include: 'infopaimentIncludeFrominfopaimentRecursive4'


class FindManyinfopaimentArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['infopaimentOrderByInput', List['infopaimentOrderByInput']]
    where: 'infopaimentWhereInput'
    cursor: 'infopaimentWhereUniqueInput'
    distinct: List['infopaimentScalarFieldKeys']
    
    

class ingredientIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive1']


class ingredientIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive2']


class ingredientIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive3']


class ingredientIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive4']


class ingredientIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class ingredientArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'ingredientIncludeFromingredientRecursive1'


class ingredientArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'ingredientIncludeFromingredientRecursive2'


class ingredientArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'ingredientIncludeFromingredientRecursive3'


class ingredientArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'ingredientIncludeFromingredientRecursive4'


class ingredientArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyingredientArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive1'


class FindManyingredientArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive2'


class FindManyingredientArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive3'


class FindManyingredientArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    include: 'ingredientIncludeFromingredientRecursive4'


class FindManyingredientArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['ingredientOrderByInput', List['ingredientOrderByInput']]
    where: 'ingredientWhereInput'
    cursor: 'ingredientWhereUniqueInput'
    distinct: List['ingredientScalarFieldKeys']
    
    

class packIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive1']


class packIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive2']


class packIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive3']


class packIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive4']


class packIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class packArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'packIncludeFrompackRecursive1'


class packArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'packIncludeFrompackRecursive2'


class packArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'packIncludeFrompackRecursive3'


class packArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'packIncludeFrompackRecursive4'


class packArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManypackArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive1'


class FindManypackArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive2'


class FindManypackArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive3'


class FindManypackArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    include: 'packIncludeFrompackRecursive4'


class FindManypackArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['packOrderByInput', List['packOrderByInput']]
    where: 'packWhereInput'
    cursor: 'packWhereUniqueInput'
    distinct: List['packScalarFieldKeys']
    
    

class publiciteIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive1']


class publiciteIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive2']


class publiciteIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive3']


class publiciteIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive4']


class publiciteIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class publiciteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'publiciteIncludeFrompubliciteRecursive1'


class publiciteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'publiciteIncludeFrompubliciteRecursive2'


class publiciteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'publiciteIncludeFrompubliciteRecursive3'


class publiciteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'publiciteIncludeFrompubliciteRecursive4'


class publiciteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManypubliciteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive1'


class FindManypubliciteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive2'


class FindManypubliciteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive3'


class FindManypubliciteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    include: 'publiciteIncludeFrompubliciteRecursive4'


class FindManypubliciteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['publiciteOrderByInput', List['publiciteOrderByInput']]
    where: 'publiciteWhereInput'
    cursor: 'publiciteWhereUniqueInput'
    distinct: List['publiciteScalarFieldKeys']
    
    

class recetteIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive1']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive1']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive1']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive1']


class recetteIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive2']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive2']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive2']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive2']


class recetteIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive3']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive3']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive3']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive3']


class recetteIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    commande: Union[bool, 'FindManycommandeArgsFromusersRecursive4']
    distributeurRecette: Union[bool, 'FindManydistributeurRecetteArgsFromusersRecursive4']
    categoryrecette: Union[bool, 'categoryrecetteArgsFromusersRecursive4']
    recetteingr: Union[bool, 'FindManyrecetteingrArgsFromusersRecursive4']


class recetteIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class recetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteIncludeFromrecetteRecursive1'


class recetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteIncludeFromrecetteRecursive2'


class recetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteIncludeFromrecetteRecursive3'


class recetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteIncludeFromrecetteRecursive4'


class recetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyrecetteArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive1'


class FindManyrecetteArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive2'


class FindManyrecetteArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive3'


class FindManyrecetteArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    include: 'recetteIncludeFromrecetteRecursive4'


class FindManyrecetteArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteOrderByInput', List['recetteOrderByInput']]
    where: 'recetteWhereInput'
    cursor: 'recetteWhereUniqueInput'
    distinct: List['recetteScalarFieldKeys']
    
    

class recetteingrIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive1']
    recette: Union[bool, 'recetteArgsFromusersRecursive1']


class recetteingrIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive2']
    recette: Union[bool, 'recetteArgsFromusersRecursive2']


class recetteingrIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive3']
    recette: Union[bool, 'recetteArgsFromusersRecursive3']


class recetteingrIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    ingredient: Union[bool, 'ingredientArgsFromusersRecursive4']
    recette: Union[bool, 'recetteArgsFromusersRecursive4']


class recetteingrIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class recetteingrArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class recetteingrArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class recetteingrArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class recetteingrArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class recetteingrArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyrecetteingrArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive1'


class FindManyrecetteingrArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive2'


class FindManyrecetteingrArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive3'


class FindManyrecetteingrArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    include: 'recetteingrIncludeFromrecetteingrRecursive4'


class FindManyrecetteingrArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['recetteingrOrderByInput', List['recetteingrOrderByInput']]
    where: 'recetteingrWhereInput'
    cursor: 'recetteingrWhereUniqueInput'
    distinct: List['recetteingrScalarFieldKeys']
    
    

class reclamationIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromusersRecursive1']


class reclamationIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromusersRecursive2']


class reclamationIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromusersRecursive3']


class reclamationIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    categoryclaims: Union[bool, 'categoryclaimsArgsFromusersRecursive4']


class reclamationIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class reclamationArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'reclamationIncludeFromreclamationRecursive1'


class reclamationArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'reclamationIncludeFromreclamationRecursive2'


class reclamationArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'reclamationIncludeFromreclamationRecursive3'


class reclamationArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'reclamationIncludeFromreclamationRecursive4'


class reclamationArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyreclamationArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive1'


class FindManyreclamationArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive2'


class FindManyreclamationArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive3'


class FindManyreclamationArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    include: 'reclamationIncludeFromreclamationRecursive4'


class FindManyreclamationArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reclamationOrderByInput', List['reclamationOrderByInput']]
    where: 'reclamationWhereInput'
    cursor: 'reclamationWhereUniqueInput'
    distinct: List['reclamationScalarFieldKeys']
    
    

class roleIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""


class roleIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""


class roleIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""


class roleIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""


class roleIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class roleArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'roleIncludeFromroleRecursive1'


class roleArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'roleIncludeFromroleRecursive2'


class roleArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'roleIncludeFromroleRecursive3'


class roleArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'roleIncludeFromroleRecursive4'


class roleArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyroleArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive1'


class FindManyroleArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive2'


class FindManyroleArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive3'


class FindManyroleArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    include: 'roleIncludeFromroleRecursive4'


class FindManyroleArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['roleOrderByInput', List['roleOrderByInput']]
    where: 'roleWhereInput'
    cursor: 'roleWhereUniqueInput'
    distinct: List['roleScalarFieldKeys']
    
    

class sensorsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive1']
    categorysensors: Union[bool, 'categorysensorsArgsFromusersRecursive1']


class sensorsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive2']
    categorysensors: Union[bool, 'categorysensorsArgsFromusersRecursive2']


class sensorsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive3']
    categorysensors: Union[bool, 'categorysensorsArgsFromusersRecursive3']


class sensorsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    distributeur: Union[bool, 'distributeurArgsFromusersRecursive4']
    categorysensors: Union[bool, 'categorysensorsArgsFromusersRecursive4']


class sensorsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class sensorsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'sensorsIncludeFromsensorsRecursive1'


class sensorsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'sensorsIncludeFromsensorsRecursive2'


class sensorsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'sensorsIncludeFromsensorsRecursive3'


class sensorsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'sensorsIncludeFromsensorsRecursive4'


class sensorsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManysensorsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive1'


class FindManysensorsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive2'


class FindManysensorsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive3'


class FindManysensorsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    include: 'sensorsIncludeFromsensorsRecursive4'


class FindManysensorsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['sensorsOrderByInput', List['sensorsOrderByInput']]
    where: 'sensorsWhereInput'
    cursor: 'sensorsWhereUniqueInput'
    distinct: List['sensorsScalarFieldKeys']
    
    

class taskIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive1']
    typetask: Union[bool, 'typetaskArgsFromusersRecursive1']
    users: Union[bool, 'usersArgsFromusersRecursive1']


class taskIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive2']
    typetask: Union[bool, 'typetaskArgsFromusersRecursive2']
    users: Union[bool, 'usersArgsFromusersRecursive2']


class taskIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive3']
    typetask: Union[bool, 'typetaskArgsFromusersRecursive3']
    users: Union[bool, 'usersArgsFromusersRecursive3']


class taskIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive4']
    typetask: Union[bool, 'typetaskArgsFromusersRecursive4']
    users: Union[bool, 'usersArgsFromusersRecursive4']


class taskIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class taskArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'taskIncludeFromtaskRecursive1'


class taskArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'taskIncludeFromtaskRecursive2'


class taskArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'taskIncludeFromtaskRecursive3'


class taskArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'taskIncludeFromtaskRecursive4'


class taskArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManytaskArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive1'


class FindManytaskArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive2'


class FindManytaskArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive3'


class FindManytaskArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    include: 'taskIncludeFromtaskRecursive4'


class FindManytaskArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['taskOrderByInput', List['taskOrderByInput']]
    where: 'taskWhereInput'
    cursor: 'taskWhereUniqueInput'
    distinct: List['taskScalarFieldKeys']
    
    

class tokensIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    users: Union[bool, 'usersArgsFromusersRecursive1']


class tokensIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    users: Union[bool, 'usersArgsFromusersRecursive2']


class tokensIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    users: Union[bool, 'usersArgsFromusersRecursive3']


class tokensIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    users: Union[bool, 'usersArgsFromusersRecursive4']


class tokensIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class tokensArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'tokensIncludeFromtokensRecursive1'


class tokensArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'tokensIncludeFromtokensRecursive2'


class tokensArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'tokensIncludeFromtokensRecursive3'


class tokensArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'tokensIncludeFromtokensRecursive4'


class tokensArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManytokensArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive1'


class FindManytokensArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive2'


class FindManytokensArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive3'


class FindManytokensArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    include: 'tokensIncludeFromtokensRecursive4'


class FindManytokensArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['tokensOrderByInput', List['tokensOrderByInput']]
    where: 'tokensWhereInput'
    cursor: 'tokensWhereUniqueInput'
    distinct: List['tokensScalarFieldKeys']
    
    

class typetaskIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive1']


class typetaskIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive2']


class typetaskIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive3']


class typetaskIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive4']


class typetaskIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class typetaskArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'typetaskIncludeFromtypetaskRecursive1'


class typetaskArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'typetaskIncludeFromtypetaskRecursive2'


class typetaskArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'typetaskIncludeFromtypetaskRecursive3'


class typetaskArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'typetaskIncludeFromtypetaskRecursive4'


class typetaskArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManytypetaskArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive1'


class FindManytypetaskArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive2'


class FindManytypetaskArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive3'


class FindManytypetaskArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    include: 'typetaskIncludeFromtypetaskRecursive4'


class FindManytypetaskArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['typetaskOrderByInput', List['typetaskOrderByInput']]
    where: 'typetaskWhereInput'
    cursor: 'typetaskWhereUniqueInput'
    distinct: List['typetaskScalarFieldKeys']
    
    

class usersIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive1']
    tokens: Union[bool, 'tokensArgsFromusersRecursive1']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive1']


class usersIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive2']
    tokens: Union[bool, 'tokensArgsFromusersRecursive2']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive2']


class usersIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive3']
    tokens: Union[bool, 'tokensArgsFromusersRecursive3']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive3']


class usersIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    task: Union[bool, 'FindManytaskArgsFromusersRecursive4']
    tokens: Union[bool, 'tokensArgsFromusersRecursive4']
    entrepise: Union[bool, 'entrepiseArgsFromusersRecursive4']


class usersIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class usersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyusersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyusersArgs = FindManyusersArgsFromusers
FindFirstusersArgs = FindManyusersArgsFromusers


    

class usersWhereInput(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    mdp: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idRole: Union[None, _int, 'types.IntFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']
    idEntreprise: Union[None, _int, 'types.IntFilter']
    isActive: Union[None, _int, 'types.IntFilter']
    task: 'taskListRelationFilter'
    tokens: 'tokensRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive1', List['usersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive1']
    OR: List['usersWhereInputRecursive1']
    NOT: List['usersWhereInputRecursive1']


class usersWhereInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    mdp: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idRole: Union[None, _int, 'types.IntFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']
    idEntreprise: Union[None, _int, 'types.IntFilter']
    isActive: Union[None, _int, 'types.IntFilter']
    task: 'taskListRelationFilter'
    tokens: 'tokensRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive2', List['usersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive2']
    OR: List['usersWhereInputRecursive2']
    NOT: List['usersWhereInputRecursive2']


class usersWhereInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    mdp: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idRole: Union[None, _int, 'types.IntFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']
    idEntreprise: Union[None, _int, 'types.IntFilter']
    isActive: Union[None, _int, 'types.IntFilter']
    task: 'taskListRelationFilter'
    tokens: 'tokensRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive3', List['usersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive3']
    OR: List['usersWhereInputRecursive3']
    NOT: List['usersWhereInputRecursive3']


class usersWhereInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    mdp: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idRole: Union[None, _int, 'types.IntFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']
    idEntreprise: Union[None, _int, 'types.IntFilter']
    isActive: Union[None, _int, 'types.IntFilter']
    task: 'taskListRelationFilter'
    tokens: 'tokensRelationFilter'
    entrepise: 'entrepiseRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive4', List['usersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive4']
    OR: List['usersWhereInputRecursive4']
    NOT: List['usersWhereInputRecursive4']


class usersWhereInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nom: Union[None, _str, 'types.StringFilter']
    prenom: Union[None, _str, 'types.StringFilter']
    mail: Union[None, _str, 'types.StringFilter']
    mdp: Union[None, _str, 'types.StringFilter']
    tel: Union[None, _str, 'types.StringFilter']
    idRole: Union[None, _int, 'types.IntFilter']
    idCreatedpar: Union[None, _int, 'types.IntFilter']
    idEntreprise: Union[None, _int, 'types.IntFilter']
    isActive: Union[None, _int, 'types.IntFilter']
    task: 'taskListRelationFilter'
    tokens: 'tokensRelationFilter'
    entrepise: 'entrepiseRelationFilter'



# aggregate users types


    

class usersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    mdp: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idRole: Union[_int, 'types.IntWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']
    idEntreprise: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive1']
    OR: List['usersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive1']


class usersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    mdp: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idRole: Union[_int, 'types.IntWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']
    idEntreprise: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive2']
    OR: List['usersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive2']


class usersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    mdp: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idRole: Union[_int, 'types.IntWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']
    idEntreprise: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive3']
    OR: List['usersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive3']


class usersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    mdp: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idRole: Union[_int, 'types.IntWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']
    idEntreprise: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive4']
    OR: List['usersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive4']


class usersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nom: Union[_str, 'types.StringWithAggregatesFilter']
    prenom: Union[_str, 'types.StringWithAggregatesFilter']
    mail: Union[_str, 'types.StringWithAggregatesFilter']
    mdp: Union[_str, 'types.StringWithAggregatesFilter']
    tel: Union[_str, 'types.StringWithAggregatesFilter']
    idRole: Union[_int, 'types.IntWithAggregatesFilter']
    idCreatedpar: Union[_int, 'types.IntWithAggregatesFilter']
    idEntreprise: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_int, 'types.IntWithAggregatesFilter']



class usersGroupByOutput(TypedDict, total=False):
    id: _int
    nom: _str
    prenom: _str
    mail: _str
    mdp: _str
    tel: _str
    idRole: _int
    idCreatedpar: _int
    idEntreprise: _int
    isActive: _int
    _sum: 'usersSumAggregateOutput'
    _avg: 'usersAvgAggregateOutput'
    _min: 'usersMinAggregateOutput'
    _max: 'usersMaxAggregateOutput'
    _count: 'usersCountAggregateOutput'


class usersAvgAggregateOutput(TypedDict, total=False):
    """users output for aggregating averages"""
    id: float
    idRole: float
    idCreatedpar: float
    idEntreprise: float
    isActive: float


class usersSumAggregateOutput(TypedDict, total=False):
    """users output for aggregating sums"""
    id: _int
    idRole: _int
    idCreatedpar: _int
    idEntreprise: _int
    isActive: _int


class usersScalarAggregateOutput(TypedDict, total=False):
    """users output including scalar fields"""
    id: _int
    nom: _str
    prenom: _str
    mail: _str
    mdp: _str
    tel: _str
    idRole: _int
    idCreatedpar: _int
    idEntreprise: _int
    isActive: _int


usersMinAggregateOutput = usersScalarAggregateOutput
usersMaxAggregateOutput = usersScalarAggregateOutput


class usersMaxAggregateInput(TypedDict, total=False):
    """users input for aggregating by max"""
    id: bool
    nom: bool
    prenom: bool
    mail: bool
    mdp: bool
    tel: bool
    idRole: bool
    idCreatedpar: bool
    idEntreprise: bool
    isActive: bool


class usersMinAggregateInput(TypedDict, total=False):
    """users input for aggregating by min"""
    id: bool
    nom: bool
    prenom: bool
    mail: bool
    mdp: bool
    tel: bool
    idRole: bool
    idCreatedpar: bool
    idEntreprise: bool
    isActive: bool


class usersNumberAggregateInput(TypedDict, total=False):
    """users input for aggregating numbers"""
    id: bool
    idRole: bool
    idCreatedpar: bool
    idEntreprise: bool
    isActive: bool


usersAvgAggregateInput = usersNumberAggregateInput
usersSumAggregateInput = usersNumberAggregateInput


usersCountAggregateInput = TypedDict(
    'usersCountAggregateInput',
    {
        'id': bool,
        'nom': bool,
        'prenom': bool,
        'mail': bool,
        'mdp': bool,
        'tel': bool,
        'idRole': bool,
        'idCreatedpar': bool,
        'idEntreprise': bool,
        'isActive': bool,
        '_all': bool,
    },
    total=False,
)

usersCountAggregateOutput = TypedDict(
    'usersCountAggregateOutput',
    {
        'id': int,
        'nom': int,
        'prenom': int,
        'mail': int,
        'mdp': int,
        'tel': int,
        'idRole': int,
        'idCreatedpar': int,
        'idEntreprise': int,
        'isActive': int,
        '_all': int,
    },
    total=False,
)


usersKeys = Literal[
    'id',
    'nom',
    'prenom',
    'mail',
    'mdp',
    'tel',
    'idRole',
    'idCreatedpar',
    'idEntreprise',
    'isActive',
    'task',
    'tokens',
    'entrepise',
]
usersScalarFieldKeys = Literal[
    'id',
    'nom',
    'prenom',
    'mail',
    'mdp',
    'tel',
    'idRole',
    'idCreatedpar',
    'idEntreprise',
    'isActive',
]
usersScalarFieldKeysT = TypeVar('usersScalarFieldKeysT', bound=usersScalarFieldKeys)

usersRelationalFieldKeys = Literal[
        'task',
        'tokens',
        'entrepise',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields